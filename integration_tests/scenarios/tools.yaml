# MCP Tools Test Scenarios (new shape)

scenarios:
  - name: tools_list
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: list
        op: ToolsList
        input: {}
        expect:
          status: success
          result:
            tools: [ { name: "analyze_text" }, { name: "search" }, { name: "execute_code" }, { name: "process_batch" } ]

  - name: tools_list_schema
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: list
        op: ToolsList
        input: {}
        expect:
          status: success
          result:
            tools:
              - name: analyze_text
                inputSchema:
                  type: object
                  required: [ "text", "mode" ]
                  properties:
                    text: { type: string }
                    mode:
                      type: string
                      enum: [ "sentiment", "keywords", "summary" ]

  - name: tool_analyze_text_sentiment
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: analyze_text
          arguments: { text: "I love this new feature! It works perfectly.", mode: sentiment }
        stream_expect:
          min_events: 1

  - name: tool_analyze_text_keywords
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: analyze_text
          arguments: { text: "Machine learning algorithms process data to identify patterns.", mode: keywords }
        stream_expect:
          min_events: 1

  - name: tool_analyze_text_summary
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: analyze_text
          arguments: { text: "This is a long text that needs to be summarized.", mode: summary }
        stream_expect:
          min_events: 1

  - name: tool_search_knowledge
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: search
          arguments: { query: "MCP protocol", limit: 5 }
        stream_expect:
          min_events: 1

  - name: tool_search_knowledge_default_limit
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: search
          arguments: { query: "test query" }
        stream_expect:
          min_events: 1

  - name: tool_execute_code_python
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: execute_code
          arguments: { language: python, code: "print(2 + 2)" }
        stream_expect:
          min_events: 1

  - name: tool_execute_code_javascript
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: execute_code
          arguments: { language: javascript, code: "console.log(Math.pow(2, 3))" }
        stream_expect:
          min_events: 1

  - name: tool_call_invalid_name
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: non_existent_tool
          arguments: {}
        stream_expect:
          min_events: 1
          events:
            - event: error

  - name: tool_call_missing_args
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: analyze_text
          arguments: { text: "Some text" }
        stream_expect:
          min_events: 1
          events:
            - event: error

  - name: tool_call_invalid_arg_type
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: search
          arguments: { query: "test", limit: "not a number" }
        stream_expect:
          min_events: 1
          events:
            - event: error

  - name: tool_call_invalid_enum
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: analyze_text
          arguments: { text: test, mode: invalid_mode }
        stream_expect:
          min_events: 1
          events:
            - event: error


  - name: tool_process_batch_json
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: process_batch
          arguments: { items: ["item1","item2","item3"] }
        stream_expect:
          min_events: 1

  - name: tool_process_batch_stream_text
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call_stream_text
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: process_batch
          arguments: { items: ["item1","item2"], format: text }
        stream_expect:
          min_events: 1

  - name: tool_process_batch_stream_blob
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call_stream_blob
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: process_batch
          arguments: { items: ["a","b"], format: blob, blob: "aGVsbG8=", mimeType: "text/plain" }
        stream_expect:
          min_events: 1

  - name: tool_process_batch_stream_uri
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call_stream_uri
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: process_batch
          arguments: { items: ["x"], format: uri, uri: "system://info", mimeType: "application/json" }
        stream_expect:
          min_events: 1

  - name: tool_analyze_text_sse_on_non_streaming
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call_sse
        op: ToolsCall
        headers: { Accept: text/event-stream }
        input:
          name: analyze_text
          arguments: { text: "hello", mode: sentiment }
        stream_expect:
          min_events: 1
          events:
            - event: response


  - name: tool_process_batch_stream_error
    defaults:
      client: jsonrpc.mcp_assistant
    pre:
      auto_initialize: true
    steps:
      - name: call_stream_error
        op: ToolsCall
        headers:
          Accept: text/event-stream
        input:
          name: non_existent_tool
          arguments: {}
        expect:
          status: error
          error: { code: -32601 }
