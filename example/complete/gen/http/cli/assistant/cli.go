// Code generated by goa v3.21.5, DO NOT EDIT.
//
// assistant HTTP client CLI support package
//
// Command:
// $ goa gen example.com/assistant/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	assistantc "example.com/assistant/gen/http/assistant/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"assistant (analyze-text|search-knowledge|execute-code|list-documents|get-system-info|get-conversation-history|generate-prompts|request-completion|get-workspace-info|send-notification|subscribe-to-updates|process-batch|monitor-resource-changes|stream-logs)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` assistant analyze-text --body '{
      "mode": "summary",
      "text": "In magni."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		assistantFlags = flag.NewFlagSet("assistant", flag.ContinueOnError)

		assistantAnalyzeTextFlags    = flag.NewFlagSet("analyze-text", flag.ExitOnError)
		assistantAnalyzeTextBodyFlag = assistantAnalyzeTextFlags.String("body", "REQUIRED", "")

		assistantSearchKnowledgeFlags    = flag.NewFlagSet("search-knowledge", flag.ExitOnError)
		assistantSearchKnowledgeBodyFlag = assistantSearchKnowledgeFlags.String("body", "REQUIRED", "")

		assistantExecuteCodeFlags    = flag.NewFlagSet("execute-code", flag.ExitOnError)
		assistantExecuteCodeBodyFlag = assistantExecuteCodeFlags.String("body", "REQUIRED", "")

		assistantListDocumentsFlags = flag.NewFlagSet("list-documents", flag.ExitOnError)

		assistantGetSystemInfoFlags = flag.NewFlagSet("get-system-info", flag.ExitOnError)

		assistantGetConversationHistoryFlags    = flag.NewFlagSet("get-conversation-history", flag.ExitOnError)
		assistantGetConversationHistoryBodyFlag = assistantGetConversationHistoryFlags.String("body", "REQUIRED", "")

		assistantGeneratePromptsFlags    = flag.NewFlagSet("generate-prompts", flag.ExitOnError)
		assistantGeneratePromptsBodyFlag = assistantGeneratePromptsFlags.String("body", "REQUIRED", "")

		assistantRequestCompletionFlags    = flag.NewFlagSet("request-completion", flag.ExitOnError)
		assistantRequestCompletionBodyFlag = assistantRequestCompletionFlags.String("body", "REQUIRED", "")

		assistantGetWorkspaceInfoFlags = flag.NewFlagSet("get-workspace-info", flag.ExitOnError)

		assistantSendNotificationFlags    = flag.NewFlagSet("send-notification", flag.ExitOnError)
		assistantSendNotificationBodyFlag = assistantSendNotificationFlags.String("body", "REQUIRED", "")

		assistantSubscribeToUpdatesFlags    = flag.NewFlagSet("subscribe-to-updates", flag.ExitOnError)
		assistantSubscribeToUpdatesBodyFlag = assistantSubscribeToUpdatesFlags.String("body", "REQUIRED", "")

		assistantProcessBatchFlags    = flag.NewFlagSet("process-batch", flag.ExitOnError)
		assistantProcessBatchBodyFlag = assistantProcessBatchFlags.String("body", "REQUIRED", "")

		assistantMonitorResourceChangesFlags              = flag.NewFlagSet("monitor-resource-changes", flag.ExitOnError)
		assistantMonitorResourceChangesBodyFlag           = assistantMonitorResourceChangesFlags.String("body", "REQUIRED", "")
		assistantMonitorResourceChangesSubscriptionIDFlag = assistantMonitorResourceChangesFlags.String("subscription-id", "REQUIRED", "Subscription ID from subscribe_to_updates")

		assistantStreamLogsFlags    = flag.NewFlagSet("stream-logs", flag.ExitOnError)
		assistantStreamLogsBodyFlag = assistantStreamLogsFlags.String("body", "REQUIRED", "")
	)
	assistantFlags.Usage = assistantUsage
	assistantAnalyzeTextFlags.Usage = assistantAnalyzeTextUsage
	assistantSearchKnowledgeFlags.Usage = assistantSearchKnowledgeUsage
	assistantExecuteCodeFlags.Usage = assistantExecuteCodeUsage
	assistantListDocumentsFlags.Usage = assistantListDocumentsUsage
	assistantGetSystemInfoFlags.Usage = assistantGetSystemInfoUsage
	assistantGetConversationHistoryFlags.Usage = assistantGetConversationHistoryUsage
	assistantGeneratePromptsFlags.Usage = assistantGeneratePromptsUsage
	assistantRequestCompletionFlags.Usage = assistantRequestCompletionUsage
	assistantGetWorkspaceInfoFlags.Usage = assistantGetWorkspaceInfoUsage
	assistantSendNotificationFlags.Usage = assistantSendNotificationUsage
	assistantSubscribeToUpdatesFlags.Usage = assistantSubscribeToUpdatesUsage
	assistantProcessBatchFlags.Usage = assistantProcessBatchUsage
	assistantMonitorResourceChangesFlags.Usage = assistantMonitorResourceChangesUsage
	assistantStreamLogsFlags.Usage = assistantStreamLogsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "assistant":
			svcf = assistantFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "assistant":
			switch epn {
			case "analyze-text":
				epf = assistantAnalyzeTextFlags

			case "search-knowledge":
				epf = assistantSearchKnowledgeFlags

			case "execute-code":
				epf = assistantExecuteCodeFlags

			case "list-documents":
				epf = assistantListDocumentsFlags

			case "get-system-info":
				epf = assistantGetSystemInfoFlags

			case "get-conversation-history":
				epf = assistantGetConversationHistoryFlags

			case "generate-prompts":
				epf = assistantGeneratePromptsFlags

			case "request-completion":
				epf = assistantRequestCompletionFlags

			case "get-workspace-info":
				epf = assistantGetWorkspaceInfoFlags

			case "send-notification":
				epf = assistantSendNotificationFlags

			case "subscribe-to-updates":
				epf = assistantSubscribeToUpdatesFlags

			case "process-batch":
				epf = assistantProcessBatchFlags

			case "monitor-resource-changes":
				epf = assistantMonitorResourceChangesFlags

			case "stream-logs":
				epf = assistantStreamLogsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "assistant":
			c := assistantc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "analyze-text":
				endpoint = c.AnalyzeText()
				data, err = assistantc.BuildAnalyzeTextPayload(*assistantAnalyzeTextBodyFlag)
			case "search-knowledge":
				endpoint = c.SearchKnowledge()
				data, err = assistantc.BuildSearchKnowledgePayload(*assistantSearchKnowledgeBodyFlag)
			case "execute-code":
				endpoint = c.ExecuteCode()
				data, err = assistantc.BuildExecuteCodePayload(*assistantExecuteCodeBodyFlag)
			case "list-documents":
				endpoint = c.ListDocuments()
			case "get-system-info":
				endpoint = c.GetSystemInfo()
			case "get-conversation-history":
				endpoint = c.GetConversationHistory()
				data, err = assistantc.BuildGetConversationHistoryPayload(*assistantGetConversationHistoryBodyFlag)
			case "generate-prompts":
				endpoint = c.GeneratePrompts()
				data, err = assistantc.BuildGeneratePromptsPayload(*assistantGeneratePromptsBodyFlag)
			case "request-completion":
				endpoint = c.RequestCompletion()
				data, err = assistantc.BuildRequestCompletionPayload(*assistantRequestCompletionBodyFlag)
			case "get-workspace-info":
				endpoint = c.GetWorkspaceInfo()
			case "send-notification":
				endpoint = c.SendNotification()
				data, err = assistantc.BuildSendNotificationPayload(*assistantSendNotificationBodyFlag)
			case "subscribe-to-updates":
				endpoint = c.SubscribeToUpdates()
				data, err = assistantc.BuildSubscribeToUpdatesPayload(*assistantSubscribeToUpdatesBodyFlag)
			case "process-batch":
				endpoint = c.ProcessBatch()
				data, err = assistantc.BuildProcessBatchPayload(*assistantProcessBatchBodyFlag)
			case "monitor-resource-changes":
				endpoint = c.MonitorResourceChanges()
				data, err = assistantc.BuildMonitorResourceChangesPayload(*assistantMonitorResourceChangesBodyFlag, *assistantMonitorResourceChangesSubscriptionIDFlag)
			case "stream-logs":
				endpoint = c.StreamLogs()
				data, err = assistantc.BuildStreamLogsPayload(*assistantStreamLogsBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// assistantUsage displays the usage of the assistant command and its
// subcommands.
func assistantUsage() {
	fmt.Fprintf(os.Stderr, `AI Assistant service with full MCP protocol support
Usage:
    %[1]s [globalflags] assistant COMMAND [flags]

COMMAND:
    analyze-text: Analyze text for sentiment, keywords, or summary
    search-knowledge: Search the knowledge base
    execute-code: Execute code in a sandboxed environment
    list-documents: List available documents
    get-system-info: Get system information and status
    get-conversation-history: Get conversation history
    generate-prompts: Generate context-aware prompts
    request-completion: Request text completion from client LLM
    get-workspace-info: Get workspace root directories from client
    send-notification: Send status notification to client
    subscribe-to-updates: Subscribe to resource updates
    process-batch: Process a batch of items with progress tracking
    monitor-resource-changes: Monitor resource changes and send updates via SSE when Accept: text/event-stream is set
    stream-logs: Stream server logs in real-time via SSE

Additional help:
    %[1]s assistant COMMAND --help
`, os.Args[0])
}
func assistantAnalyzeTextUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant analyze-text -body JSON

Analyze text for sentiment, keywords, or summary
    -body JSON: 

Example:
    %[1]s assistant analyze-text --body '{
      "mode": "summary",
      "text": "In magni."
   }'
`, os.Args[0])
}

func assistantSearchKnowledgeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant search-knowledge -body JSON

Search the knowledge base
    -body JSON: 

Example:
    %[1]s assistant search-knowledge --body '{
      "limit": 5052907653549127393,
      "query": "Molestiae atque."
   }'
`, os.Args[0])
}

func assistantExecuteCodeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant execute-code -body JSON

Execute code in a sandboxed environment
    -body JSON: 

Example:
    %[1]s assistant execute-code --body '{
      "code": "Temporibus et.",
      "language": "Optio soluta numquam nostrum est et ipsa."
   }'
`, os.Args[0])
}

func assistantListDocumentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant list-documents

List available documents

Example:
    %[1]s assistant list-documents
`, os.Args[0])
}

func assistantGetSystemInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant get-system-info

Get system information and status

Example:
    %[1]s assistant get-system-info
`, os.Args[0])
}

func assistantGetConversationHistoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant get-conversation-history -body JSON

Get conversation history
    -body JSON: 

Example:
    %[1]s assistant get-conversation-history --body '{
      "limit": 893483951657480336
   }'
`, os.Args[0])
}

func assistantGeneratePromptsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant generate-prompts -body JSON

Generate context-aware prompts
    -body JSON: 

Example:
    %[1]s assistant generate-prompts --body '{
      "context": "Sed reprehenderit nihil tenetur.",
      "task": "Non velit ut assumenda earum aspernatur."
   }'
`, os.Args[0])
}

func assistantRequestCompletionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant request-completion -body JSON

Request text completion from client LLM
    -body JSON: 

Example:
    %[1]s assistant request-completion --body '{
      "messages": [
         {
            "content": "Sunt occaecati aut consectetur.",
            "role": "Quasi sit excepturi eaque ut commodi tempore."
         },
         {
            "content": "Sunt occaecati aut consectetur.",
            "role": "Quasi sit excepturi eaque ut commodi tempore."
         },
         {
            "content": "Sunt occaecati aut consectetur.",
            "role": "Quasi sit excepturi eaque ut commodi tempore."
         },
         {
            "content": "Sunt occaecati aut consectetur.",
            "role": "Quasi sit excepturi eaque ut commodi tempore."
         }
      ],
      "model_preferences": {
         "cost_priority": 0.36497652950651066,
         "hints": [
            {
               "name": "Quia provident officia."
            },
            {
               "name": "Quia provident officia."
            }
         ],
         "intelligence_priority": 0.7839813227386582,
         "speed_priority": 0.008791110319153961
      }
   }'
`, os.Args[0])
}

func assistantGetWorkspaceInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant get-workspace-info

Get workspace root directories from client

Example:
    %[1]s assistant get-workspace-info
`, os.Args[0])
}

func assistantSendNotificationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant send-notification -body JSON

Send status notification to client
    -body JSON: 

Example:
    %[1]s assistant send-notification --body '{
      "data": "Odio consequatur rerum.",
      "message": "Aut dolores omnis itaque et omnis.",
      "type": "success"
   }'
`, os.Args[0])
}

func assistantSubscribeToUpdatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant subscribe-to-updates -body JSON

Subscribe to resource updates
    -body JSON: 

Example:
    %[1]s assistant subscribe-to-updates --body '{
      "filter": "Odio commodi et repudiandae illum quis.",
      "resource": "Sit sed cum est voluptatem."
   }'
`, os.Args[0])
}

func assistantProcessBatchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant process-batch -body JSON

Process a batch of items with progress tracking
    -body JSON: 

Example:
    %[1]s assistant process-batch --body '{
      "items": [
         "In natus.",
         "Aut exercitationem ea nemo."
      ]
   }'
`, os.Args[0])
}

func assistantMonitorResourceChangesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant monitor-resource-changes -body JSON -subscription-id STRING

Monitor resource changes and send updates via SSE when Accept: text/event-stream is set
    -body JSON: 
    -subscription-id STRING: Subscription ID from subscribe_to_updates

Example:
    %[1]s assistant monitor-resource-changes --body '{
      "stream": true
   }' --subscription-id "Nostrum et."
`, os.Args[0])
}

func assistantStreamLogsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assistant stream-logs -body JSON

Stream server logs in real-time via SSE
    -body JSON: 

Example:
    %[1]s assistant stream-logs --body '{
      "filter": "Quia cum delectus nobis veniam error sunt.",
      "level": "warning"
   }'
`, os.Args[0])
}
