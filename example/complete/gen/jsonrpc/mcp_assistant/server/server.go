// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant JSON-RPC server
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"bufio"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"

	mcpassistant "example.com/assistant/gen/mcp_assistant"
	goahttp "goa.design/goa/v3/http"
	"goa.design/goa/v3/jsonrpc"
	goa "goa.design/goa/v3/pkg"
)

// Server handles JSON-RPC requests for the mcp_assistant service.
type Server struct {
	http.Handler
	// Methods is the list of methods served by this server.
	Methods []string

	// Initialize is the handler for the initialize method.
	Initialize func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// Ping is the handler for the ping method.
	Ping func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// ToolsList is the handler for the tools/list method.
	ToolsList func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// ToolsCall is the handler for the tools/call method.
	ToolsCall func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// ResourcesList is the handler for the resources/list method.
	ResourcesList func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// ResourcesRead is the handler for the resources/read method.
	ResourcesRead func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// ResourcesSubscribe is the handler for the resources/subscribe method.
	ResourcesSubscribe func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// ResourcesUnsubscribe is the handler for the resources/unsubscribe method.
	ResourcesUnsubscribe func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// PromptsList is the handler for the prompts/list method.
	PromptsList func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// PromptsGet is the handler for the prompts/get method.
	PromptsGet func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// NotifyStatusUpdate is the handler for the notify_status_update method.
	NotifyStatusUpdate func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// Subscribe is the handler for the subscribe method.
	Subscribe func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error
	// Unsubscribe is the handler for the unsubscribe method.
	Unsubscribe func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error

	decoder    func(*http.Request) goahttp.Decoder
	encoder    func(context.Context, http.ResponseWriter) goahttp.Encoder
	errhandler func(context.Context, http.ResponseWriter, error)
}

// New creates a JSON-RPC server which loads HTTP requests and calls the
// "mcp_assistant" service methods.
func New(
	endpoints *mcpassistant.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) *Server {
	s := &Server{
		Methods: []string{
			"initialize",
			"ping",
			"tools/list",
			"tools/call",
			"resources/list",
			"resources/read",
			"resources/subscribe",
			"resources/unsubscribe",
			"prompts/list",
			"prompts/get",
			"notify_status_update",
			"subscribe",
			"unsubscribe",
		},
		Initialize:           NewInitializeHandler(endpoints.Initialize, mux, decoder, encoder, errhandler),
		Ping:                 NewPingHandler(endpoints.Ping, mux, decoder, encoder, errhandler),
		ToolsList:            NewToolsListHandler(endpoints.ToolsList, mux, decoder, encoder, errhandler),
		ToolsCall:            NewToolsCallHandler(endpoints.ToolsCall, mux, decoder, encoder, errhandler),
		ResourcesList:        NewResourcesListHandler(endpoints.ResourcesList, mux, decoder, encoder, errhandler),
		ResourcesRead:        NewResourcesReadHandler(endpoints.ResourcesRead, mux, decoder, encoder, errhandler),
		ResourcesSubscribe:   NewResourcesSubscribeHandler(endpoints.ResourcesSubscribe, mux, decoder, encoder, errhandler),
		ResourcesUnsubscribe: NewResourcesUnsubscribeHandler(endpoints.ResourcesUnsubscribe, mux, decoder, encoder, errhandler),
		PromptsList:          NewPromptsListHandler(endpoints.PromptsList, mux, decoder, encoder, errhandler),
		PromptsGet:           NewPromptsGetHandler(endpoints.PromptsGet, mux, decoder, encoder, errhandler),
		NotifyStatusUpdate:   NewNotifyStatusUpdateHandler(endpoints.NotifyStatusUpdate, mux, decoder, encoder, errhandler),
		Subscribe:            NewSubscribeHandler(endpoints.Subscribe, mux, decoder, encoder, errhandler),
		Unsubscribe:          NewUnsubscribeHandler(endpoints.Unsubscribe, mux, decoder, encoder, errhandler),
		decoder:              decoder,
		encoder:              encoder,
		errhandler:           errhandler,
	}
	s.Handler = s
	return s
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "mcp_assistant" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Handler = m(s.Handler)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return mcpassistant.MethodNames[:] }

// ServeHTTP handles JSON-RPC requests.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	// Peek at the first byte to determine request type
	bufReader := bufio.NewReader(r.Body)
	peek, err := bufReader.Peek(1)
	if err != nil && err != io.EOF {
		r.Body.Close()
		s.errhandler(r.Context(), w, fmt.Errorf("failed to read request body: %w", err))
		return
	}

	// Wrap the buffered reader with the original closer
	r.Body = struct {
		io.Reader
		io.Closer
	}{
		Reader: bufReader,
		Closer: r.Body,
	}
	defer func(r *http.Request) {
		if err := r.Body.Close(); err != nil {
			s.errhandler(r.Context(), w, fmt.Errorf("failed to close request body: %w", err))
		}
	}(r)

	// Route to appropriate handler
	if len(peek) > 0 && peek[0] == '[' {
		s.handleBatch(w, r)
		return
	}
	s.handleSingle(w, r)
}

// handleSingle handles a single JSON-RPC request.
func (s *Server) handleSingle(w http.ResponseWriter, r *http.Request) {
	var req jsonrpc.RawRequest
	if err := s.decoder(r).Decode(&req); err != nil {
		// Send JSON-RPC parse error response with error details
		response := jsonrpc.MakeErrorResponse(nil, jsonrpc.ParseError, "Parse error", err.Error())
		if encErr := s.encoder(r.Context(), w).Encode(response); encErr != nil {
			s.errhandler(r.Context(), w, fmt.Errorf("failed to encode parse error response: %w", encErr))
		}
		return
	}
	s.processRequest(r.Context(), r, &req, w)
}

// handleBatch handles a batch of JSON-RPC requests.
func (s *Server) handleBatch(w http.ResponseWriter, r *http.Request) {
	var reqs []jsonrpc.RawRequest
	if err := s.decoder(r).Decode(&reqs); err != nil {
		// Send JSON-RPC parse error response for batch with error details
		response := jsonrpc.MakeErrorResponse(nil, jsonrpc.ParseError, "Parse error", err.Error())
		if encErr := s.encoder(r.Context(), w).Encode(response); encErr != nil {
			s.errhandler(r.Context(), w, fmt.Errorf("failed to encode parse error response: %w", encErr))
		}
		return
	}

	// Write responses
	w.Header().Set("Content-Type", "application/json")
	writer := &batchWriter{Writer: w}

	for _, req := range reqs {
		// Process the request with batch writer
		s.processRequest(r.Context(), r, &req, writer)
	}

	// Close the batch array
	if writer.written {
		writer.Writer.Write([]byte{']'})
	}
}

// ProcessRequest processes a single JSON-RPC request.
func (s *Server) processRequest(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) {
	if req.JSONRPC != "2.0" {
		s.encodeJSONRPCError(ctx, w, req, jsonrpc.InvalidRequest, fmt.Sprintf("Invalid JSON-RPC version, must be 2.0, got %q", req.JSONRPC), nil)
		return
	}

	if req.Method == "" {
		s.encodeJSONRPCError(ctx, w, req, jsonrpc.InvalidRequest, "Missing method field", nil)
		return
	}

	switch req.Method {
	case "initialize":
		if err := s.Initialize(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "initialize", err))
		}
	case "ping":
		if err := s.Ping(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "ping", err))
		}
	case "tools/list":
		if err := s.ToolsList(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "tools/list", err))
		}
	case "tools/call":
		if err := s.ToolsCall(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "tools/call", err))
		}
	case "resources/list":
		if err := s.ResourcesList(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "resources/list", err))
		}
	case "resources/read":
		if err := s.ResourcesRead(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "resources/read", err))
		}
	case "resources/subscribe":
		if err := s.ResourcesSubscribe(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "resources/subscribe", err))
		}
	case "resources/unsubscribe":
		if err := s.ResourcesUnsubscribe(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "resources/unsubscribe", err))
		}
	case "prompts/list":
		if err := s.PromptsList(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "prompts/list", err))
		}
	case "prompts/get":
		if err := s.PromptsGet(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "prompts/get", err))
		}
	case "notify_status_update":
		if err := s.NotifyStatusUpdate(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "notify_status_update", err))
		}
	case "subscribe":
		if err := s.Subscribe(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "subscribe", err))
		}
	case "unsubscribe":
		if err := s.Unsubscribe(ctx, r, req, w); err != nil {
			s.errhandler(ctx, w, fmt.Errorf("handler error for %s: %w", "unsubscribe", err))
		}
	default:
		s.encodeJSONRPCError(ctx, w, req, jsonrpc.MethodNotFound, fmt.Sprintf("Method %q not found", req.Method), nil)
	}
}

// batchWriter is a helper type that implements http.ResponseWriter for writing multiple JSON-RPC responses
type batchWriter struct {
	io.Writer
	header     http.Header
	statusCode int
	written    bool
}

func (rb *batchWriter) Header() http.Header {
	if rb.header == nil {
		rb.header = make(http.Header)
	}
	return rb.header
}

func (rb *batchWriter) WriteHeader(statusCode int) {
	if rb.written {
		return
	}
	rb.statusCode = statusCode
}

func (rb *batchWriter) Write(data []byte) (int, error) {
	if !rb.written {
		rb.written = true
		rb.Writer.Write([]byte{'['})
	} else {
		rb.Writer.Write([]byte{','})
	}
	return rb.Writer.Write(data)
}

// Mount configures the mux to serve the JSON-RPC mcp_assistant service methods.
func Mount(mux goahttp.Muxer, h *Server) {
	mux.Handle("POST", "/rpc", h.ServeHTTP)
}

// Mount configures the mux to serve the JSON-RPC mcp_assistant service methods.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// NewInitializeHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "initialize" endpoint.
func NewInitializeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeInitializeRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "initialize")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewInitializeResponseBody(res.(*mcpassistant.InitializeResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewPingHandler creates a JSON-RPC handler which calls the "mcp_assistant"
// service "ping" endpoint.
func NewPingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "ping")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		res, err := endpoint(ctx, nil)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewPingResponseBody(res.(*mcpassistant.PingResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewToolsListHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "tools/list" endpoint.
func NewToolsListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeToolsListRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "tools/list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewToolsListResponseBody(res.(*mcpassistant.ToolsListResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewToolsCallHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "tools/call" endpoint.
func NewToolsCallHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeToolsCallRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "tools/call")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewToolsCallResponseBody(res.(*mcpassistant.ToolsCallResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewResourcesListHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "resources/list" endpoint.
func NewResourcesListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeResourcesListRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "resources/list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewResourcesListResponseBody(res.(*mcpassistant.ResourcesListResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewResourcesReadHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "resources/read" endpoint.
func NewResourcesReadHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeResourcesReadRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "resources/read")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewResourcesReadResponseBody(res.(*mcpassistant.ResourcesReadResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewResourcesSubscribeHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "resources/subscribe" endpoint.
func NewResourcesSubscribeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeResourcesSubscribeRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "resources/subscribe")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		_, err = endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification
		if req.ID == nil || req.ID == "" {
			// Notification - no response
			return nil
		}
		// Request with no result - send empty success response
		response := jsonrpc.MakeSuccessResponse(req.ID, nil)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewResourcesUnsubscribeHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "resources/unsubscribe" endpoint.
func NewResourcesUnsubscribeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeResourcesUnsubscribeRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "resources/unsubscribe")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		_, err = endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification
		if req.ID == nil || req.ID == "" {
			// Notification - no response
			return nil
		}
		// Request with no result - send empty success response
		response := jsonrpc.MakeSuccessResponse(req.ID, nil)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewPromptsListHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "prompts/list" endpoint.
func NewPromptsListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodePromptsListRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "prompts/list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewPromptsListResponseBody(res.(*mcpassistant.PromptsListResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewPromptsGetHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "prompts/get" endpoint.
func NewPromptsGetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodePromptsGetRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "prompts/get")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewPromptsGetResponseBody(res.(*mcpassistant.PromptsGetResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewNotifyStatusUpdateHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "notify_status_update" endpoint.
func NewNotifyStatusUpdateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeNotifyStatusUpdateRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "notify_status_update")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		_, err = endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification
		if req.ID == nil || req.ID == "" {
			// Notification - no response
			return nil
		}
		// Request with no result - send empty success response
		response := jsonrpc.MakeSuccessResponse(req.ID, nil)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewSubscribeHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "subscribe" endpoint.
func NewSubscribeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeSubscribeRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "subscribe")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewSubscribeResponseBody(res.(*mcpassistant.SubscribeResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// NewUnsubscribeHandler creates a JSON-RPC handler which calls the
// "mcp_assistant" service "unsubscribe" endpoint.
func NewUnsubscribeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) func(context.Context, *http.Request, *jsonrpc.RawRequest, http.ResponseWriter) error {
	decodeParams := DecodeUnsubscribeRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request, req *jsonrpc.RawRequest, w http.ResponseWriter) error {
		ctx = context.WithValue(ctx, goa.MethodKey, "unsubscribe")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mcp_assistant")
		params, err := decodeParams(r, req)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				code := jsonrpc.InternalError
				if _, ok := err.(*goa.ServiceError); ok {
					code = jsonrpc.InvalidParams
				}
				encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("failed to decode parameters: %w", err))
			}
			return nil
		}
		res, err := endpoint(ctx, params)
		if err != nil {
			// Only send error response if request has ID (not nil or empty string)
			if req.ID != nil && req.ID != "" {
				var en goa.GoaErrorNamer
				if !errors.As(err, &en) {
					encodeJSONRPCError(ctx, w, req, jsonrpc.InternalError, err.Error(), nil, encoder, errhandler)
					return nil
				}
				switch en.GoaErrorName() {
				default:
					code := jsonrpc.InternalError
					if _, ok := err.(*goa.ServiceError); ok {
						code = jsonrpc.InvalidParams
					}
					encodeJSONRPCError(ctx, w, req, code, err.Error(), nil, encoder, errhandler)
				}
			} else {
				// No ID means notification - just log error
				errhandler(ctx, w, fmt.Errorf("endpoint error: %w", err))
			}
			return nil
		}

		// For methods with no result, check if this is a notification

		// For methods with results, determine the ID to use for the response
		var id any
		// No ID field in result - use request ID
		id = req.ID

		if id == nil || id == "" {
			// Notification - no response
			return nil
		}

		// Send response with the result
		// Convert result to response body with proper JSON tags
		body := NewUnsubscribeResponseBody(res.(*mcpassistant.UnsubscribeResult))
		response := jsonrpc.MakeSuccessResponse(id, body)
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
		return nil
	}
}

// encodeJSONRPCError creates and sends a JSON-RPC error response (handles nil
// ID gracefully)
func (s *Server) encodeJSONRPCError(ctx context.Context, w http.ResponseWriter, req *jsonrpc.RawRequest, code jsonrpc.Code, message string, data any) {
	encodeJSONRPCError(ctx, w, req, code, message, data, s.encoder, s.errhandler)
}

// encodeJSONRPCError creates and sends a JSON-RPC error response (handles nil
// ID gracefully)
func encodeJSONRPCError(
	ctx context.Context,
	w http.ResponseWriter,
	req *jsonrpc.RawRequest,
	code jsonrpc.Code,
	message string,
	data any,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
) {
	if req.ID != nil {
		response := jsonrpc.MakeErrorResponse(req.ID, code, "", message)
		if data != nil {
			response.Error.Data = data
		}
		if err := encoder(ctx, w).Encode(response); err != nil {
			errhandler(ctx, w, fmt.Errorf("failed to encode JSON-RPC response: %w", err))
		}
	}
}
