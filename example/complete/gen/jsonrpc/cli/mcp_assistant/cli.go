// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant JSON-RPC client CLI support package
//
// Command:
// $ goa gen example.com/assistant/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	mcpassistantc "example.com/assistant/gen/jsonrpc/mcp_assistant/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"mcp-assistant (initialize|ping|tools-list|tools-call|resources-list|resources-read|resources-subscribe|resources-unsubscribe|prompts-list|prompts-get|notify-status-update|subscribe|unsubscribe)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` mcp-assistant initialize --body '{
      "clientInfo": {
         "name": "Commodi sequi quas aliquam.",
         "version": "Eos voluptas voluptas enim rerum at."
      },
      "protocolVersion": "Ea nobis voluptas consequatur."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		mcpAssistantFlags = flag.NewFlagSet("mcp-assistant", flag.ContinueOnError)

		mcpAssistantInitializeFlags    = flag.NewFlagSet("initialize", flag.ExitOnError)
		mcpAssistantInitializeBodyFlag = mcpAssistantInitializeFlags.String("body", "REQUIRED", "")

		mcpAssistantPingFlags = flag.NewFlagSet("ping", flag.ExitOnError)

		mcpAssistantToolsListFlags    = flag.NewFlagSet("tools-list", flag.ExitOnError)
		mcpAssistantToolsListBodyFlag = mcpAssistantToolsListFlags.String("body", "REQUIRED", "")

		mcpAssistantToolsCallFlags    = flag.NewFlagSet("tools-call", flag.ExitOnError)
		mcpAssistantToolsCallBodyFlag = mcpAssistantToolsCallFlags.String("body", "REQUIRED", "")

		mcpAssistantResourcesListFlags    = flag.NewFlagSet("resources-list", flag.ExitOnError)
		mcpAssistantResourcesListBodyFlag = mcpAssistantResourcesListFlags.String("body", "REQUIRED", "")

		mcpAssistantResourcesReadFlags    = flag.NewFlagSet("resources-read", flag.ExitOnError)
		mcpAssistantResourcesReadBodyFlag = mcpAssistantResourcesReadFlags.String("body", "REQUIRED", "")

		mcpAssistantResourcesSubscribeFlags    = flag.NewFlagSet("resources-subscribe", flag.ExitOnError)
		mcpAssistantResourcesSubscribeBodyFlag = mcpAssistantResourcesSubscribeFlags.String("body", "REQUIRED", "")

		mcpAssistantResourcesUnsubscribeFlags    = flag.NewFlagSet("resources-unsubscribe", flag.ExitOnError)
		mcpAssistantResourcesUnsubscribeBodyFlag = mcpAssistantResourcesUnsubscribeFlags.String("body", "REQUIRED", "")

		mcpAssistantPromptsListFlags    = flag.NewFlagSet("prompts-list", flag.ExitOnError)
		mcpAssistantPromptsListBodyFlag = mcpAssistantPromptsListFlags.String("body", "REQUIRED", "")

		mcpAssistantPromptsGetFlags    = flag.NewFlagSet("prompts-get", flag.ExitOnError)
		mcpAssistantPromptsGetBodyFlag = mcpAssistantPromptsGetFlags.String("body", "REQUIRED", "")

		mcpAssistantNotifyStatusUpdateFlags    = flag.NewFlagSet("notify-status-update", flag.ExitOnError)
		mcpAssistantNotifyStatusUpdateBodyFlag = mcpAssistantNotifyStatusUpdateFlags.String("body", "REQUIRED", "")

		mcpAssistantSubscribeFlags    = flag.NewFlagSet("subscribe", flag.ExitOnError)
		mcpAssistantSubscribeBodyFlag = mcpAssistantSubscribeFlags.String("body", "REQUIRED", "")

		mcpAssistantUnsubscribeFlags    = flag.NewFlagSet("unsubscribe", flag.ExitOnError)
		mcpAssistantUnsubscribeBodyFlag = mcpAssistantUnsubscribeFlags.String("body", "REQUIRED", "")
	)
	mcpAssistantFlags.Usage = mcpAssistantUsage
	mcpAssistantInitializeFlags.Usage = mcpAssistantInitializeUsage
	mcpAssistantPingFlags.Usage = mcpAssistantPingUsage
	mcpAssistantToolsListFlags.Usage = mcpAssistantToolsListUsage
	mcpAssistantToolsCallFlags.Usage = mcpAssistantToolsCallUsage
	mcpAssistantResourcesListFlags.Usage = mcpAssistantResourcesListUsage
	mcpAssistantResourcesReadFlags.Usage = mcpAssistantResourcesReadUsage
	mcpAssistantResourcesSubscribeFlags.Usage = mcpAssistantResourcesSubscribeUsage
	mcpAssistantResourcesUnsubscribeFlags.Usage = mcpAssistantResourcesUnsubscribeUsage
	mcpAssistantPromptsListFlags.Usage = mcpAssistantPromptsListUsage
	mcpAssistantPromptsGetFlags.Usage = mcpAssistantPromptsGetUsage
	mcpAssistantNotifyStatusUpdateFlags.Usage = mcpAssistantNotifyStatusUpdateUsage
	mcpAssistantSubscribeFlags.Usage = mcpAssistantSubscribeUsage
	mcpAssistantUnsubscribeFlags.Usage = mcpAssistantUnsubscribeUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "mcp-assistant":
			svcf = mcpAssistantFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "mcp-assistant":
			switch epn {
			case "initialize":
				epf = mcpAssistantInitializeFlags

			case "ping":
				epf = mcpAssistantPingFlags

			case "tools-list":
				epf = mcpAssistantToolsListFlags

			case "tools-call":
				epf = mcpAssistantToolsCallFlags

			case "resources-list":
				epf = mcpAssistantResourcesListFlags

			case "resources-read":
				epf = mcpAssistantResourcesReadFlags

			case "resources-subscribe":
				epf = mcpAssistantResourcesSubscribeFlags

			case "resources-unsubscribe":
				epf = mcpAssistantResourcesUnsubscribeFlags

			case "prompts-list":
				epf = mcpAssistantPromptsListFlags

			case "prompts-get":
				epf = mcpAssistantPromptsGetFlags

			case "notify-status-update":
				epf = mcpAssistantNotifyStatusUpdateFlags

			case "subscribe":
				epf = mcpAssistantSubscribeFlags

			case "unsubscribe":
				epf = mcpAssistantUnsubscribeFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "mcp-assistant":
			c := mcpassistantc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "initialize":
				endpoint = c.Initialize()
				data, err = mcpassistantc.BuildInitializePayload(*mcpAssistantInitializeBodyFlag)
			case "ping":
				endpoint = c.Ping()
			case "tools-list":
				endpoint = c.ToolsList()
				data, err = mcpassistantc.BuildToolsListPayload(*mcpAssistantToolsListBodyFlag)
			case "tools-call":
				endpoint = c.ToolsCall()
				data, err = mcpassistantc.BuildToolsCallPayload(*mcpAssistantToolsCallBodyFlag)
			case "resources-list":
				endpoint = c.ResourcesList()
				data, err = mcpassistantc.BuildResourcesListPayload(*mcpAssistantResourcesListBodyFlag)
			case "resources-read":
				endpoint = c.ResourcesRead()
				data, err = mcpassistantc.BuildResourcesReadPayload(*mcpAssistantResourcesReadBodyFlag)
			case "resources-subscribe":
				endpoint = c.ResourcesSubscribe()
				data, err = mcpassistantc.BuildResourcesSubscribePayload(*mcpAssistantResourcesSubscribeBodyFlag)
			case "resources-unsubscribe":
				endpoint = c.ResourcesUnsubscribe()
				data, err = mcpassistantc.BuildResourcesUnsubscribePayload(*mcpAssistantResourcesUnsubscribeBodyFlag)
			case "prompts-list":
				endpoint = c.PromptsList()
				data, err = mcpassistantc.BuildPromptsListPayload(*mcpAssistantPromptsListBodyFlag)
			case "prompts-get":
				endpoint = c.PromptsGet()
				data, err = mcpassistantc.BuildPromptsGetPayload(*mcpAssistantPromptsGetBodyFlag)
			case "notify-status-update":
				endpoint = c.NotifyStatusUpdate()
				data, err = mcpassistantc.BuildNotifyStatusUpdatePayload(*mcpAssistantNotifyStatusUpdateBodyFlag)
			case "subscribe":
				endpoint = c.Subscribe()
				data, err = mcpassistantc.BuildSubscribePayload(*mcpAssistantSubscribeBodyFlag)
			case "unsubscribe":
				endpoint = c.Unsubscribe()
				data, err = mcpassistantc.BuildUnsubscribePayload(*mcpAssistantUnsubscribeBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mcpAssistantUsage displays the usage of the mcp-assistant command and its
// subcommands.
func mcpAssistantUsage() {
	fmt.Fprintf(os.Stderr, `MCP protocol service for assistant
Usage:
    %[1]s [globalflags] mcp-assistant COMMAND [flags]

COMMAND:
    initialize: Initialize MCP session
    ping: Ping the server
    tools-list: List available tools
    tools-call: Call a tool
    resources-list: List available resources
    resources-read: Read a resource
    resources-subscribe: Subscribe to resource changes
    resources-unsubscribe: Unsubscribe from resource changes
    prompts-list: List available prompts
    prompts-get: Get a prompt by name
    notify-status-update: Send status updates to client
    subscribe: Subscribe to resource updates
    unsubscribe: Unsubscribe from resource updates

Additional help:
    %[1]s mcp-assistant COMMAND --help
`, os.Args[0])
}
func mcpAssistantInitializeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant initialize -body JSON

Initialize MCP session
    -body JSON: 

Example:
    %[1]s mcp-assistant initialize --body '{
      "clientInfo": {
         "name": "Commodi sequi quas aliquam.",
         "version": "Eos voluptas voluptas enim rerum at."
      },
      "protocolVersion": "Ea nobis voluptas consequatur."
   }'
`, os.Args[0])
}

func mcpAssistantPingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant ping

Ping the server

Example:
    %[1]s mcp-assistant ping
`, os.Args[0])
}

func mcpAssistantToolsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant tools-list -body JSON

List available tools
    -body JSON: 

Example:
    %[1]s mcp-assistant tools-list --body '{
      "cursor": "Dolor quos occaecati et."
   }'
`, os.Args[0])
}

func mcpAssistantToolsCallUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant tools-call -body JSON

Call a tool
    -body JSON: 

Example:
    %[1]s mcp-assistant tools-call --body '{
      "arguments": "Voluptate voluptatem eos libero alias.",
      "name": "analyze_text"
   }'
`, os.Args[0])
}

func mcpAssistantResourcesListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant resources-list -body JSON

List available resources
    -body JSON: 

Example:
    %[1]s mcp-assistant resources-list --body '{
      "cursor": "Ullam laboriosam itaque."
   }'
`, os.Args[0])
}

func mcpAssistantResourcesReadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant resources-read -body JSON

Read a resource
    -body JSON: 

Example:
    %[1]s mcp-assistant resources-read --body '{
      "uri": "X:"
   }'
`, os.Args[0])
}

func mcpAssistantResourcesSubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant resources-subscribe -body JSON

Subscribe to resource changes
    -body JSON: 

Example:
    %[1]s mcp-assistant resources-subscribe --body '{
      "uri": "Sint ut expedita at repellat recusandae quidem."
   }'
`, os.Args[0])
}

func mcpAssistantResourcesUnsubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant resources-unsubscribe -body JSON

Unsubscribe from resource changes
    -body JSON: 

Example:
    %[1]s mcp-assistant resources-unsubscribe --body '{
      "uri": "Illum iusto."
   }'
`, os.Args[0])
}

func mcpAssistantPromptsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant prompts-list -body JSON

List available prompts
    -body JSON: 

Example:
    %[1]s mcp-assistant prompts-list --body '{
      "cursor": "Enim praesentium non incidunt perspiciatis fugit eveniet."
   }'
`, os.Args[0])
}

func mcpAssistantPromptsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant prompts-get -body JSON

Get a prompt by name
    -body JSON: 

Example:
    %[1]s mcp-assistant prompts-get --body '{
      "arguments": "Earum sint quam.",
      "name": "code_review"
   }'
`, os.Args[0])
}

func mcpAssistantNotifyStatusUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant notify-status-update -body JSON

Send status updates to client
    -body JSON: 

Example:
    %[1]s mcp-assistant notify-status-update --body '{
      "data": "Nesciunt voluptate quia.",
      "message": "Est minima at provident illo.",
      "type": "Consectetur nemo dolore in tempore est."
   }'
`, os.Args[0])
}

func mcpAssistantSubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant subscribe -body JSON

Subscribe to resource updates
    -body JSON: 

Example:
    %[1]s mcp-assistant subscribe --body '{
      "uri": "Sed porro."
   }'
`, os.Args[0])
}

func mcpAssistantUnsubscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mcp-assistant unsubscribe -body JSON

Unsubscribe from resource updates
    -body JSON: 

Example:
    %[1]s mcp-assistant unsubscribe --body '{
      "uri": "Et suscipit qui totam provident distinctio nostrum."
   }'
`, os.Args[0])
}
