// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming endpoints
//
// Command:
// $ goa gen example.com/assistant/design

package streaming

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "streaming" service endpoints.
type Endpoints struct {
	StreamEvents           goa.Endpoint
	StreamLogs             goa.Endpoint
	MonitorResourceChanges goa.Endpoint
	FlexibleData           goa.Endpoint
}

// StreamEventsEndpointInput holds both the payload and the server stream of
// the "stream_events" method.
type StreamEventsEndpointInput struct {
	// Payload is the method payload.
	Payload *StreamEventsPayload
	// Stream is the server stream used by the "stream_events" method to send data.
	Stream StreamEventsServerStream
}

// StreamLogsEndpointInput holds both the payload and the server stream of the
// "stream_logs" method.
type StreamLogsEndpointInput struct {
	// Payload is the method payload.
	Payload *StreamLogsPayload
	// Stream is the server stream used by the "stream_logs" method to send data.
	Stream StreamLogsServerStream
}

// MonitorResourceChangesEndpointInput holds both the payload and the server
// stream of the "monitor_resource_changes" method.
type MonitorResourceChangesEndpointInput struct {
	// Payload is the method payload.
	Payload *MonitorResourceChangesPayload
	// Stream is the server stream used by the "monitor_resource_changes" method to
	// send data.
	Stream MonitorResourceChangesServerStream
}

// FlexibleDataEndpointInput holds both the payload and the server stream of
// the "flexible_data" method.
type FlexibleDataEndpointInput struct {
	// Payload is the method payload.
	Payload *FlexibleDataPayload
	// Stream is the server stream used by the "flexible_data" method to send data.
	Stream FlexibleDataServerStream
}

// NewEndpoints wraps the methods of the "streaming" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		StreamEvents:           NewStreamEventsEndpoint(s),
		StreamLogs:             NewStreamLogsEndpoint(s),
		MonitorResourceChanges: NewMonitorResourceChangesEndpoint(s),
		FlexibleData:           NewFlexibleDataEndpoint(s),
	}
}

// Use applies the given middleware to all the "streaming" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.StreamEvents = m(e.StreamEvents)
	e.StreamLogs = m(e.StreamLogs)
	e.MonitorResourceChanges = m(e.MonitorResourceChanges)
	e.FlexibleData = m(e.FlexibleData)
}

// NewStreamEventsEndpoint returns an endpoint function that calls the method
// "stream_events" of service "streaming".
func NewStreamEventsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*StreamEventsEndpointInput)
		return nil, s.StreamEvents(ctx, ep.Payload, ep.Stream)
	}
}

// NewStreamLogsEndpoint returns an endpoint function that calls the method
// "stream_logs" of service "streaming".
func NewStreamLogsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*StreamLogsEndpointInput)
		return nil, s.StreamLogs(ctx, ep.Payload, ep.Stream)
	}
}

// NewMonitorResourceChangesEndpoint returns an endpoint function that calls
// the method "monitor_resource_changes" of service "streaming".
func NewMonitorResourceChangesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*MonitorResourceChangesEndpointInput)
		return nil, s.MonitorResourceChanges(ctx, ep.Payload, ep.Stream)
	}
}

// NewFlexibleDataEndpoint returns an endpoint function that calls the method
// "flexible_data" of service "streaming".
func NewFlexibleDataEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*FlexibleDataEndpointInput)
		return nil, s.FlexibleData(ctx, ep.Payload, ep.Stream)
	}
}
