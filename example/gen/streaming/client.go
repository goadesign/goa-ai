// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming client
//
// Command:
// $ goa gen example.com/assistant/design

package streaming

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "streaming" service client.
type Client struct {
	StreamEventsEndpoint           goa.Endpoint
	StreamLogsEndpoint             goa.Endpoint
	MonitorResourceChangesEndpoint goa.Endpoint
	FlexibleDataEndpoint           goa.Endpoint
}

// NewClient initializes a "streaming" service client given the endpoints.
func NewClient(streamEvents, streamLogs, monitorResourceChanges, flexibleData goa.Endpoint) *Client {
	return &Client{
		StreamEventsEndpoint:           streamEvents,
		StreamLogsEndpoint:             streamLogs,
		MonitorResourceChangesEndpoint: monitorResourceChanges,
		FlexibleDataEndpoint:           flexibleData,
	}
}

// StreamEvents calls the "stream_events" endpoint of the "streaming" service.
func (c *Client) StreamEvents(ctx context.Context, p *StreamEventsPayload) (res StreamEventsClientStream, err error) {
	var ires any
	ires, err = c.StreamEventsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(StreamEventsClientStream), nil
}

// StreamLogs calls the "stream_logs" endpoint of the "streaming" service.
func (c *Client) StreamLogs(ctx context.Context, p *StreamLogsPayload) (res StreamLogsClientStream, err error) {
	var ires any
	ires, err = c.StreamLogsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(StreamLogsClientStream), nil
}

// MonitorResourceChanges calls the "monitor_resource_changes" endpoint of the
// "streaming" service.
func (c *Client) MonitorResourceChanges(ctx context.Context, p *MonitorResourceChangesPayload) (res MonitorResourceChangesClientStream, err error) {
	var ires any
	ires, err = c.MonitorResourceChangesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(MonitorResourceChangesClientStream), nil
}

// FlexibleData calls the "flexible_data" endpoint of the "streaming" service.
func (c *Client) FlexibleData(ctx context.Context, p *FlexibleDataPayload) (res FlexibleDataClientStream, err error) {
	var ires any
	ires, err = c.FlexibleDataEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(FlexibleDataClientStream), nil
}
