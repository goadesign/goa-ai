// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming service
//
// Command:
// $ goa gen example.com/assistant/design

package streaming

import (
	"context"
)

// Service for testing HTTP streaming features
type Service interface {
	// Stream events from server to client using SSE
	StreamEvents(context.Context, *StreamEventsPayload, StreamEventsServerStream) (err error)
	// Stream logs using SSE
	StreamLogs(context.Context, *StreamLogsPayload, StreamLogsServerStream) (err error)
	// Monitor resource changes with server streaming
	MonitorResourceChanges(context.Context, *MonitorResourceChangesPayload, MonitorResourceChangesServerStream) (err error)
	// Flexible data streaming
	FlexibleData(context.Context, *FlexibleDataPayload, FlexibleDataServerStream) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "assistant"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "streaming"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"stream_events", "stream_logs", "monitor_resource_changes", "flexible_data"}

// StreamEventsServerStream allows streaming instances of *EventUpdate to the
// client.
type StreamEventsServerStream interface {
	// Send streams instances of "EventUpdate".
	Send(*EventUpdate) error
	SendWithContext(context.Context, *EventUpdate) error
	// Close closes the stream.
	Close() error
}

// StreamEventsClientStream allows streaming instances of *EventUpdate to the
// client.
type StreamEventsClientStream interface {
	Recv() (*EventUpdate, error)
	RecvWithContext(context.Context) (*EventUpdate, error)
}

// StreamLogsServerStream allows streaming instances of *LogEntry to the client.
type StreamLogsServerStream interface {
	// Send streams instances of "LogEntry".
	Send(*LogEntry) error
	SendWithContext(context.Context, *LogEntry) error
	// Close closes the stream.
	Close() error
}

// StreamLogsClientStream allows streaming instances of *LogEntry to the client.
type StreamLogsClientStream interface {
	Recv() (*LogEntry, error)
	RecvWithContext(context.Context) (*LogEntry, error)
}

// MonitorResourceChangesServerStream allows streaming instances of
// *ResourceUpdate to the client.
type MonitorResourceChangesServerStream interface {
	// Send streams instances of "ResourceUpdate".
	Send(*ResourceUpdate) error
	SendWithContext(context.Context, *ResourceUpdate) error
	// Close closes the stream.
	Close() error
}

// MonitorResourceChangesClientStream allows streaming instances of
// *ResourceUpdate to the client.
type MonitorResourceChangesClientStream interface {
	Recv() (*ResourceUpdate, error)
	RecvWithContext(context.Context) (*ResourceUpdate, error)
}

// FlexibleDataServerStream allows streaming instances of *DataUpdate to the
// client.
type FlexibleDataServerStream interface {
	// Send streams instances of "DataUpdate".
	Send(*DataUpdate) error
	SendWithContext(context.Context, *DataUpdate) error
	// Close closes the stream.
	Close() error
}

// FlexibleDataClientStream allows streaming instances of *DataUpdate to the
// client.
type FlexibleDataClientStream interface {
	Recv() (*DataUpdate, error)
	RecvWithContext(context.Context) (*DataUpdate, error)
}

// DataUpdate is the result type of the streaming service flexible_data method.
type DataUpdate struct {
	// Update ID
	UpdateID string
	// Update data
	Data any
	// Update sequence number
	Sequence int
	// Whether this is the final update
	Final bool
}

// EventUpdate is the result type of the streaming service stream_events method.
type EventUpdate struct {
	// Event ID
	EventID string
	// Event category
	Category string
	// Event type
	Type string
	// Event data
	Data any
	// Event timestamp
	Timestamp string
}

// FlexibleDataPayload is the payload type of the streaming service
// flexible_data method.
type FlexibleDataPayload struct {
	// Type of data
	DataType *string
	// Enable streaming
	Streaming bool
}

// LogEntry is the result type of the streaming service stream_logs method.
type LogEntry struct {
	// Log timestamp
	Timestamp string
	// Log level
	Level string
	// Log message
	Message string
	// Additional log data
	Data map[string]any
}

// MonitorResourceChangesPayload is the payload type of the streaming service
// monitor_resource_changes method.
type MonitorResourceChangesPayload struct {
	// Type of resource to monitor
	ResourceType string
	// Optional filter
	Filter *string
}

// ResourceUpdate is the result type of the streaming service
// monitor_resource_changes method.
type ResourceUpdate struct {
	// Update ID
	UpdateID string
	// Resource that changed
	Resource string
	// Type of change
	EventType string
	// Update data
	Data any
	// Update timestamp
	Timestamp string
}

// StreamEventsPayload is the payload type of the streaming service
// stream_events method.
type StreamEventsPayload struct {
	// Event category
	Category string
	// Optional filter
	Filter *string
}

// StreamLogsPayload is the payload type of the streaming service stream_logs
// method.
type StreamLogsPayload struct {
	// Log level
	Level string
}
