// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant service
//
// Command:
// $ goa gen example.com/assistant/design

package assistant

import (
	"context"
)

// AI Assistant service with full MCP protocol support
type Service interface {
	// Analyze text for sentiment, keywords, or summary
	AnalyzeText(context.Context, *AnalyzeTextPayload) (res *AnalysisResult, err error)
	// Search the knowledge base
	SearchKnowledge(context.Context, *SearchKnowledgePayload) (res SearchResults, err error)
	// Execute code in a sandboxed environment
	ExecuteCode(context.Context, *ExecuteCodePayload) (res *ExecutionResult, err error)
	// List available documents
	ListDocuments(context.Context) (res Documents, err error)
	// Get system information and status
	GetSystemInfo(context.Context) (res *SystemInfo, err error)
	// Get conversation history
	GetConversationHistory(context.Context, *GetConversationHistoryPayload) (res ChatMessages, err error)
	// Generate context-aware prompts
	GeneratePrompts(context.Context, *GeneratePromptsPayload) (res PromptTemplates, err error)
	// Get workspace root directories from client
	GetWorkspaceInfo(context.Context) (res *GetWorkspaceInfoResult, err error)
	// Send status notification to client
	SendNotification(context.Context, *SendNotificationPayload) (err error)
	// Subscribe to resource updates
	SubscribeToUpdates(context.Context, *SubscribeToUpdatesPayload) (res *SubscriptionInfo, err error)
	// Process a batch of items with progress tracking
	ProcessBatch(context.Context, *ProcessBatchPayload, ProcessBatchServerStream) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "assistant"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "assistant"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [11]string{"analyze_text", "search_knowledge", "execute_code", "list_documents", "get_system_info", "get_conversation_history", "generate_prompts", "get_workspace_info", "send_notification", "subscribe_to_updates", "process_batch"}

// ProcessBatchEvent is the interface implemented by the result type for the
// process_batch method.
type ProcessBatchEvent interface {
	isProcessBatchEvent()
}

// isProcessBatchEvent implements the ProcessBatchEvent interface.
func (*BatchResult) isProcessBatchEvent() {}

// ProcessBatchServerStream allows streaming instances of *BatchResult over SSE.
type ProcessBatchServerStream interface {
	// Send streams JSON-RPC notifications with "BatchResult". Notifications do not
	// expect a response.
	// IMPORTANT: Send only sends JSON-RPC notifications. Use SendAndClose to send
	// a final response.
	Send(ctx context.Context, event ProcessBatchEvent) error
	// SendAndClose sends a final response with "BatchResult" and closes the stream.
	// The result will be sent as a JSON-RPC response with the original request ID.
	// If the result has an ID field populated, that ID will be used instead of the
	// request ID.
	SendAndClose(ctx context.Context, event ProcessBatchEvent) error
	// SendError sends a JSON-RPC error response.
	SendError(ctx context.Context, id string, err error) error
}

// ProcessBatchClientStream allows streaming instances of *BatchResult to the
// client.
type ProcessBatchClientStream interface {
	Recv() (*BatchResult, error)
	RecvWithContext(context.Context) (*BatchResult, error)
}

// Stream defines the interface for managing an SSE streaming connection in the
// assistant server. It allows sending notifications and final responses. This
// interface is used by the service to interact with clients over SSE using
// JSON-RPC.
type Stream interface {
	// Send sends an event (notification or response) to the client.
	// For notifications, the result should not have an ID field.
	// For responses, the result must have an ID field.
	// Accepted types: *AnalysisResult, SearchResults, *ExecutionResult, Documents,
	// *SystemInfo, ChatMessages, PromptTemplates, *GetWorkspaceInfoResult,
	// *SubscriptionInfo, *BatchResult
	Send(ctx context.Context, event Event) error
}

// Event is the interface implemented by all result types that can be sent via
// the assistant Stream.
type Event interface {
	isassistantEvent()
}

// isassistantEvent implements the Event interface.
func (*AnalysisResult) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (SearchResults) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (*ExecutionResult) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (Documents) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (*SystemInfo) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (ChatMessages) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (PromptTemplates) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (*GetWorkspaceInfoResult) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (*SubscriptionInfo) isassistantEvent() {}

// isassistantEvent implements the Event interface.
func (*BatchResult) isassistantEvent() {}

// AnalysisResult is the result type of the assistant service analyze_text
// method.
type AnalysisResult struct {
	// Analysis mode used
	Mode string
	// Analysis result (varies by mode)
	Result any
	// Confidence score
	Confidence *float64
	// Additional metadata
	Metadata map[string]any
}

// AnalyzeTextPayload is the payload type of the assistant service analyze_text
// method.
type AnalyzeTextPayload struct {
	// Text to analyze
	Text string
	// Analysis mode
	Mode string
}

// BatchResult is the result type of the assistant service process_batch method.
type BatchResult struct {
	// Number of items processed
	Processed int
	// Number of items failed
	Failed int
	// Processing results
	Results []any
}

type ChatMessage struct {
	// Message ID
	ID string
	// Message role
	Role string
	// Message content
	Content string
	// Message timestamp
	Timestamp string
}

// ChatMessages is the result type of the assistant service
// get_conversation_history method.
type ChatMessages []*ChatMessage

type Document struct {
	// Document ID
	ID string
	// Document name
	Name string
	// Document type
	Type string
	// Size in bytes
	Size int64
	// Last modified
	Modified string
}

// Documents is the result type of the assistant service list_documents method.
type Documents []*Document

// ExecuteCodePayload is the payload type of the assistant service execute_code
// method.
type ExecuteCodePayload struct {
	// Programming language
	Language string
	// Code to execute
	Code string
}

// ExecutionResult is the result type of the assistant service execute_code
// method.
type ExecutionResult struct {
	// Execution output
	Output string
	// Error message if any
	Error *string
	// Execution time in seconds
	ExecutionTime float64
}

// GeneratePromptsPayload is the payload type of the assistant service
// generate_prompts method.
type GeneratePromptsPayload struct {
	// Current context
	Context string
	// Task type
	Task string
}

// GetConversationHistoryPayload is the payload type of the assistant service
// get_conversation_history method.
type GetConversationHistoryPayload struct {
	// Number of messages
	Limit int
}

// GetWorkspaceInfoResult is the result type of the assistant service
// get_workspace_info method.
type GetWorkspaceInfoResult struct {
	Roots []*RootInfo
}

// ProcessBatchPayload is the payload type of the assistant service
// process_batch method.
type ProcessBatchPayload struct {
	// Items to process
	Items []string
	// Output format
	Format *string
	// Blob data when format=blob
	Blob []byte
	// URI to include when format=uri
	URI *string
	// Mime type for blob/uri
	MimeType *string
}

type PromptTemplate struct {
	// Template name
	Name string
	// Template description
	Description string
	// Required variables
	Variables []string
	// Template content
	Template string
}

// PromptTemplates is the result type of the assistant service generate_prompts
// method.
type PromptTemplates []*PromptTemplate

type RootInfo struct {
	// Root URI
	URI string
	// Root name
	Name *string
}

// SearchKnowledgePayload is the payload type of the assistant service
// search_knowledge method.
type SearchKnowledgePayload struct {
	// Search query
	Query string
	// Maximum results
	Limit int
}

type SearchResult struct {
	// Result ID
	ID string
	// Result title
	Title string
	// Result content
	Content string
	// Relevance score
	Score float64
}

// SearchResults is the result type of the assistant service search_knowledge
// method.
type SearchResults []*SearchResult

// SendNotificationPayload is the payload type of the assistant service
// send_notification method.
type SendNotificationPayload struct {
	// Notification type
	Type string
	// Notification message
	Message string
	// Additional data
	Data any
}

// SubscribeToUpdatesPayload is the payload type of the assistant service
// subscribe_to_updates method.
type SubscribeToUpdatesPayload struct {
	// Resource to monitor
	Resource string
	// Optional filter
	Filter *string
}

// SubscriptionInfo is the result type of the assistant service
// subscribe_to_updates method.
type SubscriptionInfo struct {
	// Subscription ID
	SubscriptionID string
	// Subscribed resource
	Resource string
	// Subscription created
	CreatedAt string
}

// SystemInfo is the result type of the assistant service get_system_info
// method.
type SystemInfo struct {
	// System version
	Version string
	// Uptime in seconds
	Uptime int64
	// Memory usage percentage
	MemoryUsage float64
	// CPU usage percentage
	CPUUsage float64
	// Number of active connections
	ActiveConnections int
}
