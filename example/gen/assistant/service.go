// Code generated by goa v3.21.5, DO NOT EDIT.
//
// assistant service
//
// Command:
// $ goa gen example.com/assistant/design

package assistant

import (
	"context"
)

// AI Assistant service with full MCP protocol support
type Service interface {
	// Analyze text for sentiment, keywords, or summary
	AnalyzeText(context.Context, *AnalyzeTextPayload) (res *AnalysisResult, err error)
	// Search the knowledge base
	SearchKnowledge(context.Context, *SearchKnowledgePayload) (res []*SearchResult, err error)
	// Execute code in a sandboxed environment
	ExecuteCode(context.Context, *ExecuteCodePayload) (res *ExecutionResult, err error)
	// List available documents
	ListDocuments(context.Context) (res []*Document, err error)
	// Get system information and status
	GetSystemInfo(context.Context) (res *SystemInfo, err error)
	// Get conversation history
	GetConversationHistory(context.Context, *GetConversationHistoryPayload) (res []*ChatMessage, err error)
	// Generate context-aware prompts
	GeneratePrompts(context.Context, *GeneratePromptsPayload) (res []*PromptTemplate, err error)
	// Request text completion from client LLM
	RequestCompletion(context.Context, *RequestCompletionPayload) (res *RequestCompletionResult, err error)
	// Get workspace root directories from client
	GetWorkspaceInfo(context.Context) (res *GetWorkspaceInfoResult, err error)
	// Send status notification to client
	SendNotification(context.Context, *SendNotificationPayload) (err error)
	// Subscribe to resource updates
	SubscribeToUpdates(context.Context, *SubscribeToUpdatesPayload) (res *SubscriptionInfo, err error)
	// Process a batch of items with progress tracking
	ProcessBatch(context.Context, *ProcessBatchPayload) (res *BatchResult, err error)
	// Monitor resource changes and send updates via SSE when Accept:
	// text/event-stream is set
	MonitorResourceChanges(context.Context, *MonitorResourceChangesPayload) (res *MonitorResourceChangesResult, err error)
	// Stream server logs in real-time via SSE
	StreamLogs(context.Context, *StreamLogsPayload) (res *StreamLogsResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "assistant"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "assistant"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [14]string{"analyze_text", "search_knowledge", "execute_code", "list_documents", "get_system_info", "get_conversation_history", "generate_prompts", "request_completion", "get_workspace_info", "send_notification", "subscribe_to_updates", "process_batch", "monitor_resource_changes", "stream_logs"}

// AnalysisResult is the result type of the assistant service analyze_text
// method.
type AnalysisResult struct {
	// Analysis mode used
	Mode string
	// Analysis result (varies by mode)
	Result any
	// Confidence score
	Confidence *float64
	// Additional metadata
	Metadata map[string]any
}

// AnalyzeTextPayload is the payload type of the assistant service analyze_text
// method.
type AnalyzeTextPayload struct {
	// Text to analyze
	Text string
	// Analysis mode
	Mode string
}

// BatchResult is the result type of the assistant service process_batch method.
type BatchResult struct {
	// Number of items processed
	Processed int
	// Number of items failed
	Failed int
	// Processing results
	Results []any
}

type ChatMessage struct {
	// Message ID
	ID string
	// Message role
	Role string
	// Message content
	Content string
	// Message timestamp
	Timestamp string
}

type Document struct {
	// Document ID
	ID string
	// Document name
	Name string
	// Document type
	Type string
	// Size in bytes
	Size int64
	// Last modified
	Modified string
}

// ExecuteCodePayload is the payload type of the assistant service execute_code
// method.
type ExecuteCodePayload struct {
	// Programming language
	Language string
	// Code to execute
	Code string
}

// ExecutionResult is the result type of the assistant service execute_code
// method.
type ExecutionResult struct {
	// Execution output
	Output string
	// Error message if any
	Error *string
	// Execution time in seconds
	ExecutionTime float64
}

// GeneratePromptsPayload is the payload type of the assistant service
// generate_prompts method.
type GeneratePromptsPayload struct {
	// Current context
	Context string
	// Task type
	Task string
}

// GetConversationHistoryPayload is the payload type of the assistant service
// get_conversation_history method.
type GetConversationHistoryPayload struct {
	// Number of messages
	Limit int
}

// GetWorkspaceInfoResult is the result type of the assistant service
// get_workspace_info method.
type GetWorkspaceInfoResult struct {
	Roots []*RootInfo
}

type LogEntry struct {
	// Log timestamp
	Timestamp string
	// Log level
	Level string
	// Log message
	Message string
	// Additional log data
	Data map[string]any
}

type ModelHint struct {
	// Model hint name
	Name *string
}

// MonitorResourceChangesPayload is the payload type of the assistant service
// monitor_resource_changes method.
type MonitorResourceChangesPayload struct {
	// Subscription ID from subscribe_to_updates
	SubscriptionID string
	// Whether to stream updates (for SSE)
	Stream bool
}

// MonitorResourceChangesResult is the result type of the assistant service
// monitor_resource_changes method.
type MonitorResourceChangesResult struct {
	// Resource updates
	Updates []*ResourceUpdate
}

// ProcessBatchPayload is the payload type of the assistant service
// process_batch method.
type ProcessBatchPayload struct {
	// Items to process
	Items []string
}

type PromptTemplate struct {
	// Template name
	Name string
	// Template description
	Description string
	// Required variables
	Variables []string
	// Template content
	Template string
}

// RequestCompletionPayload is the payload type of the assistant service
// request_completion method.
type RequestCompletionPayload struct {
	// Messages for sampling
	Messages         []*SamplingMessage
	ModelPreferences *struct {
		Hints                []*ModelHint
		CostPriority         *float64
		SpeedPriority        *float64
		IntelligencePriority *float64
	}
}

// RequestCompletionResult is the result type of the assistant service
// request_completion method.
type RequestCompletionResult struct {
	// Model used
	Model string
	// Generated content
	Content string
	// Stop reason
	StopReason *string
}

type ResourceUpdate struct {
	// Update ID
	UpdateID string
	// Resource that changed
	Resource string
	// Type of change
	EventType string
	// Update data
	Data any
	// Update timestamp
	Timestamp string
}

type RootInfo struct {
	// Root URI
	URI string
	// Root name
	Name *string
}

type SamplingMessage struct {
	// Message role
	Role string
	// Message content
	Content string
}

// SearchKnowledgePayload is the payload type of the assistant service
// search_knowledge method.
type SearchKnowledgePayload struct {
	// Search query
	Query string
	// Maximum results
	Limit int
}

type SearchResult struct {
	// Result ID
	ID string
	// Result title
	Title string
	// Result content
	Content string
	// Relevance score
	Score float64
}

// SendNotificationPayload is the payload type of the assistant service
// send_notification method.
type SendNotificationPayload struct {
	// Notification type
	Type string
	// Notification message
	Message string
	// Additional data
	Data any
}

// StreamLogsPayload is the payload type of the assistant service stream_logs
// method.
type StreamLogsPayload struct {
	// Minimum log level
	Level string
	// Optional log filter
	Filter *string
}

// StreamLogsResult is the result type of the assistant service stream_logs
// method.
type StreamLogsResult struct {
	// Log entries
	Logs []*LogEntry
}

// SubscribeToUpdatesPayload is the payload type of the assistant service
// subscribe_to_updates method.
type SubscribeToUpdatesPayload struct {
	// Resource to monitor
	Resource string
	// Optional filter
	Filter *string
}

// SubscriptionInfo is the result type of the assistant service
// subscribe_to_updates method.
type SubscriptionInfo struct {
	// Subscription ID
	SubscriptionID string
	// Subscribed resource
	Resource string
	// Subscription created
	CreatedAt string
}

// SystemInfo is the result type of the assistant service get_system_info
// method.
type SystemInfo struct {
	// System version
	Version string
	// Uptime in seconds
	Uptime int64
	// Memory usage percentage
	MemoryUsage float64
	// CPU usage percentage
	CPUUsage float64
	// Number of active connections
	ActiveConnections int
}
