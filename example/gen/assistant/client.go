// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant client
//
// Command:
// $ goa gen example.com/assistant/design

package assistant

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "assistant" service client.
type Client struct {
	AnalyzeTextEndpoint            goa.Endpoint
	SearchKnowledgeEndpoint        goa.Endpoint
	ExecuteCodeEndpoint            goa.Endpoint
	ListDocumentsEndpoint          goa.Endpoint
	GetSystemInfoEndpoint          goa.Endpoint
	GetConversationHistoryEndpoint goa.Endpoint
	GeneratePromptsEndpoint        goa.Endpoint
	GetWorkspaceInfoEndpoint       goa.Endpoint
	SendNotificationEndpoint       goa.Endpoint
	SubscribeToUpdatesEndpoint     goa.Endpoint
	ProcessBatchEndpoint           goa.Endpoint
}

// NewClient initializes a "assistant" service client given the endpoints.
func NewClient(analyzeText, searchKnowledge, executeCode, listDocuments, getSystemInfo, getConversationHistory, generatePrompts, getWorkspaceInfo, sendNotification, subscribeToUpdates, processBatch goa.Endpoint) *Client {
	return &Client{
		AnalyzeTextEndpoint:            analyzeText,
		SearchKnowledgeEndpoint:        searchKnowledge,
		ExecuteCodeEndpoint:            executeCode,
		ListDocumentsEndpoint:          listDocuments,
		GetSystemInfoEndpoint:          getSystemInfo,
		GetConversationHistoryEndpoint: getConversationHistory,
		GeneratePromptsEndpoint:        generatePrompts,
		GetWorkspaceInfoEndpoint:       getWorkspaceInfo,
		SendNotificationEndpoint:       sendNotification,
		SubscribeToUpdatesEndpoint:     subscribeToUpdates,
		ProcessBatchEndpoint:           processBatch,
	}
}

// AnalyzeText calls the "analyze_text" endpoint of the "assistant" service.
func (c *Client) AnalyzeText(ctx context.Context, p *AnalyzeTextPayload) (res *AnalysisResult, err error) {
	var ires any
	ires, err = c.AnalyzeTextEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AnalysisResult), nil
}

// SearchKnowledge calls the "search_knowledge" endpoint of the "assistant"
// service.
func (c *Client) SearchKnowledge(ctx context.Context, p *SearchKnowledgePayload) (res SearchResults, err error) {
	var ires any
	ires, err = c.SearchKnowledgeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SearchResults), nil
}

// ExecuteCode calls the "execute_code" endpoint of the "assistant" service.
func (c *Client) ExecuteCode(ctx context.Context, p *ExecuteCodePayload) (res *ExecutionResult, err error) {
	var ires any
	ires, err = c.ExecuteCodeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ExecutionResult), nil
}

// ListDocuments calls the "list_documents" endpoint of the "assistant" service.
func (c *Client) ListDocuments(ctx context.Context) (res Documents, err error) {
	var ires any
	ires, err = c.ListDocumentsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(Documents), nil
}

// GetSystemInfo calls the "get_system_info" endpoint of the "assistant"
// service.
func (c *Client) GetSystemInfo(ctx context.Context) (res *SystemInfo, err error) {
	var ires any
	ires, err = c.GetSystemInfoEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*SystemInfo), nil
}

// GetConversationHistory calls the "get_conversation_history" endpoint of the
// "assistant" service.
func (c *Client) GetConversationHistory(ctx context.Context, p *GetConversationHistoryPayload) (res ChatMessages, err error) {
	var ires any
	ires, err = c.GetConversationHistoryEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(ChatMessages), nil
}

// GeneratePrompts calls the "generate_prompts" endpoint of the "assistant"
// service.
func (c *Client) GeneratePrompts(ctx context.Context, p *GeneratePromptsPayload) (res PromptTemplates, err error) {
	var ires any
	ires, err = c.GeneratePromptsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(PromptTemplates), nil
}

// GetWorkspaceInfo calls the "get_workspace_info" endpoint of the "assistant"
// service.
func (c *Client) GetWorkspaceInfo(ctx context.Context) (res *GetWorkspaceInfoResult, err error) {
	var ires any
	ires, err = c.GetWorkspaceInfoEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*GetWorkspaceInfoResult), nil
}

// SendNotification calls the "send_notification" endpoint of the "assistant"
// service.
func (c *Client) SendNotification(ctx context.Context, p *SendNotificationPayload) (err error) {
	_, err = c.SendNotificationEndpoint(ctx, p)
	return
}

// SubscribeToUpdates calls the "subscribe_to_updates" endpoint of the
// "assistant" service.
func (c *Client) SubscribeToUpdates(ctx context.Context, p *SubscribeToUpdatesPayload) (res *SubscriptionInfo, err error) {
	var ires any
	ires, err = c.SubscribeToUpdatesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SubscriptionInfo), nil
}

// ProcessBatch calls the "process_batch" endpoint of the "assistant" service.
func (c *Client) ProcessBatch(ctx context.Context, p *ProcessBatchPayload) (res ProcessBatchClientStream, err error) {
	var ires any
	ires, err = c.ProcessBatchEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(ProcessBatchClientStream), nil
}
