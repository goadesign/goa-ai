// Code generated by goa v3.22.2, DO NOT EDIT.
//
// grpcstream client
//
// Command:
// $ goa gen example.com/assistant/design

package grpcstream

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "grpcstream" service client.
type Client struct {
	ListItemsEndpoint      goa.Endpoint
	CollectMetricsEndpoint goa.Endpoint
	EchoEndpoint           goa.Endpoint
}

// NewClient initializes a "grpcstream" service client given the endpoints.
func NewClient(listItems, collectMetrics, echo goa.Endpoint) *Client {
	return &Client{
		ListItemsEndpoint:      listItems,
		CollectMetricsEndpoint: collectMetrics,
		EchoEndpoint:           echo,
	}
}

// ListItems calls the "list_items" endpoint of the "grpcstream" service.
func (c *Client) ListItems(ctx context.Context, p *ListItemsPayload) (res ListItemsClientStream, err error) {
	var ires any
	ires, err = c.ListItemsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(ListItemsClientStream), nil
}

// CollectMetrics calls the "collect_metrics" endpoint of the "grpcstream"
// service.
func (c *Client) CollectMetrics(ctx context.Context) (res CollectMetricsClientStream, err error) {
	var ires any
	ires, err = c.CollectMetricsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(CollectMetricsClientStream), nil
}

// Echo calls the "echo" endpoint of the "grpcstream" service.
func (c *Client) Echo(ctx context.Context) (res EchoClientStream, err error) {
	var ires any
	ires, err = c.EchoEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(EchoClientStream), nil
}
