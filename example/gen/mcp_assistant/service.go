// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant service
//
// Command:
// $ goa gen example.com/assistant/design

package mcpassistant

import (
	"context"
	"encoding/json"
)

// MCP protocol service for assistant
type Service interface {
	// Initialize MCP session
	Initialize(context.Context, *InitializePayload) (res *InitializeResult, err error)
	// Ping the server
	Ping(context.Context) (res *PingResult, err error)
	// List available tools
	ToolsList(context.Context, *ToolsListPayload) (res *ToolsListResult, err error)
	// Call a tool
	ToolsCall(context.Context, *ToolsCallPayload) (res *ToolsCallResult, err error)
	// List available resources
	ResourcesList(context.Context, *ResourcesListPayload) (res *ResourcesListResult, err error)
	// Read a resource
	ResourcesRead(context.Context, *ResourcesReadPayload) (res *ResourcesReadResult, err error)
	// Subscribe to resource changes
	ResourcesSubscribe(context.Context, *ResourcesSubscribePayload) (err error)
	// Unsubscribe from resource changes
	ResourcesUnsubscribe(context.Context, *ResourcesUnsubscribePayload) (err error)
	// List available prompts
	PromptsList(context.Context, *PromptsListPayload) (res *PromptsListResult, err error)
	// Get a prompt by name
	PromptsGet(context.Context, *PromptsGetPayload) (res *PromptsGetResult, err error)
	// Send status updates to client
	NotifyStatusUpdate(context.Context, *NotifyStatusUpdatePayload) (err error)
	// Subscribe to resource updates
	Subscribe(context.Context, *SubscribePayload) (res *SubscribeResult, err error)
	// Unsubscribe from resource updates
	Unsubscribe(context.Context, *UnsubscribePayload) (res *UnsubscribeResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "MCP"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "mcp_assistant"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [13]string{"initialize", "ping", "tools/list", "tools/call", "resources/list", "resources/read", "resources/subscribe", "resources/unsubscribe", "prompts/list", "prompts/get", "notify_status_update", "subscribe", "unsubscribe"}

type ClientInfo struct {
	// Client name
	Name string
	// Client version
	Version string
}

type ContentItem struct {
	// Content type
	Type string
	// Text content
	Text *string
	// Base64 encoded data
	Data *string
	// MIME type
	MimeType *string
	// Resource URI
	URI *string
}

// InitializePayload is the payload type of the mcp_assistant service
// initialize method.
type InitializePayload struct {
	// MCP protocol version
	ProtocolVersion string
	// Client information
	ClientInfo *ClientInfo
}

// InitializeResult is the result type of the mcp_assistant service initialize
// method.
type InitializeResult struct {
	// MCP protocol version
	ProtocolVersion string
	// Server capabilities
	Capabilities *ServerCapabilities
	// Server information
	ServerInfo *ServerInfo
}

type MessageContent struct {
	// Content type
	Type string
	// Text content
	Text *string
	// Base64 encoded data
	Data *string
	// MIME type
	MimeType *string
	// Resource URI
	URI *string
}

// NotifyStatusUpdatePayload is the payload type of the mcp_assistant service
// notify_status_update method.
type NotifyStatusUpdatePayload struct {
	// Notification type
	Type string
	// Notification message
	Message *string
	// Additional data
	Data any
}

// PingResult is the result type of the mcp_assistant service ping method.
type PingResult struct {
	// Response to ping
	Pong bool
}

type PromptArgument struct {
	// Argument name
	Name string
	// Argument description
	Description *string
	// Whether the argument is required
	Required bool
}

type PromptInfo struct {
	// Prompt name
	Name string
	// Prompt description
	Description *string
	// Prompt arguments
	Arguments []*PromptArgument
}

type PromptMessage struct {
	// Message role
	Role string
	// Message content
	Content *MessageContent
}

// Prompts capability marker
type PromptsCapability struct {
}

// PromptsGetPayload is the payload type of the mcp_assistant service
// prompts/get method.
type PromptsGetPayload struct {
	// Prompt name
	Name string
	// Prompt arguments
	Arguments json.RawMessage
}

// PromptsGetResult is the result type of the mcp_assistant service prompts/get
// method.
type PromptsGetResult struct {
	// Prompt description
	Description *string
	// Prompt messages
	Messages []*PromptMessage
}

// PromptsListPayload is the payload type of the mcp_assistant service
// prompts/list method.
type PromptsListPayload struct {
	// Pagination cursor
	Cursor *string
}

// PromptsListResult is the result type of the mcp_assistant service
// prompts/list method.
type PromptsListResult struct {
	// List of available prompts
	Prompts []*PromptInfo
}

type ResourceContent struct {
	// Resource URI
	URI string
	// Content MIME type
	MimeType *string
	// Text content
	Text *string
	// Base64 encoded binary content
	Blob *string
}

type ResourceInfo struct {
	// Resource URI
	URI string
	// Resource name
	Name *string
	// Resource description
	Description *string
	// Resource MIME type
	MimeType *string
}

// Resources capability marker
type ResourcesCapability struct {
}

// ResourcesListPayload is the payload type of the mcp_assistant service
// resources/list method.
type ResourcesListPayload struct {
	// Pagination cursor
	Cursor *string
}

// ResourcesListResult is the result type of the mcp_assistant service
// resources/list method.
type ResourcesListResult struct {
	// List of available resources
	Resources []*ResourceInfo
}

// ResourcesReadPayload is the payload type of the mcp_assistant service
// resources/read method.
type ResourcesReadPayload struct {
	// Resource URI
	URI string
}

// ResourcesReadResult is the result type of the mcp_assistant service
// resources/read method.
type ResourcesReadResult struct {
	// Resource contents
	Contents []*ResourceContent
}

// ResourcesSubscribePayload is the payload type of the mcp_assistant service
// resources/subscribe method.
type ResourcesSubscribePayload struct {
	// Resource URI to subscribe to
	URI string
}

// ResourcesUnsubscribePayload is the payload type of the mcp_assistant service
// resources/unsubscribe method.
type ResourcesUnsubscribePayload struct {
	// Resource URI to unsubscribe from
	URI string
}

type ServerCapabilities struct {
	// Tool capabilities
	Tools *ToolsCapability
	// Resource capabilities
	Resources *ResourcesCapability
	// Prompt capabilities
	Prompts *PromptsCapability
}

type ServerInfo struct {
	// Server name
	Name string
	// Server version
	Version string
}

// SubscribePayload is the payload type of the mcp_assistant service subscribe
// method.
type SubscribePayload struct {
	// Resource URI to subscribe to
	URI string
}

// SubscribeResult is the result type of the mcp_assistant service subscribe
// method.
type SubscribeResult struct {
	// Whether subscription was successful
	Success bool
}

type ToolInfo struct {
	// Tool name
	Name string
	// Tool description
	Description *string
	// JSON Schema for tool input
	InputSchema any
}

// ToolsCallPayload is the payload type of the mcp_assistant service tools/call
// method.
type ToolsCallPayload struct {
	// Tool name
	Name string
	// Tool arguments
	Arguments json.RawMessage
}

// ToolsCallResult is the result type of the mcp_assistant service tools/call
// method.
type ToolsCallResult struct {
	// Tool execution results
	Content []*ContentItem
	// Whether the tool encountered an error
	IsError *bool
}

// Tools capability marker
type ToolsCapability struct {
}

// ToolsListPayload is the payload type of the mcp_assistant service tools/list
// method.
type ToolsListPayload struct {
	// Pagination cursor
	Cursor *string
}

// ToolsListResult is the result type of the mcp_assistant service tools/list
// method.
type ToolsListResult struct {
	// List of available tools
	Tools []*ToolInfo
}

// UnsubscribePayload is the payload type of the mcp_assistant service
// unsubscribe method.
type UnsubscribePayload struct {
	// Resource URI to unsubscribe from
	URI string
}

// UnsubscribeResult is the result type of the mcp_assistant service
// unsubscribe method.
type UnsubscribeResult struct {
	// Whether unsubscription was successful
	Success bool
}
