// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant endpoints
//
// Command:
// $ goa gen example.com/assistant/design

package mcpassistant

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "mcp_assistant" service endpoints.
type Endpoints struct {
	Initialize           goa.Endpoint
	Ping                 goa.Endpoint
	ToolsList            goa.Endpoint
	ToolsCall            goa.Endpoint
	ResourcesList        goa.Endpoint
	ResourcesRead        goa.Endpoint
	ResourcesSubscribe   goa.Endpoint
	ResourcesUnsubscribe goa.Endpoint
	PromptsList          goa.Endpoint
	PromptsGet           goa.Endpoint
	NotifyStatusUpdate   goa.Endpoint
	Subscribe            goa.Endpoint
	Unsubscribe          goa.Endpoint
}

// NewEndpoints wraps the methods of the "mcp_assistant" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Initialize:           NewInitializeEndpoint(s),
		Ping:                 NewPingEndpoint(s),
		ToolsList:            NewToolsListEndpoint(s),
		ToolsCall:            NewToolsCallEndpoint(s),
		ResourcesList:        NewResourcesListEndpoint(s),
		ResourcesRead:        NewResourcesReadEndpoint(s),
		ResourcesSubscribe:   NewResourcesSubscribeEndpoint(s),
		ResourcesUnsubscribe: NewResourcesUnsubscribeEndpoint(s),
		PromptsList:          NewPromptsListEndpoint(s),
		PromptsGet:           NewPromptsGetEndpoint(s),
		NotifyStatusUpdate:   NewNotifyStatusUpdateEndpoint(s),
		Subscribe:            NewSubscribeEndpoint(s),
		Unsubscribe:          NewUnsubscribeEndpoint(s),
	}
}

// Use applies the given middleware to all the "mcp_assistant" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Initialize = m(e.Initialize)
	e.Ping = m(e.Ping)
	e.ToolsList = m(e.ToolsList)
	e.ToolsCall = m(e.ToolsCall)
	e.ResourcesList = m(e.ResourcesList)
	e.ResourcesRead = m(e.ResourcesRead)
	e.ResourcesSubscribe = m(e.ResourcesSubscribe)
	e.ResourcesUnsubscribe = m(e.ResourcesUnsubscribe)
	e.PromptsList = m(e.PromptsList)
	e.PromptsGet = m(e.PromptsGet)
	e.NotifyStatusUpdate = m(e.NotifyStatusUpdate)
	e.Subscribe = m(e.Subscribe)
	e.Unsubscribe = m(e.Unsubscribe)
}

// NewInitializeEndpoint returns an endpoint function that calls the method
// "initialize" of service "mcp_assistant".
func NewInitializeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*InitializePayload)
		return s.Initialize(ctx, p)
	}
}

// NewPingEndpoint returns an endpoint function that calls the method "ping" of
// service "mcp_assistant".
func NewPingEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Ping(ctx)
	}
}

// NewToolsListEndpoint returns an endpoint function that calls the method
// "tools/list" of service "mcp_assistant".
func NewToolsListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ToolsListPayload)
		return s.ToolsList(ctx, p)
	}
}

// NewToolsCallEndpoint returns an endpoint function that calls the method
// "tools/call" of service "mcp_assistant".
func NewToolsCallEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ToolsCallPayload)
		return s.ToolsCall(ctx, p)
	}
}

// NewResourcesListEndpoint returns an endpoint function that calls the method
// "resources/list" of service "mcp_assistant".
func NewResourcesListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ResourcesListPayload)
		return s.ResourcesList(ctx, p)
	}
}

// NewResourcesReadEndpoint returns an endpoint function that calls the method
// "resources/read" of service "mcp_assistant".
func NewResourcesReadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ResourcesReadPayload)
		return s.ResourcesRead(ctx, p)
	}
}

// NewResourcesSubscribeEndpoint returns an endpoint function that calls the
// method "resources/subscribe" of service "mcp_assistant".
func NewResourcesSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ResourcesSubscribePayload)
		return nil, s.ResourcesSubscribe(ctx, p)
	}
}

// NewResourcesUnsubscribeEndpoint returns an endpoint function that calls the
// method "resources/unsubscribe" of service "mcp_assistant".
func NewResourcesUnsubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ResourcesUnsubscribePayload)
		return nil, s.ResourcesUnsubscribe(ctx, p)
	}
}

// NewPromptsListEndpoint returns an endpoint function that calls the method
// "prompts/list" of service "mcp_assistant".
func NewPromptsListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*PromptsListPayload)
		return s.PromptsList(ctx, p)
	}
}

// NewPromptsGetEndpoint returns an endpoint function that calls the method
// "prompts/get" of service "mcp_assistant".
func NewPromptsGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*PromptsGetPayload)
		return s.PromptsGet(ctx, p)
	}
}

// NewNotifyStatusUpdateEndpoint returns an endpoint function that calls the
// method "notify_status_update" of service "mcp_assistant".
func NewNotifyStatusUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*NotifyStatusUpdatePayload)
		return nil, s.NotifyStatusUpdate(ctx, p)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "subscribe" of service "mcp_assistant".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SubscribePayload)
		return s.Subscribe(ctx, p)
	}
}

// NewUnsubscribeEndpoint returns an endpoint function that calls the method
// "unsubscribe" of service "mcp_assistant".
func NewUnsubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UnsubscribePayload)
		return s.Unsubscribe(ctx, p)
	}
}
