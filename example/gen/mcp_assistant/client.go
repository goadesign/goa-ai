// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant client
//
// Command:
// $ goa gen example.com/assistant/design

package mcpassistant

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "mcp_assistant" service client.
type Client struct {
	InitializeEndpoint           goa.Endpoint
	PingEndpoint                 goa.Endpoint
	ToolsListEndpoint            goa.Endpoint
	ToolsCallEndpoint            goa.Endpoint
	ResourcesListEndpoint        goa.Endpoint
	ResourcesReadEndpoint        goa.Endpoint
	ResourcesSubscribeEndpoint   goa.Endpoint
	ResourcesUnsubscribeEndpoint goa.Endpoint
	PromptsListEndpoint          goa.Endpoint
	PromptsGetEndpoint           goa.Endpoint
	NotifyStatusUpdateEndpoint   goa.Endpoint
	SubscribeEndpoint            goa.Endpoint
	UnsubscribeEndpoint          goa.Endpoint
}

// NewClient initializes a "mcp_assistant" service client given the endpoints.
func NewClient(initialize, ping, toolsList, toolsCall, resourcesList, resourcesRead, resourcesSubscribe, resourcesUnsubscribe, promptsList, promptsGet, notifyStatusUpdate, subscribe, unsubscribe goa.Endpoint) *Client {
	return &Client{
		InitializeEndpoint:           initialize,
		PingEndpoint:                 ping,
		ToolsListEndpoint:            toolsList,
		ToolsCallEndpoint:            toolsCall,
		ResourcesListEndpoint:        resourcesList,
		ResourcesReadEndpoint:        resourcesRead,
		ResourcesSubscribeEndpoint:   resourcesSubscribe,
		ResourcesUnsubscribeEndpoint: resourcesUnsubscribe,
		PromptsListEndpoint:          promptsList,
		PromptsGetEndpoint:           promptsGet,
		NotifyStatusUpdateEndpoint:   notifyStatusUpdate,
		SubscribeEndpoint:            subscribe,
		UnsubscribeEndpoint:          unsubscribe,
	}
}

// Initialize calls the "initialize" endpoint of the "mcp_assistant" service.
func (c *Client) Initialize(ctx context.Context, p *InitializePayload) (res *InitializeResult, err error) {
	var ires any
	ires, err = c.InitializeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*InitializeResult), nil
}

// Ping calls the "ping" endpoint of the "mcp_assistant" service.
func (c *Client) Ping(ctx context.Context) (res *PingResult, err error) {
	var ires any
	ires, err = c.PingEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*PingResult), nil
}

// ToolsList calls the "tools/list" endpoint of the "mcp_assistant" service.
func (c *Client) ToolsList(ctx context.Context, p *ToolsListPayload) (res *ToolsListResult, err error) {
	var ires any
	ires, err = c.ToolsListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ToolsListResult), nil
}

// ToolsCall calls the "tools/call" endpoint of the "mcp_assistant" service.
func (c *Client) ToolsCall(ctx context.Context, p *ToolsCallPayload) (res *ToolsCallResult, err error) {
	var ires any
	ires, err = c.ToolsCallEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ToolsCallResult), nil
}

// ResourcesList calls the "resources/list" endpoint of the "mcp_assistant"
// service.
func (c *Client) ResourcesList(ctx context.Context, p *ResourcesListPayload) (res *ResourcesListResult, err error) {
	var ires any
	ires, err = c.ResourcesListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ResourcesListResult), nil
}

// ResourcesRead calls the "resources/read" endpoint of the "mcp_assistant"
// service.
func (c *Client) ResourcesRead(ctx context.Context, p *ResourcesReadPayload) (res *ResourcesReadResult, err error) {
	var ires any
	ires, err = c.ResourcesReadEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ResourcesReadResult), nil
}

// ResourcesSubscribe calls the "resources/subscribe" endpoint of the
// "mcp_assistant" service.
func (c *Client) ResourcesSubscribe(ctx context.Context, p *ResourcesSubscribePayload) (err error) {
	_, err = c.ResourcesSubscribeEndpoint(ctx, p)
	return
}

// ResourcesUnsubscribe calls the "resources/unsubscribe" endpoint of the
// "mcp_assistant" service.
func (c *Client) ResourcesUnsubscribe(ctx context.Context, p *ResourcesUnsubscribePayload) (err error) {
	_, err = c.ResourcesUnsubscribeEndpoint(ctx, p)
	return
}

// PromptsList calls the "prompts/list" endpoint of the "mcp_assistant" service.
func (c *Client) PromptsList(ctx context.Context, p *PromptsListPayload) (res *PromptsListResult, err error) {
	var ires any
	ires, err = c.PromptsListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PromptsListResult), nil
}

// PromptsGet calls the "prompts/get" endpoint of the "mcp_assistant" service.
func (c *Client) PromptsGet(ctx context.Context, p *PromptsGetPayload) (res *PromptsGetResult, err error) {
	var ires any
	ires, err = c.PromptsGetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PromptsGetResult), nil
}

// NotifyStatusUpdate calls the "notify_status_update" endpoint of the
// "mcp_assistant" service.
func (c *Client) NotifyStatusUpdate(ctx context.Context, p *NotifyStatusUpdatePayload) (err error) {
	_, err = c.NotifyStatusUpdateEndpoint(ctx, p)
	return
}

// Subscribe calls the "subscribe" endpoint of the "mcp_assistant" service.
func (c *Client) Subscribe(ctx context.Context, p *SubscribePayload) (res *SubscribeResult, err error) {
	var ires any
	ires, err = c.SubscribeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SubscribeResult), nil
}

// Unsubscribe calls the "unsubscribe" endpoint of the "mcp_assistant" service.
func (c *Client) Unsubscribe(ctx context.Context, p *UnsubscribePayload) (res *UnsubscribeResult, err error) {
	var ires any
	ires, err = c.UnsubscribeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UnsubscribeResult), nil
}
