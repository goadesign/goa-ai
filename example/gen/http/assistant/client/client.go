// Code generated by goa v3.21.5, DO NOT EDIT.
//
// assistant client HTTP transport
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the assistant service endpoint HTTP clients.
type Client struct {
	// AnalyzeText Doer is the HTTP client used to make requests to the
	// analyze_text endpoint.
	AnalyzeTextDoer goahttp.Doer

	// SearchKnowledge Doer is the HTTP client used to make requests to the
	// search_knowledge endpoint.
	SearchKnowledgeDoer goahttp.Doer

	// ExecuteCode Doer is the HTTP client used to make requests to the
	// execute_code endpoint.
	ExecuteCodeDoer goahttp.Doer

	// ListDocuments Doer is the HTTP client used to make requests to the
	// list_documents endpoint.
	ListDocumentsDoer goahttp.Doer

	// GetSystemInfo Doer is the HTTP client used to make requests to the
	// get_system_info endpoint.
	GetSystemInfoDoer goahttp.Doer

	// GetConversationHistory Doer is the HTTP client used to make requests to the
	// get_conversation_history endpoint.
	GetConversationHistoryDoer goahttp.Doer

	// GeneratePrompts Doer is the HTTP client used to make requests to the
	// generate_prompts endpoint.
	GeneratePromptsDoer goahttp.Doer

	// RequestCompletion Doer is the HTTP client used to make requests to the
	// request_completion endpoint.
	RequestCompletionDoer goahttp.Doer

	// GetWorkspaceInfo Doer is the HTTP client used to make requests to the
	// get_workspace_info endpoint.
	GetWorkspaceInfoDoer goahttp.Doer

	// SendNotification Doer is the HTTP client used to make requests to the
	// send_notification endpoint.
	SendNotificationDoer goahttp.Doer

	// SubscribeToUpdates Doer is the HTTP client used to make requests to the
	// subscribe_to_updates endpoint.
	SubscribeToUpdatesDoer goahttp.Doer

	// ProcessBatch Doer is the HTTP client used to make requests to the
	// process_batch endpoint.
	ProcessBatchDoer goahttp.Doer

	// MonitorResourceChanges Doer is the HTTP client used to make requests to the
	// monitor_resource_changes endpoint.
	MonitorResourceChangesDoer goahttp.Doer

	// StreamLogs Doer is the HTTP client used to make requests to the stream_logs
	// endpoint.
	StreamLogsDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the assistant service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AnalyzeTextDoer:            doer,
		SearchKnowledgeDoer:        doer,
		ExecuteCodeDoer:            doer,
		ListDocumentsDoer:          doer,
		GetSystemInfoDoer:          doer,
		GetConversationHistoryDoer: doer,
		GeneratePromptsDoer:        doer,
		RequestCompletionDoer:      doer,
		GetWorkspaceInfoDoer:       doer,
		SendNotificationDoer:       doer,
		SubscribeToUpdatesDoer:     doer,
		ProcessBatchDoer:           doer,
		MonitorResourceChangesDoer: doer,
		StreamLogsDoer:             doer,
		RestoreResponseBody:        restoreBody,
		scheme:                     scheme,
		host:                       host,
		decoder:                    dec,
		encoder:                    enc,
	}
}

// AnalyzeText returns an endpoint that makes HTTP requests to the assistant
// service analyze_text server.
func (c *Client) AnalyzeText() goa.Endpoint {
	var (
		encodeRequest  = EncodeAnalyzeTextRequest(c.encoder)
		decodeResponse = DecodeAnalyzeTextResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAnalyzeTextRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AnalyzeTextDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "analyze_text", err)
		}
		return decodeResponse(resp)
	}
}

// SearchKnowledge returns an endpoint that makes HTTP requests to the
// assistant service search_knowledge server.
func (c *Client) SearchKnowledge() goa.Endpoint {
	var (
		encodeRequest  = EncodeSearchKnowledgeRequest(c.encoder)
		decodeResponse = DecodeSearchKnowledgeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSearchKnowledgeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SearchKnowledgeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "search_knowledge", err)
		}
		return decodeResponse(resp)
	}
}

// ExecuteCode returns an endpoint that makes HTTP requests to the assistant
// service execute_code server.
func (c *Client) ExecuteCode() goa.Endpoint {
	var (
		encodeRequest  = EncodeExecuteCodeRequest(c.encoder)
		decodeResponse = DecodeExecuteCodeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildExecuteCodeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ExecuteCodeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "execute_code", err)
		}
		return decodeResponse(resp)
	}
}

// ListDocuments returns an endpoint that makes HTTP requests to the assistant
// service list_documents server.
func (c *Client) ListDocuments() goa.Endpoint {
	var (
		decodeResponse = DecodeListDocumentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListDocumentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDocumentsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "list_documents", err)
		}
		return decodeResponse(resp)
	}
}

// GetSystemInfo returns an endpoint that makes HTTP requests to the assistant
// service get_system_info server.
func (c *Client) GetSystemInfo() goa.Endpoint {
	var (
		decodeResponse = DecodeGetSystemInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSystemInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSystemInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "get_system_info", err)
		}
		return decodeResponse(resp)
	}
}

// GetConversationHistory returns an endpoint that makes HTTP requests to the
// assistant service get_conversation_history server.
func (c *Client) GetConversationHistory() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetConversationHistoryRequest(c.encoder)
		decodeResponse = DecodeGetConversationHistoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetConversationHistoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetConversationHistoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "get_conversation_history", err)
		}
		return decodeResponse(resp)
	}
}

// GeneratePrompts returns an endpoint that makes HTTP requests to the
// assistant service generate_prompts server.
func (c *Client) GeneratePrompts() goa.Endpoint {
	var (
		encodeRequest  = EncodeGeneratePromptsRequest(c.encoder)
		decodeResponse = DecodeGeneratePromptsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGeneratePromptsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GeneratePromptsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "generate_prompts", err)
		}
		return decodeResponse(resp)
	}
}

// RequestCompletion returns an endpoint that makes HTTP requests to the
// assistant service request_completion server.
func (c *Client) RequestCompletion() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestCompletionRequest(c.encoder)
		decodeResponse = DecodeRequestCompletionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRequestCompletionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RequestCompletionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "request_completion", err)
		}
		return decodeResponse(resp)
	}
}

// GetWorkspaceInfo returns an endpoint that makes HTTP requests to the
// assistant service get_workspace_info server.
func (c *Client) GetWorkspaceInfo() goa.Endpoint {
	var (
		decodeResponse = DecodeGetWorkspaceInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetWorkspaceInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetWorkspaceInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "get_workspace_info", err)
		}
		return decodeResponse(resp)
	}
}

// SendNotification returns an endpoint that makes HTTP requests to the
// assistant service send_notification server.
func (c *Client) SendNotification() goa.Endpoint {
	var (
		encodeRequest  = EncodeSendNotificationRequest(c.encoder)
		decodeResponse = DecodeSendNotificationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSendNotificationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendNotificationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "send_notification", err)
		}
		return decodeResponse(resp)
	}
}

// SubscribeToUpdates returns an endpoint that makes HTTP requests to the
// assistant service subscribe_to_updates server.
func (c *Client) SubscribeToUpdates() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubscribeToUpdatesRequest(c.encoder)
		decodeResponse = DecodeSubscribeToUpdatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubscribeToUpdatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubscribeToUpdatesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "subscribe_to_updates", err)
		}
		return decodeResponse(resp)
	}
}

// ProcessBatch returns an endpoint that makes HTTP requests to the assistant
// service process_batch server.
func (c *Client) ProcessBatch() goa.Endpoint {
	var (
		encodeRequest  = EncodeProcessBatchRequest(c.encoder)
		decodeResponse = DecodeProcessBatchResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildProcessBatchRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ProcessBatchDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "process_batch", err)
		}
		return decodeResponse(resp)
	}
}

// MonitorResourceChanges returns an endpoint that makes HTTP requests to the
// assistant service monitor_resource_changes server.
func (c *Client) MonitorResourceChanges() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorResourceChangesRequest(c.encoder)
		decodeResponse = DecodeMonitorResourceChangesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorResourceChangesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MonitorResourceChangesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "monitor_resource_changes", err)
		}
		return decodeResponse(resp)
	}
}

// StreamLogs returns an endpoint that makes HTTP requests to the assistant
// service stream_logs server.
func (c *Client) StreamLogs() goa.Endpoint {
	var (
		encodeRequest  = EncodeStreamLogsRequest(c.encoder)
		decodeResponse = DecodeStreamLogsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildStreamLogsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StreamLogsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "stream_logs", err)
		}
		return decodeResponse(resp)
	}
}
