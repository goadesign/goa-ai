// Code generated by goa v3.22.2, DO NOT EDIT.
//
// sse
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"sync"

	assistant "example.com/assistant/gen/assistant"
)

// ProcessBatchServerStream implements the assistant.ProcessBatchServerStream
// interface using Server-Sent Events.
type ProcessBatchServerStream struct {
	// once ensures the headers are written once.
	once sync.Once
	// w is the HTTP response writer used to send the SSE events.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
}

// Send Send streams instances of "BatchResult" to the "process_batch" endpoint
// SSE connection.
func (s *ProcessBatchServerStream) Send(v *assistant.BatchResult) error {
	return s.Send(context.Background(), v)
}

// Send Send streams instances of "BatchResult" to the "process_batch" endpoint
// SSE connection with context.
func (s *ProcessBatchServerStream) Send(ctx context.Context, v *assistant.BatchResult) error {
	s.once.Do(func() {
		header := s.w.Header()
		if header.Get("Content-Type") == "" {
			header.Set("Content-Type", "text/event-stream")
		}
		if header.Get("Cache-Control") == "" {
			header.Set("Cache-Control", "no-cache")
		}
		if header.Get("Connection") == "" {
			header.Set("Connection", "keep-alive")
		}
		s.w.WriteHeader(http.StatusOK)
	})
	res := v

	var data string
	byts, err := json.Marshal(res)
	if err != nil {
		return err
	}
	data = string(byts)
	fmt.Fprintf(s.w, "data: %s\n\n", data)

	http.NewResponseController(s.w).Flush()
	return nil
}

// Close is a no-op for SSE. We keep the method for compatibility with other
// stream types.
func (s *ProcessBatchServerStream) Close() error {
	return nil
}
