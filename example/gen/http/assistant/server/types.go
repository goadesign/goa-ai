// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant HTTP server types
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	assistant "example.com/assistant/gen/assistant"
	goa "goa.design/goa/v3/pkg"
)

// AnalyzeTextRequestBody is the type of the "assistant" service "analyze_text"
// endpoint HTTP request body.
type AnalyzeTextRequestBody struct {
	// Text to analyze
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Analysis mode
	Mode *string `form:"mode,omitempty" json:"mode,omitempty" xml:"mode,omitempty"`
}

// SearchKnowledgeRequestBody is the type of the "assistant" service
// "search_knowledge" endpoint HTTP request body.
type SearchKnowledgeRequestBody struct {
	// Search query
	Query *string `form:"query,omitempty" json:"query,omitempty" xml:"query,omitempty"`
	// Maximum results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// ExecuteCodeRequestBody is the type of the "assistant" service "execute_code"
// endpoint HTTP request body.
type ExecuteCodeRequestBody struct {
	// Programming language
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Code to execute
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// GetConversationHistoryRequestBody is the type of the "assistant" service
// "get_conversation_history" endpoint HTTP request body.
type GetConversationHistoryRequestBody struct {
	// Number of messages
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// GeneratePromptsRequestBody is the type of the "assistant" service
// "generate_prompts" endpoint HTTP request body.
type GeneratePromptsRequestBody struct {
	// Current context
	Context *string `form:"context,omitempty" json:"context,omitempty" xml:"context,omitempty"`
	// Task type
	Task *string `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// SendNotificationRequestBody is the type of the "assistant" service
// "send_notification" endpoint HTTP request body.
type SendNotificationRequestBody struct {
	// Notification type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Notification message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// SubscribeToUpdatesRequestBody is the type of the "assistant" service
// "subscribe_to_updates" endpoint HTTP request body.
type SubscribeToUpdatesRequestBody struct {
	// Resource to monitor
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Optional filter
	Filter *string `form:"filter,omitempty" json:"filter,omitempty" xml:"filter,omitempty"`
}

// ProcessBatchRequestBody is the type of the "assistant" service
// "process_batch" endpoint HTTP request body.
type ProcessBatchRequestBody struct {
	// Items to process
	Items []string `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Output format
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Blob data when format=blob
	Blob []byte `form:"blob,omitempty" json:"blob,omitempty" xml:"blob,omitempty"`
	// URI to include when format=uri
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
	// Mime type for blob/uri
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
}

// AnalyzeTextResponseBody is the type of the "assistant" service
// "analyze_text" endpoint HTTP response body.
type AnalyzeTextResponseBody struct {
	// Analysis mode used
	Mode string `form:"mode" json:"mode" xml:"mode"`
	// Analysis result (varies by mode)
	Result any `form:"result" json:"result" xml:"result"`
	// Confidence score
	Confidence *float64 `form:"confidence,omitempty" json:"confidence,omitempty" xml:"confidence,omitempty"`
	// Additional metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// SearchKnowledgeResponseBody is the type of the "assistant" service
// "search_knowledge" endpoint HTTP response body.
type SearchKnowledgeResponseBody []*SearchResultResponse

// ExecuteCodeResponseBody is the type of the "assistant" service
// "execute_code" endpoint HTTP response body.
type ExecuteCodeResponseBody struct {
	// Execution output
	Output string `form:"output" json:"output" xml:"output"`
	// Error message if any
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Execution time in seconds
	ExecutionTime float64 `form:"execution_time" json:"execution_time" xml:"execution_time"`
}

// ListDocumentsResponseBody is the type of the "assistant" service
// "list_documents" endpoint HTTP response body.
type ListDocumentsResponseBody []*DocumentResponse

// GetSystemInfoResponseBody is the type of the "assistant" service
// "get_system_info" endpoint HTTP response body.
type GetSystemInfoResponseBody struct {
	// System version
	Version string `form:"version" json:"version" xml:"version"`
	// Uptime in seconds
	Uptime int64 `form:"uptime" json:"uptime" xml:"uptime"`
	// Memory usage percentage
	MemoryUsage float64 `form:"memory_usage" json:"memory_usage" xml:"memory_usage"`
	// CPU usage percentage
	CPUUsage float64 `form:"cpu_usage" json:"cpu_usage" xml:"cpu_usage"`
	// Number of active connections
	ActiveConnections int `form:"active_connections" json:"active_connections" xml:"active_connections"`
}

// GetConversationHistoryResponseBody is the type of the "assistant" service
// "get_conversation_history" endpoint HTTP response body.
type GetConversationHistoryResponseBody []*ChatMessageResponse

// GeneratePromptsResponseBody is the type of the "assistant" service
// "generate_prompts" endpoint HTTP response body.
type GeneratePromptsResponseBody []*PromptTemplateResponse

// GetWorkspaceInfoResponseBody is the type of the "assistant" service
// "get_workspace_info" endpoint HTTP response body.
type GetWorkspaceInfoResponseBody struct {
	Roots []*RootInfoResponseBody `form:"roots" json:"roots" xml:"roots"`
}

// SubscribeToUpdatesResponseBody is the type of the "assistant" service
// "subscribe_to_updates" endpoint HTTP response body.
type SubscribeToUpdatesResponseBody struct {
	// Subscription ID
	SubscriptionID string `form:"subscription_id" json:"subscription_id" xml:"subscription_id"`
	// Subscribed resource
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Subscription created
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// ProcessBatchResponseBody is the type of the "assistant" service
// "process_batch" endpoint HTTP response body.
type ProcessBatchResponseBody struct {
	// Number of items processed
	Processed int `form:"processed" json:"processed" xml:"processed"`
	// Number of items failed
	Failed int `form:"failed" json:"failed" xml:"failed"`
	// Processing results
	Results []any `form:"results" json:"results" xml:"results"`
}

// SearchResultResponse is used to define fields on response body types.
type SearchResultResponse struct {
	// Result ID
	ID string `form:"id" json:"id" xml:"id"`
	// Result title
	Title string `form:"title" json:"title" xml:"title"`
	// Result content
	Content string `form:"content" json:"content" xml:"content"`
	// Relevance score
	Score float64 `form:"score" json:"score" xml:"score"`
}

// DocumentResponse is used to define fields on response body types.
type DocumentResponse struct {
	// Document ID
	ID string `form:"id" json:"id" xml:"id"`
	// Document name
	Name string `form:"name" json:"name" xml:"name"`
	// Document type
	Type string `form:"type" json:"type" xml:"type"`
	// Size in bytes
	Size int64 `form:"size" json:"size" xml:"size"`
	// Last modified
	Modified string `form:"modified" json:"modified" xml:"modified"`
}

// ChatMessageResponse is used to define fields on response body types.
type ChatMessageResponse struct {
	// Message ID
	ID string `form:"id" json:"id" xml:"id"`
	// Message role
	Role string `form:"role" json:"role" xml:"role"`
	// Message content
	Content string `form:"content" json:"content" xml:"content"`
	// Message timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// PromptTemplateResponse is used to define fields on response body types.
type PromptTemplateResponse struct {
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Template description
	Description string `form:"description" json:"description" xml:"description"`
	// Required variables
	Variables []string `form:"variables,omitempty" json:"variables,omitempty" xml:"variables,omitempty"`
	// Template content
	Template string `form:"template" json:"template" xml:"template"`
}

// RootInfoResponseBody is used to define fields on response body types.
type RootInfoResponseBody struct {
	// Root URI
	URI string `form:"uri" json:"uri" xml:"uri"`
	// Root name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewAnalyzeTextResponseBody builds the HTTP response body from the result of
// the "analyze_text" endpoint of the "assistant" service.
func NewAnalyzeTextResponseBody(res *assistant.AnalysisResult) *AnalyzeTextResponseBody {
	body := &AnalyzeTextResponseBody{
		Mode:       res.Mode,
		Result:     res.Result,
		Confidence: res.Confidence,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewSearchKnowledgeResponseBody builds the HTTP response body from the result
// of the "search_knowledge" endpoint of the "assistant" service.
func NewSearchKnowledgeResponseBody(res assistant.SearchResults) SearchKnowledgeResponseBody {
	body := make([]*SearchResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalAssistantSearchResultToSearchResultResponse(val)
	}
	return body
}

// NewExecuteCodeResponseBody builds the HTTP response body from the result of
// the "execute_code" endpoint of the "assistant" service.
func NewExecuteCodeResponseBody(res *assistant.ExecutionResult) *ExecuteCodeResponseBody {
	body := &ExecuteCodeResponseBody{
		Output:        res.Output,
		Error:         res.Error,
		ExecutionTime: res.ExecutionTime,
	}
	return body
}

// NewListDocumentsResponseBody builds the HTTP response body from the result
// of the "list_documents" endpoint of the "assistant" service.
func NewListDocumentsResponseBody(res assistant.Documents) ListDocumentsResponseBody {
	body := make([]*DocumentResponse, len(res))
	for i, val := range res {
		body[i] = marshalAssistantDocumentToDocumentResponse(val)
	}
	return body
}

// NewGetSystemInfoResponseBody builds the HTTP response body from the result
// of the "get_system_info" endpoint of the "assistant" service.
func NewGetSystemInfoResponseBody(res *assistant.SystemInfo) *GetSystemInfoResponseBody {
	body := &GetSystemInfoResponseBody{
		Version:           res.Version,
		Uptime:            res.Uptime,
		MemoryUsage:       res.MemoryUsage,
		CPUUsage:          res.CPUUsage,
		ActiveConnections: res.ActiveConnections,
	}
	return body
}

// NewGetConversationHistoryResponseBody builds the HTTP response body from the
// result of the "get_conversation_history" endpoint of the "assistant" service.
func NewGetConversationHistoryResponseBody(res assistant.ChatMessages) GetConversationHistoryResponseBody {
	body := make([]*ChatMessageResponse, len(res))
	for i, val := range res {
		body[i] = marshalAssistantChatMessageToChatMessageResponse(val)
	}
	return body
}

// NewGeneratePromptsResponseBody builds the HTTP response body from the result
// of the "generate_prompts" endpoint of the "assistant" service.
func NewGeneratePromptsResponseBody(res assistant.PromptTemplates) GeneratePromptsResponseBody {
	body := make([]*PromptTemplateResponse, len(res))
	for i, val := range res {
		body[i] = marshalAssistantPromptTemplateToPromptTemplateResponse(val)
	}
	return body
}

// NewGetWorkspaceInfoResponseBody builds the HTTP response body from the
// result of the "get_workspace_info" endpoint of the "assistant" service.
func NewGetWorkspaceInfoResponseBody(res *assistant.GetWorkspaceInfoResult) *GetWorkspaceInfoResponseBody {
	body := &GetWorkspaceInfoResponseBody{}
	if res.Roots != nil {
		body.Roots = make([]*RootInfoResponseBody, len(res.Roots))
		for i, val := range res.Roots {
			body.Roots[i] = marshalAssistantRootInfoToRootInfoResponseBody(val)
		}
	} else {
		body.Roots = []*RootInfoResponseBody{}
	}
	return body
}

// NewSubscribeToUpdatesResponseBody builds the HTTP response body from the
// result of the "subscribe_to_updates" endpoint of the "assistant" service.
func NewSubscribeToUpdatesResponseBody(res *assistant.SubscriptionInfo) *SubscribeToUpdatesResponseBody {
	body := &SubscribeToUpdatesResponseBody{
		SubscriptionID: res.SubscriptionID,
		Resource:       res.Resource,
		CreatedAt:      res.CreatedAt,
	}
	return body
}

// NewProcessBatchResponseBody builds the HTTP response body from the result of
// the "process_batch" endpoint of the "assistant" service.
func NewProcessBatchResponseBody(res *assistant.BatchResult) *ProcessBatchResponseBody {
	body := &ProcessBatchResponseBody{
		Processed: res.Processed,
		Failed:    res.Failed,
	}
	if res.Results != nil {
		body.Results = make([]any, len(res.Results))
		for i, val := range res.Results {
			body.Results[i] = val
		}
	} else {
		body.Results = []any{}
	}
	return body
}

// NewAnalyzeTextPayload builds a assistant service analyze_text endpoint
// payload.
func NewAnalyzeTextPayload(body *AnalyzeTextRequestBody) *assistant.AnalyzeTextPayload {
	v := &assistant.AnalyzeTextPayload{
		Text: *body.Text,
		Mode: *body.Mode,
	}

	return v
}

// NewSearchKnowledgePayload builds a assistant service search_knowledge
// endpoint payload.
func NewSearchKnowledgePayload(body *SearchKnowledgeRequestBody) *assistant.SearchKnowledgePayload {
	v := &assistant.SearchKnowledgePayload{
		Query: *body.Query,
	}
	if body.Limit != nil {
		v.Limit = *body.Limit
	}
	if body.Limit == nil {
		v.Limit = 10
	}

	return v
}

// NewExecuteCodePayload builds a assistant service execute_code endpoint
// payload.
func NewExecuteCodePayload(body *ExecuteCodeRequestBody) *assistant.ExecuteCodePayload {
	v := &assistant.ExecuteCodePayload{
		Language: *body.Language,
		Code:     *body.Code,
	}

	return v
}

// NewGetConversationHistoryPayload builds a assistant service
// get_conversation_history endpoint payload.
func NewGetConversationHistoryPayload(body *GetConversationHistoryRequestBody) *assistant.GetConversationHistoryPayload {
	v := &assistant.GetConversationHistoryPayload{}
	if body.Limit != nil {
		v.Limit = *body.Limit
	}
	if body.Limit == nil {
		v.Limit = 50
	}

	return v
}

// NewGeneratePromptsPayload builds a assistant service generate_prompts
// endpoint payload.
func NewGeneratePromptsPayload(body *GeneratePromptsRequestBody) *assistant.GeneratePromptsPayload {
	v := &assistant.GeneratePromptsPayload{
		Context: *body.Context,
		Task:    *body.Task,
	}

	return v
}

// NewSendNotificationPayload builds a assistant service send_notification
// endpoint payload.
func NewSendNotificationPayload(body *SendNotificationRequestBody) *assistant.SendNotificationPayload {
	v := &assistant.SendNotificationPayload{
		Type:    *body.Type,
		Message: *body.Message,
		Data:    body.Data,
	}

	return v
}

// NewSubscribeToUpdatesPayload builds a assistant service subscribe_to_updates
// endpoint payload.
func NewSubscribeToUpdatesPayload(body *SubscribeToUpdatesRequestBody) *assistant.SubscribeToUpdatesPayload {
	v := &assistant.SubscribeToUpdatesPayload{
		Resource: *body.Resource,
		Filter:   body.Filter,
	}

	return v
}

// NewProcessBatchPayload builds a assistant service process_batch endpoint
// payload.
func NewProcessBatchPayload(body *ProcessBatchRequestBody) *assistant.ProcessBatchPayload {
	v := &assistant.ProcessBatchPayload{
		Format:   body.Format,
		Blob:     body.Blob,
		URI:      body.URI,
		MimeType: body.MimeType,
	}
	v.Items = make([]string, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = val
	}

	return v
}

// ValidateAnalyzeTextRequestBody runs the validations defined on
// analyze_text_request_body
func ValidateAnalyzeTextRequestBody(body *AnalyzeTextRequestBody) (err error) {
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	if body.Mode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mode", "body"))
	}
	if body.Mode != nil {
		if !(*body.Mode == "sentiment" || *body.Mode == "keywords" || *body.Mode == "summary") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mode", *body.Mode, []any{"sentiment", "keywords", "summary"}))
		}
	}
	return
}

// ValidateSearchKnowledgeRequestBody runs the validations defined on
// search_knowledge_request_body
func ValidateSearchKnowledgeRequestBody(body *SearchKnowledgeRequestBody) (err error) {
	if body.Query == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("query", "body"))
	}
	return
}

// ValidateExecuteCodeRequestBody runs the validations defined on
// execute_code_request_body
func ValidateExecuteCodeRequestBody(body *ExecuteCodeRequestBody) (err error) {
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	return
}

// ValidateGeneratePromptsRequestBody runs the validations defined on
// generate_prompts_request_body
func ValidateGeneratePromptsRequestBody(body *GeneratePromptsRequestBody) (err error) {
	if body.Context == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("context", "body"))
	}
	if body.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
	}
	return
}

// ValidateSendNotificationRequestBody runs the validations defined on
// send_notification_request_body
func ValidateSendNotificationRequestBody(body *SendNotificationRequestBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "info" || *body.Type == "warning" || *body.Type == "error" || *body.Type == "success") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"info", "warning", "error", "success"}))
		}
	}
	return
}

// ValidateSubscribeToUpdatesRequestBody runs the validations defined on
// subscribe_to_updates_request_body
func ValidateSubscribeToUpdatesRequestBody(body *SubscribeToUpdatesRequestBody) (err error) {
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	return
}

// ValidateProcessBatchRequestBody runs the validations defined on
// process_batch_request_body
func ValidateProcessBatchRequestBody(body *ProcessBatchRequestBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.Format != nil {
		if !(*body.Format == "text" || *body.Format == "blob" || *body.Format == "uri") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.format", *body.Format, []any{"text", "blob", "uri"}))
		}
	}
	return
}
