// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant HTTP server encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	assistant "example.com/assistant/gen/assistant"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAnalyzeTextResponse returns an encoder for responses returned by the
// assistant analyze_text endpoint.
func EncodeAnalyzeTextResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assistant.AnalysisResult)
		enc := encoder(ctx, w)
		body := NewAnalyzeTextResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAnalyzeTextRequest returns a decoder for requests sent to the
// assistant analyze_text endpoint.
func DecodeAnalyzeTextRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.AnalyzeTextPayload, error) {
	return func(r *http.Request) (*assistant.AnalyzeTextPayload, error) {
		var (
			body AnalyzeTextRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAnalyzeTextRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAnalyzeTextPayload(&body)

		return payload, nil
	}
}

// EncodeSearchKnowledgeResponse returns an encoder for responses returned by
// the assistant search_knowledge endpoint.
func EncodeSearchKnowledgeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(assistant.SearchResults)
		enc := encoder(ctx, w)
		body := NewSearchKnowledgeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSearchKnowledgeRequest returns a decoder for requests sent to the
// assistant search_knowledge endpoint.
func DecodeSearchKnowledgeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.SearchKnowledgePayload, error) {
	return func(r *http.Request) (*assistant.SearchKnowledgePayload, error) {
		var (
			body SearchKnowledgeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSearchKnowledgeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSearchKnowledgePayload(&body)

		return payload, nil
	}
}

// EncodeExecuteCodeResponse returns an encoder for responses returned by the
// assistant execute_code endpoint.
func EncodeExecuteCodeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assistant.ExecutionResult)
		enc := encoder(ctx, w)
		body := NewExecuteCodeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeExecuteCodeRequest returns a decoder for requests sent to the
// assistant execute_code endpoint.
func DecodeExecuteCodeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.ExecuteCodePayload, error) {
	return func(r *http.Request) (*assistant.ExecuteCodePayload, error) {
		var (
			body ExecuteCodeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateExecuteCodeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewExecuteCodePayload(&body)

		return payload, nil
	}
}

// EncodeListDocumentsResponse returns an encoder for responses returned by the
// assistant list_documents endpoint.
func EncodeListDocumentsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(assistant.Documents)
		enc := encoder(ctx, w)
		body := NewListDocumentsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetSystemInfoResponse returns an encoder for responses returned by the
// assistant get_system_info endpoint.
func EncodeGetSystemInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assistant.SystemInfo)
		enc := encoder(ctx, w)
		body := NewGetSystemInfoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetConversationHistoryResponse returns an encoder for responses
// returned by the assistant get_conversation_history endpoint.
func EncodeGetConversationHistoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(assistant.ChatMessages)
		enc := encoder(ctx, w)
		body := NewGetConversationHistoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetConversationHistoryRequest returns a decoder for requests sent to
// the assistant get_conversation_history endpoint.
func DecodeGetConversationHistoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.GetConversationHistoryPayload, error) {
	return func(r *http.Request) (*assistant.GetConversationHistoryPayload, error) {
		var (
			body GetConversationHistoryRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewGetConversationHistoryPayload(&body)

		return payload, nil
	}
}

// EncodeGeneratePromptsResponse returns an encoder for responses returned by
// the assistant generate_prompts endpoint.
func EncodeGeneratePromptsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(assistant.PromptTemplates)
		enc := encoder(ctx, w)
		body := NewGeneratePromptsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGeneratePromptsRequest returns a decoder for requests sent to the
// assistant generate_prompts endpoint.
func DecodeGeneratePromptsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.GeneratePromptsPayload, error) {
	return func(r *http.Request) (*assistant.GeneratePromptsPayload, error) {
		var (
			body GeneratePromptsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGeneratePromptsRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewGeneratePromptsPayload(&body)

		return payload, nil
	}
}

// EncodeGetWorkspaceInfoResponse returns an encoder for responses returned by
// the assistant get_workspace_info endpoint.
func EncodeGetWorkspaceInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assistant.GetWorkspaceInfoResult)
		enc := encoder(ctx, w)
		body := NewGetWorkspaceInfoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeSendNotificationResponse returns an encoder for responses returned by
// the assistant send_notification endpoint.
func EncodeSendNotificationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeSendNotificationRequest returns a decoder for requests sent to the
// assistant send_notification endpoint.
func DecodeSendNotificationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.SendNotificationPayload, error) {
	return func(r *http.Request) (*assistant.SendNotificationPayload, error) {
		var (
			body SendNotificationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendNotificationRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendNotificationPayload(&body)

		return payload, nil
	}
}

// EncodeSubscribeToUpdatesResponse returns an encoder for responses returned
// by the assistant subscribe_to_updates endpoint.
func EncodeSubscribeToUpdatesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assistant.SubscriptionInfo)
		enc := encoder(ctx, w)
		body := NewSubscribeToUpdatesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSubscribeToUpdatesRequest returns a decoder for requests sent to the
// assistant subscribe_to_updates endpoint.
func DecodeSubscribeToUpdatesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.SubscribeToUpdatesPayload, error) {
	return func(r *http.Request) (*assistant.SubscribeToUpdatesPayload, error) {
		var (
			body SubscribeToUpdatesRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSubscribeToUpdatesRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSubscribeToUpdatesPayload(&body)

		return payload, nil
	}
}

// EncodeProcessBatchResponse returns an encoder for responses returned by the
// assistant process_batch endpoint.
func EncodeProcessBatchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assistant.BatchResult)
		enc := encoder(ctx, w)
		body := NewProcessBatchResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeProcessBatchRequest returns a decoder for requests sent to the
// assistant process_batch endpoint.
func DecodeProcessBatchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*assistant.ProcessBatchPayload, error) {
	return func(r *http.Request) (*assistant.ProcessBatchPayload, error) {
		var (
			body ProcessBatchRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateProcessBatchRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewProcessBatchPayload(&body)

		return payload, nil
	}
}

// marshalAssistantSearchResultToSearchResultResponse builds a value of type
// *SearchResultResponse from a value of type *assistant.SearchResult.
func marshalAssistantSearchResultToSearchResultResponse(v *assistant.SearchResult) *SearchResultResponse {
	res := &SearchResultResponse{
		ID:      v.ID,
		Title:   v.Title,
		Content: v.Content,
		Score:   v.Score,
	}

	return res
}

// marshalAssistantDocumentToDocumentResponse builds a value of type
// *DocumentResponse from a value of type *assistant.Document.
func marshalAssistantDocumentToDocumentResponse(v *assistant.Document) *DocumentResponse {
	res := &DocumentResponse{
		ID:       v.ID,
		Name:     v.Name,
		Type:     v.Type,
		Size:     v.Size,
		Modified: v.Modified,
	}

	return res
}

// marshalAssistantChatMessageToChatMessageResponse builds a value of type
// *ChatMessageResponse from a value of type *assistant.ChatMessage.
func marshalAssistantChatMessageToChatMessageResponse(v *assistant.ChatMessage) *ChatMessageResponse {
	res := &ChatMessageResponse{
		ID:        v.ID,
		Role:      v.Role,
		Content:   v.Content,
		Timestamp: v.Timestamp,
	}

	return res
}

// marshalAssistantPromptTemplateToPromptTemplateResponse builds a value of
// type *PromptTemplateResponse from a value of type *assistant.PromptTemplate.
func marshalAssistantPromptTemplateToPromptTemplateResponse(v *assistant.PromptTemplate) *PromptTemplateResponse {
	res := &PromptTemplateResponse{
		Name:        v.Name,
		Description: v.Description,
		Template:    v.Template,
	}
	if v.Variables != nil {
		res.Variables = make([]string, len(v.Variables))
		for i, val := range v.Variables {
			res.Variables[i] = val
		}
	}

	return res
}

// marshalAssistantRootInfoToRootInfoResponseBody builds a value of type
// *RootInfoResponseBody from a value of type *assistant.RootInfo.
func marshalAssistantRootInfoToRootInfoResponseBody(v *assistant.RootInfo) *RootInfoResponseBody {
	res := &RootInfoResponseBody{
		URI:  v.URI,
		Name: v.Name,
	}

	return res
}
