// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming HTTP client CLI support package
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"fmt"
	"strconv"

	streaming "example.com/assistant/gen/streaming"
	goa "goa.design/goa/v3/pkg"
)

// BuildStreamEventsPayload builds the payload for the streaming stream_events
// endpoint from CLI flags.
func BuildStreamEventsPayload(streamingStreamEventsCategory string, streamingStreamEventsFilter string) (*streaming.StreamEventsPayload, error) {
	var err error
	var category string
	{
		category = streamingStreamEventsCategory
		if !(category == "system" || category == "user" || category == "application") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("category", category, []any{"system", "user", "application"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var filter *string
	{
		if streamingStreamEventsFilter != "" {
			filter = &streamingStreamEventsFilter
		}
	}
	v := &streaming.StreamEventsPayload{}
	v.Category = category
	v.Filter = filter

	return v, nil
}

// BuildStreamLogsPayload builds the payload for the streaming stream_logs
// endpoint from CLI flags.
func BuildStreamLogsPayload(streamingStreamLogsLevel string) (*streaming.StreamLogsPayload, error) {
	var err error
	var level string
	{
		if streamingStreamLogsLevel != "" {
			level = streamingStreamLogsLevel
			if !(level == "debug" || level == "info" || level == "warning" || level == "error") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("level", level, []any{"debug", "info", "warning", "error"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &streaming.StreamLogsPayload{}
	v.Level = level

	return v, nil
}

// BuildMonitorResourceChangesPayload builds the payload for the streaming
// monitor_resource_changes endpoint from CLI flags.
func BuildMonitorResourceChangesPayload(streamingMonitorResourceChangesResourceType string, streamingMonitorResourceChangesFilter string) (*streaming.MonitorResourceChangesPayload, error) {
	var resourceType string
	{
		resourceType = streamingMonitorResourceChangesResourceType
	}
	var filter *string
	{
		if streamingMonitorResourceChangesFilter != "" {
			filter = &streamingMonitorResourceChangesFilter
		}
	}
	v := &streaming.MonitorResourceChangesPayload{}
	v.ResourceType = resourceType
	v.Filter = filter

	return v, nil
}

// BuildFlexibleDataPayload builds the payload for the streaming flexible_data
// endpoint from CLI flags.
func BuildFlexibleDataPayload(streamingFlexibleDataDataType string, streamingFlexibleDataStreaming2 string) (*streaming.FlexibleDataPayload, error) {
	var err error
	var dataType string
	{
		dataType = streamingFlexibleDataDataType
	}
	var streaming2 bool
	{
		if streamingFlexibleDataStreaming2 != "" {
			streaming2, err = strconv.ParseBool(streamingFlexibleDataStreaming2)
			if err != nil {
				return nil, fmt.Errorf("invalid value for streaming2, must be BOOL")
			}
		}
	}
	v := &streaming.FlexibleDataPayload{}
	v.DataType = &dataType
	v.Streaming = streaming2

	return v, nil
}
