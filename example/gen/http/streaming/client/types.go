// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming HTTP client types
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	streaming "example.com/assistant/gen/streaming"
	goa "goa.design/goa/v3/pkg"
)

// StreamEventsResponseBody is the type of the "streaming" service
// "stream_events" endpoint HTTP response body.
type StreamEventsResponseBody struct {
	// Event ID
	EventID *string `form:"event_id,omitempty" json:"event_id,omitempty" xml:"event_id,omitempty"`
	// Event category
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// Event type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Event data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Event timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// StreamLogsResponseBody is the type of the "streaming" service "stream_logs"
// endpoint HTTP response body.
type StreamLogsResponseBody struct {
	// Log timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// Log level
	Level *string `form:"level,omitempty" json:"level,omitempty" xml:"level,omitempty"`
	// Log message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional log data
	Data map[string]any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// MonitorResourceChangesResponseBody is the type of the "streaming" service
// "monitor_resource_changes" endpoint HTTP response body.
type MonitorResourceChangesResponseBody struct {
	// Update ID
	UpdateID *string `form:"update_id,omitempty" json:"update_id,omitempty" xml:"update_id,omitempty"`
	// Resource that changed
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Type of change
	EventType *string `form:"event_type,omitempty" json:"event_type,omitempty" xml:"event_type,omitempty"`
	// Update data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Update timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// FlexibleDataResponseBody is the type of the "streaming" service
// "flexible_data" endpoint HTTP response body.
type FlexibleDataResponseBody struct {
	// Update ID
	UpdateID *string `form:"update_id,omitempty" json:"update_id,omitempty" xml:"update_id,omitempty"`
	// Update data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Update sequence number
	Sequence *int `form:"sequence,omitempty" json:"sequence,omitempty" xml:"sequence,omitempty"`
	// Whether this is the final update
	Final *bool `form:"final,omitempty" json:"final,omitempty" xml:"final,omitempty"`
}

// NewStreamEventsEventUpdateOK builds a "streaming" service "stream_events"
// endpoint result from a HTTP "OK" response.
func NewStreamEventsEventUpdateOK(body *StreamEventsResponseBody) *streaming.EventUpdate {
	v := &streaming.EventUpdate{
		EventID:   *body.EventID,
		Category:  *body.Category,
		Type:      *body.Type,
		Data:      body.Data,
		Timestamp: *body.Timestamp,
	}

	return v
}

// NewStreamLogsLogEntryOK builds a "streaming" service "stream_logs" endpoint
// result from a HTTP "OK" response.
func NewStreamLogsLogEntryOK(body *StreamLogsResponseBody) *streaming.LogEntry {
	v := &streaming.LogEntry{
		Timestamp: *body.Timestamp,
		Level:     *body.Level,
		Message:   *body.Message,
	}
	if body.Data != nil {
		v.Data = make(map[string]any, len(body.Data))
		for key, val := range body.Data {
			tk := key
			tv := val
			v.Data[tk] = tv
		}
	}

	return v
}

// NewMonitorResourceChangesResourceUpdateOK builds a "streaming" service
// "monitor_resource_changes" endpoint result from a HTTP "OK" response.
func NewMonitorResourceChangesResourceUpdateOK(body *MonitorResourceChangesResponseBody) *streaming.ResourceUpdate {
	v := &streaming.ResourceUpdate{
		UpdateID:  *body.UpdateID,
		Resource:  *body.Resource,
		EventType: *body.EventType,
		Data:      body.Data,
		Timestamp: *body.Timestamp,
	}

	return v
}

// NewFlexibleDataDataUpdateOK builds a "streaming" service "flexible_data"
// endpoint result from a HTTP "OK" response.
func NewFlexibleDataDataUpdateOK(body *FlexibleDataResponseBody) *streaming.DataUpdate {
	v := &streaming.DataUpdate{
		UpdateID: *body.UpdateID,
		Data:     body.Data,
		Sequence: *body.Sequence,
		Final:    *body.Final,
	}

	return v
}

// ValidateStreamEventsResponseBody runs the validations defined on
// stream_events_response_body
func ValidateStreamEventsResponseBody(body *StreamEventsResponseBody) (err error) {
	if body.EventID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_id", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	return
}

// ValidateStreamLogsResponseBody runs the validations defined on
// stream_logs_response_body
func ValidateStreamLogsResponseBody(body *StreamLogsResponseBody) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Level == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("level", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	if body.Level != nil {
		if !(*body.Level == "debug" || *body.Level == "info" || *body.Level == "warning" || *body.Level == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.level", *body.Level, []any{"debug", "info", "warning", "error"}))
		}
	}
	return
}

// ValidateMonitorResourceChangesResponseBody runs the validations defined on
// monitor_resource_changes_response_body
func ValidateMonitorResourceChangesResponseBody(body *MonitorResourceChangesResponseBody) (err error) {
	if body.UpdateID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("update_id", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.EventType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_type", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.EventType != nil {
		if !(*body.EventType == "created" || *body.EventType == "updated" || *body.EventType == "deleted") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.event_type", *body.EventType, []any{"created", "updated", "deleted"}))
		}
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	return
}

// ValidateFlexibleDataResponseBody runs the validations defined on
// flexible_data_response_body
func ValidateFlexibleDataResponseBody(body *FlexibleDataResponseBody) (err error) {
	if body.UpdateID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("update_id", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Sequence == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sequence", "body"))
	}
	if body.Final == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("final", "body"))
	}
	return
}
