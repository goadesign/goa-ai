// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming WebSocket client streaming
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"
	"io"

	streaming "example.com/assistant/gen/streaming"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "streaming" service.
type ConnConfigurer struct {
	StreamEventsFn           goahttp.ConnConfigureFunc
	StreamLogsFn             goahttp.ConnConfigureFunc
	MonitorResourceChangesFn goahttp.ConnConfigureFunc
	FlexibleDataFn           goahttp.ConnConfigureFunc
}

// StreamEventsClientStream implements the streaming.StreamEventsClientStream
// interface.
type StreamEventsClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// StreamLogsClientStream implements the streaming.StreamLogsClientStream
// interface.
type StreamLogsClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// MonitorResourceChangesClientStream implements the
// streaming.MonitorResourceChangesClientStream interface.
type MonitorResourceChangesClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// FlexibleDataClientStream implements the streaming.FlexibleDataClientStream
// interface.
type FlexibleDataClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "streaming" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		StreamEventsFn:           fn,
		StreamLogsFn:             fn,
		MonitorResourceChangesFn: fn,
		FlexibleDataFn:           fn,
	}
}

// Recv reads instances of "streaming.EventUpdate" from the "stream_events"
// endpoint websocket connection.
func (s *StreamEventsClientStream) Recv() (*streaming.EventUpdate, error) {
	var (
		rv   *streaming.EventUpdate
		body StreamEventsResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateStreamEventsResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewStreamEventsEventUpdateOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "streaming.EventUpdate" from the
// "stream_events" endpoint websocket connection with context.
func (s *StreamEventsClientStream) RecvWithContext(ctx context.Context) (*streaming.EventUpdate, error) {
	return s.Recv()
}

// Recv reads instances of "streaming.LogEntry" from the "stream_logs" endpoint
// websocket connection.
func (s *StreamLogsClientStream) Recv() (*streaming.LogEntry, error) {
	var (
		rv   *streaming.LogEntry
		body StreamLogsResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateStreamLogsResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewStreamLogsLogEntryOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "streaming.LogEntry" from the
// "stream_logs" endpoint websocket connection with context.
func (s *StreamLogsClientStream) RecvWithContext(ctx context.Context) (*streaming.LogEntry, error) {
	return s.Recv()
}

// Recv reads instances of "streaming.ResourceUpdate" from the
// "monitor_resource_changes" endpoint websocket connection.
func (s *MonitorResourceChangesClientStream) Recv() (*streaming.ResourceUpdate, error) {
	var (
		rv   *streaming.ResourceUpdate
		body MonitorResourceChangesResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateMonitorResourceChangesResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewMonitorResourceChangesResourceUpdateOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "streaming.ResourceUpdate" from the
// "monitor_resource_changes" endpoint websocket connection with context.
func (s *MonitorResourceChangesClientStream) RecvWithContext(ctx context.Context) (*streaming.ResourceUpdate, error) {
	return s.Recv()
}

// Recv reads instances of "streaming.DataUpdate" from the "flexible_data"
// endpoint websocket connection.
func (s *FlexibleDataClientStream) Recv() (*streaming.DataUpdate, error) {
	var (
		rv   *streaming.DataUpdate
		body FlexibleDataResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateFlexibleDataResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewFlexibleDataDataUpdateOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "streaming.DataUpdate" from the
// "flexible_data" endpoint websocket connection with context.
func (s *FlexibleDataClientStream) RecvWithContext(ctx context.Context) (*streaming.DataUpdate, error) {
	return s.Recv()
}
