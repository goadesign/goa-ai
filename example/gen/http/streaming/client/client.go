// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming client HTTP transport
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the streaming service endpoint HTTP clients.
type Client struct {
	// StreamEvents Doer is the HTTP client used to make requests to the
	// stream_events endpoint.
	StreamEventsDoer goahttp.Doer

	// StreamLogs Doer is the HTTP client used to make requests to the stream_logs
	// endpoint.
	StreamLogsDoer goahttp.Doer

	// MonitorResourceChanges Doer is the HTTP client used to make requests to the
	// monitor_resource_changes endpoint.
	MonitorResourceChangesDoer goahttp.Doer

	// FlexibleData Doer is the HTTP client used to make requests to the
	// flexible_data endpoint.
	FlexibleDataDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the streaming service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		StreamEventsDoer:           doer,
		StreamLogsDoer:             doer,
		MonitorResourceChangesDoer: doer,
		FlexibleDataDoer:           doer,
		RestoreResponseBody:        restoreBody,
		scheme:                     scheme,
		host:                       host,
		decoder:                    dec,
		encoder:                    enc,
		dialer:                     dialer,
		configurer:                 cfn,
	}
}

// StreamEvents returns an endpoint that makes HTTP requests to the streaming
// service stream_events server.
func (c *Client) StreamEvents() goa.Endpoint {
	var (
		encodeRequest  = EncodeStreamEventsRequest(c.encoder)
		decodeResponse = DecodeStreamEventsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildStreamEventsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("streaming", "stream_events", err)
		}
		if c.configurer.StreamEventsFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.StreamEventsFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &StreamEventsClientStream{conn: conn}
		return stream, nil
	}
}

// StreamLogs returns an endpoint that makes HTTP requests to the streaming
// service stream_logs server.
func (c *Client) StreamLogs() goa.Endpoint {
	var (
		encodeRequest  = EncodeStreamLogsRequest(c.encoder)
		decodeResponse = DecodeStreamLogsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildStreamLogsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("streaming", "stream_logs", err)
		}
		if c.configurer.StreamLogsFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.StreamLogsFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &StreamLogsClientStream{conn: conn}
		return stream, nil
	}
}

// MonitorResourceChanges returns an endpoint that makes HTTP requests to the
// streaming service monitor_resource_changes server.
func (c *Client) MonitorResourceChanges() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorResourceChangesRequest(c.encoder)
		decodeResponse = DecodeMonitorResourceChangesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorResourceChangesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("streaming", "monitor_resource_changes", err)
		}
		if c.configurer.MonitorResourceChangesFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.MonitorResourceChangesFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &MonitorResourceChangesClientStream{conn: conn}
		return stream, nil
	}
}

// FlexibleData returns an endpoint that makes HTTP requests to the streaming
// service flexible_data server.
func (c *Client) FlexibleData() goa.Endpoint {
	var (
		encodeRequest  = EncodeFlexibleDataRequest(c.encoder)
		decodeResponse = DecodeFlexibleDataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildFlexibleDataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("streaming", "flexible_data", err)
		}
		if c.configurer.FlexibleDataFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.FlexibleDataFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &FlexibleDataClientStream{conn: conn}
		return stream, nil
	}
}
