// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming HTTP client encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	streaming "example.com/assistant/gen/streaming"
	goahttp "goa.design/goa/v3/http"
)

// BuildStreamEventsRequest instantiates a HTTP request object with method and
// path set to call the "streaming" service "stream_events" endpoint
func (c *Client) BuildStreamEventsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		category string
	)
	{
		p, ok := v.(*streaming.StreamEventsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("streaming", "stream_events", "*streaming.StreamEventsPayload", v)
		}
		category = p.Category
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: StreamEventsStreamingPath(category)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("streaming", "stream_events", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStreamEventsRequest returns an encoder for requests sent to the
// streaming stream_events server.
func EncodeStreamEventsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*streaming.StreamEventsPayload)
		if !ok {
			return goahttp.ErrInvalidType("streaming", "stream_events", "*streaming.StreamEventsPayload", v)
		}
		values := req.URL.Query()
		if p.Filter != nil {
			values.Add("filter", *p.Filter)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeStreamEventsResponse returns a decoder for responses returned by the
// streaming stream_events endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeStreamEventsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StreamEventsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("streaming", "stream_events", err)
			}
			err = ValidateStreamEventsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("streaming", "stream_events", err)
			}
			res := NewStreamEventsEventUpdateOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("streaming", "stream_events", resp.StatusCode, string(body))
		}
	}
}

// BuildStreamLogsRequest instantiates a HTTP request object with method and
// path set to call the "streaming" service "stream_logs" endpoint
func (c *Client) BuildStreamLogsRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: StreamLogsStreamingPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("streaming", "stream_logs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStreamLogsRequest returns an encoder for requests sent to the
// streaming stream_logs server.
func EncodeStreamLogsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*streaming.StreamLogsPayload)
		if !ok {
			return goahttp.ErrInvalidType("streaming", "stream_logs", "*streaming.StreamLogsPayload", v)
		}
		values := req.URL.Query()
		values.Add("level", p.Level)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeStreamLogsResponse returns a decoder for responses returned by the
// streaming stream_logs endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeStreamLogsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StreamLogsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("streaming", "stream_logs", err)
			}
			err = ValidateStreamLogsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("streaming", "stream_logs", err)
			}
			res := NewStreamLogsLogEntryOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("streaming", "stream_logs", resp.StatusCode, string(body))
		}
	}
}

// BuildMonitorResourceChangesRequest instantiates a HTTP request object with
// method and path set to call the "streaming" service
// "monitor_resource_changes" endpoint
func (c *Client) BuildMonitorResourceChangesRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		resourceType string
	)
	{
		p, ok := v.(*streaming.MonitorResourceChangesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("streaming", "monitor_resource_changes", "*streaming.MonitorResourceChangesPayload", v)
		}
		resourceType = p.ResourceType
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: MonitorResourceChangesStreamingPath(resourceType)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("streaming", "monitor_resource_changes", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMonitorResourceChangesRequest returns an encoder for requests sent to
// the streaming monitor_resource_changes server.
func EncodeMonitorResourceChangesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*streaming.MonitorResourceChangesPayload)
		if !ok {
			return goahttp.ErrInvalidType("streaming", "monitor_resource_changes", "*streaming.MonitorResourceChangesPayload", v)
		}
		values := req.URL.Query()
		if p.Filter != nil {
			values.Add("filter", *p.Filter)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeMonitorResourceChangesResponse returns a decoder for responses
// returned by the streaming monitor_resource_changes endpoint. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeMonitorResourceChangesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MonitorResourceChangesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("streaming", "monitor_resource_changes", err)
			}
			err = ValidateMonitorResourceChangesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("streaming", "monitor_resource_changes", err)
			}
			res := NewMonitorResourceChangesResourceUpdateOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("streaming", "monitor_resource_changes", resp.StatusCode, string(body))
		}
	}
}

// BuildFlexibleDataRequest instantiates a HTTP request object with method and
// path set to call the "streaming" service "flexible_data" endpoint
func (c *Client) BuildFlexibleDataRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		dataType string
	)
	{
		p, ok := v.(*streaming.FlexibleDataPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("streaming", "flexible_data", "*streaming.FlexibleDataPayload", v)
		}
		if p.DataType != nil {
			dataType = *p.DataType
		}
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: FlexibleDataStreamingPath(dataType)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("streaming", "flexible_data", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFlexibleDataRequest returns an encoder for requests sent to the
// streaming flexible_data server.
func EncodeFlexibleDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*streaming.FlexibleDataPayload)
		if !ok {
			return goahttp.ErrInvalidType("streaming", "flexible_data", "*streaming.FlexibleDataPayload", v)
		}
		values := req.URL.Query()
		values.Add("streaming", fmt.Sprintf("%v", p.Streaming))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeFlexibleDataResponse returns a decoder for responses returned by the
// streaming flexible_data endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeFlexibleDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FlexibleDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("streaming", "flexible_data", err)
			}
			err = ValidateFlexibleDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("streaming", "flexible_data", err)
			}
			res := NewFlexibleDataDataUpdateOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("streaming", "flexible_data", resp.StatusCode, string(body))
		}
	}
}
