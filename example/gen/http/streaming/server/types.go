// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming HTTP server types
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	streaming "example.com/assistant/gen/streaming"
)

// StreamEventsResponseBody is the type of the "streaming" service
// "stream_events" endpoint HTTP response body.
type StreamEventsResponseBody struct {
	// Event ID
	EventID string `form:"event_id" json:"event_id" xml:"event_id"`
	// Event category
	Category string `form:"category" json:"category" xml:"category"`
	// Event type
	Type string `form:"type" json:"type" xml:"type"`
	// Event data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Event timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// StreamLogsResponseBody is the type of the "streaming" service "stream_logs"
// endpoint HTTP response body.
type StreamLogsResponseBody struct {
	// Log timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// Log level
	Level string `form:"level" json:"level" xml:"level"`
	// Log message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional log data
	Data map[string]any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// MonitorResourceChangesResponseBody is the type of the "streaming" service
// "monitor_resource_changes" endpoint HTTP response body.
type MonitorResourceChangesResponseBody struct {
	// Update ID
	UpdateID string `form:"update_id" json:"update_id" xml:"update_id"`
	// Resource that changed
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Type of change
	EventType string `form:"event_type" json:"event_type" xml:"event_type"`
	// Update data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Update timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// FlexibleDataResponseBody is the type of the "streaming" service
// "flexible_data" endpoint HTTP response body.
type FlexibleDataResponseBody struct {
	// Update ID
	UpdateID string `form:"update_id" json:"update_id" xml:"update_id"`
	// Update data
	Data any `form:"data" json:"data" xml:"data"`
	// Update sequence number
	Sequence int `form:"sequence" json:"sequence" xml:"sequence"`
	// Whether this is the final update
	Final bool `form:"final" json:"final" xml:"final"`
}

// NewStreamEventsResponseBody builds the HTTP response body from the result of
// the "stream_events" endpoint of the "streaming" service.
func NewStreamEventsResponseBody(res *streaming.EventUpdate) *StreamEventsResponseBody {
	body := &StreamEventsResponseBody{
		EventID:   res.EventID,
		Category:  res.Category,
		Type:      res.Type,
		Data:      res.Data,
		Timestamp: res.Timestamp,
	}
	return body
}

// NewStreamLogsResponseBody builds the HTTP response body from the result of
// the "stream_logs" endpoint of the "streaming" service.
func NewStreamLogsResponseBody(res *streaming.LogEntry) *StreamLogsResponseBody {
	body := &StreamLogsResponseBody{
		Timestamp: res.Timestamp,
		Level:     res.Level,
		Message:   res.Message,
	}
	if res.Data != nil {
		body.Data = make(map[string]any, len(res.Data))
		for key, val := range res.Data {
			tk := key
			tv := val
			body.Data[tk] = tv
		}
	}
	return body
}

// NewMonitorResourceChangesResponseBody builds the HTTP response body from the
// result of the "monitor_resource_changes" endpoint of the "streaming" service.
func NewMonitorResourceChangesResponseBody(res *streaming.ResourceUpdate) *MonitorResourceChangesResponseBody {
	body := &MonitorResourceChangesResponseBody{
		UpdateID:  res.UpdateID,
		Resource:  res.Resource,
		EventType: res.EventType,
		Data:      res.Data,
		Timestamp: res.Timestamp,
	}
	return body
}

// NewFlexibleDataResponseBody builds the HTTP response body from the result of
// the "flexible_data" endpoint of the "streaming" service.
func NewFlexibleDataResponseBody(res *streaming.DataUpdate) *FlexibleDataResponseBody {
	body := &FlexibleDataResponseBody{
		UpdateID: res.UpdateID,
		Data:     res.Data,
		Sequence: res.Sequence,
		Final:    res.Final,
	}
	return body
}

// NewStreamEventsPayload builds a streaming service stream_events endpoint
// payload.
func NewStreamEventsPayload(category string, filter *string) *streaming.StreamEventsPayload {
	v := &streaming.StreamEventsPayload{}
	v.Category = category
	v.Filter = filter

	return v
}

// NewStreamLogsPayload builds a streaming service stream_logs endpoint payload.
func NewStreamLogsPayload(level string) *streaming.StreamLogsPayload {
	v := &streaming.StreamLogsPayload{}
	v.Level = level

	return v
}

// NewMonitorResourceChangesPayload builds a streaming service
// monitor_resource_changes endpoint payload.
func NewMonitorResourceChangesPayload(resourceType string, filter *string) *streaming.MonitorResourceChangesPayload {
	v := &streaming.MonitorResourceChangesPayload{}
	v.ResourceType = resourceType
	v.Filter = filter

	return v
}

// NewFlexibleDataPayload builds a streaming service flexible_data endpoint
// payload.
func NewFlexibleDataPayload(dataType string, streaming2 bool) *streaming.FlexibleDataPayload {
	v := &streaming.FlexibleDataPayload{}
	v.DataType = &dataType
	v.Streaming = streaming2

	return v
}
