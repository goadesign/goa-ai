// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming HTTP server
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"
	"net/http"

	streaming "example.com/assistant/gen/streaming"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the streaming service endpoint HTTP handlers.
type Server struct {
	Mounts                 []*MountPoint
	StreamEvents           http.Handler
	StreamLogs             http.Handler
	MonitorResourceChanges http.Handler
	FlexibleData           http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the streaming service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *streaming.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer *ConnConfigurer,
) *Server {
	if configurer == nil {
		configurer = &ConnConfigurer{}
	}
	return &Server{
		Mounts: []*MountPoint{
			{"StreamEvents", "GET", "/stream/events/{category}"},
			{"StreamLogs", "GET", "/stream/logs"},
			{"MonitorResourceChanges", "GET", "/stream/monitor/{resource_type}"},
			{"FlexibleData", "GET", "/stream/data/{data_type}"},
		},
		StreamEvents:           NewStreamEventsHandler(e.StreamEvents, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.StreamEventsFn),
		StreamLogs:             NewStreamLogsHandler(e.StreamLogs, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.StreamLogsFn),
		MonitorResourceChanges: NewMonitorResourceChangesHandler(e.MonitorResourceChanges, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.MonitorResourceChangesFn),
		FlexibleData:           NewFlexibleDataHandler(e.FlexibleData, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.FlexibleDataFn),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "streaming" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.StreamEvents = m(s.StreamEvents)
	s.StreamLogs = m(s.StreamLogs)
	s.MonitorResourceChanges = m(s.MonitorResourceChanges)
	s.FlexibleData = m(s.FlexibleData)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return streaming.MethodNames[:] }

// Mount configures the mux to serve the streaming endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountStreamEventsHandler(mux, h.StreamEvents)
	MountStreamLogsHandler(mux, h.StreamLogs)
	MountMonitorResourceChangesHandler(mux, h.MonitorResourceChanges)
	MountFlexibleDataHandler(mux, h.FlexibleData)
}

// Mount configures the mux to serve the streaming endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountStreamEventsHandler configures the mux to serve the "streaming" service
// "stream_events" endpoint.
func MountStreamEventsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stream/events/{category}", f)
}

// NewStreamEventsHandler creates a HTTP handler which loads the HTTP request
// and calls the "streaming" service "stream_events" endpoint.
func NewStreamEventsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeStreamEventsRequest(mux, decoder)
		encodeError   = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "stream_events")
		ctx = context.WithValue(ctx, goa.ServiceKey, "streaming")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &streaming.StreamEventsEndpointInput{
			Stream: &StreamEventsServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload,
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *StreamEventsServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*StreamEventsServerStream)
			} else {
				stream = v.Stream.(*StreamEventsServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountStreamLogsHandler configures the mux to serve the "streaming" service
// "stream_logs" endpoint.
func MountStreamLogsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stream/logs", f)
}

// NewStreamLogsHandler creates a HTTP handler which loads the HTTP request and
// calls the "streaming" service "stream_logs" endpoint.
func NewStreamLogsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeStreamLogsRequest(mux, decoder)
		encodeError   = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "stream_logs")
		ctx = context.WithValue(ctx, goa.ServiceKey, "streaming")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &streaming.StreamLogsEndpointInput{
			Stream: &StreamLogsServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload,
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *StreamLogsServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*StreamLogsServerStream)
			} else {
				stream = v.Stream.(*StreamLogsServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountMonitorResourceChangesHandler configures the mux to serve the
// "streaming" service "monitor_resource_changes" endpoint.
func MountMonitorResourceChangesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stream/monitor/{resource_type}", f)
}

// NewMonitorResourceChangesHandler creates a HTTP handler which loads the HTTP
// request and calls the "streaming" service "monitor_resource_changes"
// endpoint.
func NewMonitorResourceChangesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeMonitorResourceChangesRequest(mux, decoder)
		encodeError   = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "monitor_resource_changes")
		ctx = context.WithValue(ctx, goa.ServiceKey, "streaming")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &streaming.MonitorResourceChangesEndpointInput{
			Stream: &MonitorResourceChangesServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload,
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *MonitorResourceChangesServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*MonitorResourceChangesServerStream)
			} else {
				stream = v.Stream.(*MonitorResourceChangesServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountFlexibleDataHandler configures the mux to serve the "streaming" service
// "flexible_data" endpoint.
func MountFlexibleDataHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stream/data/{data_type}", f)
}

// NewFlexibleDataHandler creates a HTTP handler which loads the HTTP request
// and calls the "streaming" service "flexible_data" endpoint.
func NewFlexibleDataHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeFlexibleDataRequest(mux, decoder)
		encodeError   = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "flexible_data")
		ctx = context.WithValue(ctx, goa.ServiceKey, "streaming")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &streaming.FlexibleDataEndpointInput{
			Stream: &FlexibleDataServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload,
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *FlexibleDataServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*FlexibleDataServerStream)
			} else {
				stream = v.Stream.(*FlexibleDataServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}
