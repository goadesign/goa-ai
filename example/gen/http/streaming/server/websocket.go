// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming WebSocket server streaming
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"
	"net/http"
	"sync"
	"time"

	streaming "example.com/assistant/gen/streaming"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "streaming" service.
type ConnConfigurer struct {
	StreamEventsFn           goahttp.ConnConfigureFunc
	StreamLogsFn             goahttp.ConnConfigureFunc
	MonitorResourceChangesFn goahttp.ConnConfigureFunc
	FlexibleDataFn           goahttp.ConnConfigureFunc
}

// StreamEventsServerStream implements the streaming.StreamEventsServerStream
// interface.
type StreamEventsServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// StreamLogsServerStream implements the streaming.StreamLogsServerStream
// interface.
type StreamLogsServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// MonitorResourceChangesServerStream implements the
// streaming.MonitorResourceChangesServerStream interface.
type MonitorResourceChangesServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// FlexibleDataServerStream implements the streaming.FlexibleDataServerStream
// interface.
type FlexibleDataServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "streaming" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		StreamEventsFn:           fn,
		StreamLogsFn:             fn,
		MonitorResourceChangesFn: fn,
		FlexibleDataFn:           fn,
	}
}

// Send streams instances of "streaming.EventUpdate" to the "stream_events"
// endpoint websocket connection.
func (s *StreamEventsServerStream) Send(v *streaming.EventUpdate) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewStreamEventsResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "streaming.EventUpdate" to the
// "stream_events" endpoint websocket connection with context.
func (s *StreamEventsServerStream) SendWithContext(ctx context.Context, v *streaming.EventUpdate) error {
	return s.Send(v)
}

// Close closes the "stream_events" endpoint websocket connection.
func (s *StreamEventsServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}

// Send streams instances of "streaming.LogEntry" to the "stream_logs" endpoint
// websocket connection.
func (s *StreamLogsServerStream) Send(v *streaming.LogEntry) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewStreamLogsResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "streaming.LogEntry" to the
// "stream_logs" endpoint websocket connection with context.
func (s *StreamLogsServerStream) SendWithContext(ctx context.Context, v *streaming.LogEntry) error {
	return s.Send(v)
}

// Close closes the "stream_logs" endpoint websocket connection.
func (s *StreamLogsServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}

// Send streams instances of "streaming.ResourceUpdate" to the
// "monitor_resource_changes" endpoint websocket connection.
func (s *MonitorResourceChangesServerStream) Send(v *streaming.ResourceUpdate) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewMonitorResourceChangesResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "streaming.ResourceUpdate" to the
// "monitor_resource_changes" endpoint websocket connection with context.
func (s *MonitorResourceChangesServerStream) SendWithContext(ctx context.Context, v *streaming.ResourceUpdate) error {
	return s.Send(v)
}

// Close closes the "monitor_resource_changes" endpoint websocket connection.
func (s *MonitorResourceChangesServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}

// Send streams instances of "streaming.DataUpdate" to the "flexible_data"
// endpoint websocket connection.
func (s *FlexibleDataServerStream) Send(v *streaming.DataUpdate) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewFlexibleDataResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "streaming.DataUpdate" to the
// "flexible_data" endpoint websocket connection with context.
func (s *FlexibleDataServerStream) SendWithContext(ctx context.Context, v *streaming.DataUpdate) error {
	return s.Send(v)
}

// Close closes the "flexible_data" endpoint websocket connection.
func (s *FlexibleDataServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}
