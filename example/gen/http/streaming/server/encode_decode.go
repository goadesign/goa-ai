// Code generated by goa v3.22.2, DO NOT EDIT.
//
// streaming HTTP server encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"net/http"
	"strconv"

	streaming "example.com/assistant/gen/streaming"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// DecodeStreamEventsRequest returns a decoder for requests sent to the
// streaming stream_events endpoint.
func DecodeStreamEventsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*streaming.StreamEventsPayload, error) {
	return func(r *http.Request) (*streaming.StreamEventsPayload, error) {
		var (
			category string
			filter   *string
			err      error

			params = mux.Vars(r)
		)
		category = params["category"]
		if !(category == "system" || category == "user" || category == "application") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("category", category, []any{"system", "user", "application"}))
		}
		filterRaw := r.URL.Query().Get("filter")
		if filterRaw != "" {
			filter = &filterRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewStreamEventsPayload(category, filter)

		return payload, nil
	}
}

// DecodeStreamLogsRequest returns a decoder for requests sent to the streaming
// stream_logs endpoint.
func DecodeStreamLogsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*streaming.StreamLogsPayload, error) {
	return func(r *http.Request) (*streaming.StreamLogsPayload, error) {
		var (
			level string
			err   error
		)
		levelRaw := r.URL.Query().Get("level")
		if levelRaw != "" {
			level = levelRaw
		} else {
			level = "info"
		}
		if !(level == "debug" || level == "info" || level == "warning" || level == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("level", level, []any{"debug", "info", "warning", "error"}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewStreamLogsPayload(level)

		return payload, nil
	}
}

// DecodeMonitorResourceChangesRequest returns a decoder for requests sent to
// the streaming monitor_resource_changes endpoint.
func DecodeMonitorResourceChangesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*streaming.MonitorResourceChangesPayload, error) {
	return func(r *http.Request) (*streaming.MonitorResourceChangesPayload, error) {
		var (
			resourceType string
			filter       *string

			params = mux.Vars(r)
		)
		resourceType = params["resource_type"]
		filterRaw := r.URL.Query().Get("filter")
		if filterRaw != "" {
			filter = &filterRaw
		}
		payload := NewMonitorResourceChangesPayload(resourceType, filter)

		return payload, nil
	}
}

// DecodeFlexibleDataRequest returns a decoder for requests sent to the
// streaming flexible_data endpoint.
func DecodeFlexibleDataRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*streaming.FlexibleDataPayload, error) {
	return func(r *http.Request) (*streaming.FlexibleDataPayload, error) {
		var (
			dataType   string
			streaming2 bool
			err        error

			params = mux.Vars(r)
		)
		dataType = params["data_type"]
		{
			streaming2Raw := r.URL.Query().Get("streaming")
			if streaming2Raw == "" {
				streaming2 = true
			} else {
				v, err2 := strconv.ParseBool(streaming2Raw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("streaming", streaming2Raw, "boolean"))
				}
				streaming2 = v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewFlexibleDataPayload(dataType, streaming2)

		return payload, nil
	}
}
