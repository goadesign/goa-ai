// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket client HTTP transport
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the websocket service endpoint HTTP clients.
type Client struct {
	// UploadChunks Doer is the HTTP client used to make requests to the
	// upload_chunks endpoint.
	UploadChunksDoer goahttp.Doer

	// UploadDocuments Doer is the HTTP client used to make requests to the
	// upload_documents endpoint.
	UploadDocumentsDoer goahttp.Doer

	// Chat Doer is the HTTP client used to make requests to the chat endpoint.
	ChatDoer goahttp.Doer

	// InteractiveChat Doer is the HTTP client used to make requests to the
	// interactive_chat endpoint.
	InteractiveChatDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the websocket service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		UploadChunksDoer:    doer,
		UploadDocumentsDoer: doer,
		ChatDoer:            doer,
		InteractiveChatDoer: doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		configurer:          cfn,
	}
}

// UploadChunks returns an endpoint that makes HTTP requests to the websocket
// service upload_chunks server.
func (c *Client) UploadChunks() goa.Endpoint {
	var (
		decodeResponse = DecodeUploadChunksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUploadChunksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("websocket", "upload_chunks", err)
		}
		if c.configurer.UploadChunksFn != nil {
			conn = c.configurer.UploadChunksFn(conn, nil)
		}
		stream := &UploadChunksClientStream{conn: conn}
		return stream, nil
	}
}

// UploadDocuments returns an endpoint that makes HTTP requests to the
// websocket service upload_documents server.
func (c *Client) UploadDocuments() goa.Endpoint {
	var (
		decodeResponse = DecodeUploadDocumentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUploadDocumentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("websocket", "upload_documents", err)
		}
		if c.configurer.UploadDocumentsFn != nil {
			conn = c.configurer.UploadDocumentsFn(conn, nil)
		}
		stream := &UploadDocumentsClientStream{conn: conn}
		return stream, nil
	}
}

// Chat returns an endpoint that makes HTTP requests to the websocket service
// chat server.
func (c *Client) Chat() goa.Endpoint {
	var (
		decodeResponse = DecodeChatResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildChatRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("websocket", "chat", err)
		}
		if c.configurer.ChatFn != nil {
			conn = c.configurer.ChatFn(conn, nil)
		}
		stream := &ChatClientStream{conn: conn}
		return stream, nil
	}
}

// InteractiveChat returns an endpoint that makes HTTP requests to the
// websocket service interactive_chat server.
func (c *Client) InteractiveChat() goa.Endpoint {
	var (
		decodeResponse = DecodeInteractiveChatResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildInteractiveChatRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("websocket", "interactive_chat", err)
		}
		if c.configurer.InteractiveChatFn != nil {
			conn = c.configurer.InteractiveChatFn(conn, nil)
		}
		stream := &InteractiveChatClientStream{conn: conn}
		return stream, nil
	}
}
