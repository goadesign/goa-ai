// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket HTTP client encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildUploadChunksRequest instantiates a HTTP request object with method and
// path set to call the "websocket" service "upload_chunks" endpoint
func (c *Client) BuildUploadChunksRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: UploadChunksWebsocketPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("websocket", "upload_chunks", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeUploadChunksResponse returns a decoder for responses returned by the
// websocket upload_chunks endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeUploadChunksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadChunksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("websocket", "upload_chunks", err)
			}
			err = ValidateUploadChunksResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("websocket", "upload_chunks", err)
			}
			res := NewUploadChunksResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("websocket", "upload_chunks", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadDocumentsRequest instantiates a HTTP request object with method
// and path set to call the "websocket" service "upload_documents" endpoint
func (c *Client) BuildUploadDocumentsRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: UploadDocumentsWebsocketPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("websocket", "upload_documents", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeUploadDocumentsResponse returns a decoder for responses returned by
// the websocket upload_documents endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeUploadDocumentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadDocumentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("websocket", "upload_documents", err)
			}
			err = ValidateUploadDocumentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("websocket", "upload_documents", err)
			}
			res := NewUploadDocumentsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("websocket", "upload_documents", resp.StatusCode, string(body))
		}
	}
}

// BuildChatRequest instantiates a HTTP request object with method and path set
// to call the "websocket" service "chat" endpoint
func (c *Client) BuildChatRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: ChatWebsocketPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("websocket", "chat", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeChatResponse returns a decoder for responses returned by the websocket
// chat endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeChatResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ChatResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("websocket", "chat", err)
			}
			err = ValidateChatResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("websocket", "chat", err)
			}
			res := NewChatResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("websocket", "chat", resp.StatusCode, string(body))
		}
	}
}

// BuildInteractiveChatRequest instantiates a HTTP request object with method
// and path set to call the "websocket" service "interactive_chat" endpoint
func (c *Client) BuildInteractiveChatRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: InteractiveChatWebsocketPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("websocket", "interactive_chat", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeInteractiveChatResponse returns a decoder for responses returned by
// the websocket interactive_chat endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeInteractiveChatResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InteractiveChatResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("websocket", "interactive_chat", err)
			}
			err = ValidateInteractiveChatResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("websocket", "interactive_chat", err)
			}
			res := NewInteractiveChatChatResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("websocket", "interactive_chat", resp.StatusCode, string(body))
		}
	}
}
