// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket WebSocket client streaming
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"
	"io"

	websocketsvc "example.com/assistant/gen/websocket"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "websocket" service.
type ConnConfigurer struct {
	UploadChunksFn    goahttp.ConnConfigureFunc
	UploadDocumentsFn goahttp.ConnConfigureFunc
	ChatFn            goahttp.ConnConfigureFunc
	InteractiveChatFn goahttp.ConnConfigureFunc
}

// UploadChunksClientStream implements the
// websocketsvc.UploadChunksClientStream interface.
type UploadChunksClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// UploadDocumentsClientStream implements the
// websocketsvc.UploadDocumentsClientStream interface.
type UploadDocumentsClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// ChatClientStream implements the websocketsvc.ChatClientStream interface.
type ChatClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// InteractiveChatClientStream implements the
// websocketsvc.InteractiveChatClientStream interface.
type InteractiveChatClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "websocket" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		UploadChunksFn:    fn,
		UploadDocumentsFn: fn,
		ChatFn:            fn,
		InteractiveChatFn: fn,
	}
}

// CloseAndRecv stops sending messages to the "upload_chunks" endpoint
// websocket connection and reads instances of
// "websocketsvc.UploadChunksResult" from the connection.
func (s *UploadChunksClientStream) CloseAndRecv() (*websocketsvc.UploadChunksResult, error) {
	var (
		rv   *websocketsvc.UploadChunksResult
		body UploadChunksResponseBody
		err  error
	)
	defer s.conn.Close()
	// Send a nil payload to the server implying end of message
	if err = s.conn.WriteJSON(nil); err != nil {
		return rv, err
	}
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateUploadChunksResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewUploadChunksResultOK(&body)
	return res, nil
}

// CloseAndRecvWithContext stops sending messages to the "upload_chunks"
// endpoint websocket connection and reads instances of
// "websocketsvc.UploadChunksResult" from the connection with context.
func (s *UploadChunksClientStream) CloseAndRecvWithContext(ctx context.Context) (*websocketsvc.UploadChunksResult, error) {
	return s.CloseAndRecv()
}

// Send streams instances of "websocketsvc.DocumentChunk" to the
// "upload_chunks" endpoint websocket connection.
func (s *UploadChunksClientStream) Send(v *websocketsvc.DocumentChunk) error {
	body := NewUploadChunksStreamingBody(v)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "websocketsvc.DocumentChunk" to the
// "upload_chunks" endpoint websocket connection with context.
func (s *UploadChunksClientStream) SendWithContext(ctx context.Context, v *websocketsvc.DocumentChunk) error {
	return s.Send(v)
}

// CloseAndRecv stops sending messages to the "upload_documents" endpoint
// websocket connection and reads instances of
// "websocketsvc.UploadDocumentsResult" from the connection.
func (s *UploadDocumentsClientStream) CloseAndRecv() (*websocketsvc.UploadDocumentsResult, error) {
	var (
		rv   *websocketsvc.UploadDocumentsResult
		body UploadDocumentsResponseBody
		err  error
	)
	defer s.conn.Close()
	// Send a nil payload to the server implying end of message
	if err = s.conn.WriteJSON(nil); err != nil {
		return rv, err
	}
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateUploadDocumentsResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewUploadDocumentsResultOK(&body)
	return res, nil
}

// CloseAndRecvWithContext stops sending messages to the "upload_documents"
// endpoint websocket connection and reads instances of
// "websocketsvc.UploadDocumentsResult" from the connection with context.
func (s *UploadDocumentsClientStream) CloseAndRecvWithContext(ctx context.Context) (*websocketsvc.UploadDocumentsResult, error) {
	return s.CloseAndRecv()
}

// Send streams instances of "websocketsvc.DocumentChunk" to the
// "upload_documents" endpoint websocket connection.
func (s *UploadDocumentsClientStream) Send(v *websocketsvc.DocumentChunk) error {
	body := NewUploadDocumentsStreamingBody(v)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "websocketsvc.DocumentChunk" to the
// "upload_documents" endpoint websocket connection with context.
func (s *UploadDocumentsClientStream) SendWithContext(ctx context.Context, v *websocketsvc.DocumentChunk) error {
	return s.Send(v)
}

// Recv reads instances of "websocketsvc.ChatResponse" from the "chat" endpoint
// websocket connection.
func (s *ChatClientStream) Recv() (*websocketsvc.ChatResponse, error) {
	var (
		rv   *websocketsvc.ChatResponse
		body ChatResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateChatResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewChatResponseOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "websocketsvc.ChatResponse" from the
// "chat" endpoint websocket connection with context.
func (s *ChatClientStream) RecvWithContext(ctx context.Context) (*websocketsvc.ChatResponse, error) {
	return s.Recv()
}

// Send streams instances of "websocketsvc.ChatInput" to the "chat" endpoint
// websocket connection.
func (s *ChatClientStream) Send(v *websocketsvc.ChatInput) error {
	body := NewChatStreamingBody(v)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "websocketsvc.ChatInput" to the "chat"
// endpoint websocket connection with context.
func (s *ChatClientStream) SendWithContext(ctx context.Context, v *websocketsvc.ChatInput) error {
	return s.Send(v)
}

// Close closes the "chat" endpoint websocket connection.
func (s *ChatClientStream) Close() error {
	var err error
	// Send a nil payload to the server implying client closing connection.
	if err = s.conn.WriteJSON(nil); err != nil {
		return err
	}
	return s.conn.Close()
}

// Recv reads instances of "websocketsvc.ChatResponse" from the
// "interactive_chat" endpoint websocket connection.
func (s *InteractiveChatClientStream) Recv() (*websocketsvc.ChatResponse, error) {
	var (
		rv   *websocketsvc.ChatResponse
		body InteractiveChatResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateInteractiveChatResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewInteractiveChatChatResponseOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "websocketsvc.ChatResponse" from the
// "interactive_chat" endpoint websocket connection with context.
func (s *InteractiveChatClientStream) RecvWithContext(ctx context.Context) (*websocketsvc.ChatResponse, error) {
	return s.Recv()
}

// Send streams instances of "websocketsvc.ChatInput" to the "interactive_chat"
// endpoint websocket connection.
func (s *InteractiveChatClientStream) Send(v *websocketsvc.ChatInput) error {
	body := NewInteractiveChatStreamingBody(v)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "websocketsvc.ChatInput" to the
// "interactive_chat" endpoint websocket connection with context.
func (s *InteractiveChatClientStream) SendWithContext(ctx context.Context, v *websocketsvc.ChatInput) error {
	return s.Send(v)
}

// Close closes the "interactive_chat" endpoint websocket connection.
func (s *InteractiveChatClientStream) Close() error {
	var err error
	// Send a nil payload to the server implying client closing connection.
	if err = s.conn.WriteJSON(nil); err != nil {
		return err
	}
	return s.conn.Close()
}
