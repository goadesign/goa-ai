// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket HTTP server
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"
	"net/http"

	websocketsvc "example.com/assistant/gen/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the websocket service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	UploadChunks    http.Handler
	UploadDocuments http.Handler
	Chat            http.Handler
	InteractiveChat http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the websocket service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *websocketsvc.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer *ConnConfigurer,
) *Server {
	if configurer == nil {
		configurer = &ConnConfigurer{}
	}
	return &Server{
		Mounts: []*MountPoint{
			{"UploadChunks", "GET", "/ws/upload"},
			{"UploadDocuments", "GET", "/ws/upload_documents"},
			{"Chat", "GET", "/ws/chat"},
			{"InteractiveChat", "GET", "/ws/interactive_chat"},
		},
		UploadChunks:    NewUploadChunksHandler(e.UploadChunks, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.UploadChunksFn),
		UploadDocuments: NewUploadDocumentsHandler(e.UploadDocuments, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.UploadDocumentsFn),
		Chat:            NewChatHandler(e.Chat, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.ChatFn),
		InteractiveChat: NewInteractiveChatHandler(e.InteractiveChat, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.InteractiveChatFn),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "websocket" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.UploadChunks = m(s.UploadChunks)
	s.UploadDocuments = m(s.UploadDocuments)
	s.Chat = m(s.Chat)
	s.InteractiveChat = m(s.InteractiveChat)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return websocketsvc.MethodNames[:] }

// Mount configures the mux to serve the websocket endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountUploadChunksHandler(mux, h.UploadChunks)
	MountUploadDocumentsHandler(mux, h.UploadDocuments)
	MountChatHandler(mux, h.Chat)
	MountInteractiveChatHandler(mux, h.InteractiveChat)
}

// Mount configures the mux to serve the websocket endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountUploadChunksHandler configures the mux to serve the "websocket" service
// "upload_chunks" endpoint.
func MountUploadChunksHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ws/upload", f)
}

// NewUploadChunksHandler creates a HTTP handler which loads the HTTP request
// and calls the "websocket" service "upload_chunks" endpoint.
func NewUploadChunksHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		encodeError = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "upload_chunks")
		ctx = context.WithValue(ctx, goa.ServiceKey, "websocket")
		var err error
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &websocketsvc.UploadChunksEndpointInput{
			Stream: &UploadChunksServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *UploadChunksServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*UploadChunksServerStream)
			} else {
				stream = v.Stream.(*UploadChunksServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountUploadDocumentsHandler configures the mux to serve the "websocket"
// service "upload_documents" endpoint.
func MountUploadDocumentsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ws/upload_documents", f)
}

// NewUploadDocumentsHandler creates a HTTP handler which loads the HTTP
// request and calls the "websocket" service "upload_documents" endpoint.
func NewUploadDocumentsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		encodeError = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "upload_documents")
		ctx = context.WithValue(ctx, goa.ServiceKey, "websocket")
		var err error
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &websocketsvc.UploadDocumentsEndpointInput{
			Stream: &UploadDocumentsServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *UploadDocumentsServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*UploadDocumentsServerStream)
			} else {
				stream = v.Stream.(*UploadDocumentsServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountChatHandler configures the mux to serve the "websocket" service "chat"
// endpoint.
func MountChatHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ws/chat", f)
}

// NewChatHandler creates a HTTP handler which loads the HTTP request and calls
// the "websocket" service "chat" endpoint.
func NewChatHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		encodeError = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "chat")
		ctx = context.WithValue(ctx, goa.ServiceKey, "websocket")
		var err error
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &websocketsvc.ChatEndpointInput{
			Stream: &ChatServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *ChatServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*ChatServerStream)
			} else {
				stream = v.Stream.(*ChatServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountInteractiveChatHandler configures the mux to serve the "websocket"
// service "interactive_chat" endpoint.
func MountInteractiveChatHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ws/interactive_chat", f)
}

// NewInteractiveChatHandler creates a HTTP handler which loads the HTTP
// request and calls the "websocket" service "interactive_chat" endpoint.
func NewInteractiveChatHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		encodeError = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "interactive_chat")
		ctx = context.WithValue(ctx, goa.ServiceKey, "websocket")
		var err error
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &websocketsvc.InteractiveChatEndpointInput{
			Stream: &InteractiveChatServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			var stream *InteractiveChatServerStream
			if wrapper, ok := v.Stream.(interface{ Unwrap() any }); ok {
				stream = wrapper.Unwrap().(*InteractiveChatServerStream)
			} else {
				stream = v.Stream.(*InteractiveChatServerStream)
			}
			if stream != nil && stream.conn != nil {
				// Response writer has been hijacked, do not encode the error
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}
