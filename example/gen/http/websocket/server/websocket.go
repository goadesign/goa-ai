// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket WebSocket server streaming
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"
	"io"
	"net/http"
	"sync"
	"time"

	websocketsvc "example.com/assistant/gen/websocket"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "websocket" service.
type ConnConfigurer struct {
	UploadChunksFn    goahttp.ConnConfigureFunc
	UploadDocumentsFn goahttp.ConnConfigureFunc
	ChatFn            goahttp.ConnConfigureFunc
	InteractiveChatFn goahttp.ConnConfigureFunc
}

// UploadChunksServerStream implements the
// websocketsvc.UploadChunksServerStream interface.
type UploadChunksServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// UploadDocumentsServerStream implements the
// websocketsvc.UploadDocumentsServerStream interface.
type UploadDocumentsServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// ChatServerStream implements the websocketsvc.ChatServerStream interface.
type ChatServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// InteractiveChatServerStream implements the
// websocketsvc.InteractiveChatServerStream interface.
type InteractiveChatServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "websocket" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		UploadChunksFn:    fn,
		UploadDocumentsFn: fn,
		ChatFn:            fn,
		InteractiveChatFn: fn,
	}
}

// SendAndClose streams instances of "websocketsvc.UploadChunksResult" to the
// "upload_chunks" endpoint websocket connection and closes the connection.
func (s *UploadChunksServerStream) SendAndClose(v *websocketsvc.UploadChunksResult) error {
	defer s.conn.Close()
	res := v
	body := NewUploadChunksResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendAndCloseWithContext streams instances of
// "websocketsvc.UploadChunksResult" to the "upload_chunks" endpoint websocket
// connection with context and closes the connection.
func (s *UploadChunksServerStream) SendAndCloseWithContext(ctx context.Context, v *websocketsvc.UploadChunksResult) error {
	return s.SendAndClose(v)
}

// Recv reads instances of "websocketsvc.DocumentChunk" from the
// "upload_chunks" endpoint websocket connection.
func (s *UploadChunksServerStream) Recv() (*websocketsvc.DocumentChunk, error) {
	var (
		rv  *websocketsvc.DocumentChunk
		msg *UploadChunksStreamingBody
		err error
	)
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Recv().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return rv, err
	}
	if err = s.conn.ReadJSON(&msg); err != nil {
		return rv, err
	}
	if msg == nil {
		return rv, io.EOF
	}
	body := *msg
	err = ValidateUploadChunksStreamingBody(&body)
	if err != nil {
		return rv, err
	}
	return NewUploadChunksStreamingBody(msg), nil
}

// RecvWithContext reads instances of "websocketsvc.DocumentChunk" from the
// "upload_chunks" endpoint websocket connection with context.
func (s *UploadChunksServerStream) RecvWithContext(ctx context.Context) (*websocketsvc.DocumentChunk, error) {
	return s.Recv()
}

// SendAndClose streams instances of "websocketsvc.UploadDocumentsResult" to
// the "upload_documents" endpoint websocket connection and closes the
// connection.
func (s *UploadDocumentsServerStream) SendAndClose(v *websocketsvc.UploadDocumentsResult) error {
	defer s.conn.Close()
	res := v
	body := NewUploadDocumentsResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendAndCloseWithContext streams instances of
// "websocketsvc.UploadDocumentsResult" to the "upload_documents" endpoint
// websocket connection with context and closes the connection.
func (s *UploadDocumentsServerStream) SendAndCloseWithContext(ctx context.Context, v *websocketsvc.UploadDocumentsResult) error {
	return s.SendAndClose(v)
}

// Recv reads instances of "websocketsvc.DocumentChunk" from the
// "upload_documents" endpoint websocket connection.
func (s *UploadDocumentsServerStream) Recv() (*websocketsvc.DocumentChunk, error) {
	var (
		rv  *websocketsvc.DocumentChunk
		msg *UploadDocumentsStreamingBody
		err error
	)
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Recv().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return rv, err
	}
	if err = s.conn.ReadJSON(&msg); err != nil {
		return rv, err
	}
	if msg == nil {
		return rv, io.EOF
	}
	body := *msg
	err = ValidateUploadDocumentsStreamingBody(&body)
	if err != nil {
		return rv, err
	}
	return NewUploadDocumentsStreamingBody(msg), nil
}

// RecvWithContext reads instances of "websocketsvc.DocumentChunk" from the
// "upload_documents" endpoint websocket connection with context.
func (s *UploadDocumentsServerStream) RecvWithContext(ctx context.Context) (*websocketsvc.DocumentChunk, error) {
	return s.Recv()
}

// Send streams instances of "websocketsvc.ChatResponse" to the "chat" endpoint
// websocket connection.
func (s *ChatServerStream) Send(v *websocketsvc.ChatResponse) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewChatResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "websocketsvc.ChatResponse" to the
// "chat" endpoint websocket connection with context.
func (s *ChatServerStream) SendWithContext(ctx context.Context, v *websocketsvc.ChatResponse) error {
	return s.Send(v)
}

// Recv reads instances of "websocketsvc.ChatInput" from the "chat" endpoint
// websocket connection.
func (s *ChatServerStream) Recv() (*websocketsvc.ChatInput, error) {
	var (
		rv  *websocketsvc.ChatInput
		msg *ChatStreamingBody
		err error
	)
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Recv().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return rv, err
	}
	if err = s.conn.ReadJSON(&msg); err != nil {
		return rv, err
	}
	if msg == nil {
		return rv, io.EOF
	}
	body := *msg
	err = ValidateChatStreamingBody(&body)
	if err != nil {
		return rv, err
	}
	return NewChatStreamingBody(msg), nil
}

// RecvWithContext reads instances of "websocketsvc.ChatInput" from the "chat"
// endpoint websocket connection with context.
func (s *ChatServerStream) RecvWithContext(ctx context.Context) (*websocketsvc.ChatInput, error) {
	return s.Recv()
}

// Close closes the "chat" endpoint websocket connection.
func (s *ChatServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}

// Send streams instances of "websocketsvc.ChatResponse" to the
// "interactive_chat" endpoint websocket connection.
func (s *InteractiveChatServerStream) Send(v *websocketsvc.ChatResponse) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewInteractiveChatResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "websocketsvc.ChatResponse" to the
// "interactive_chat" endpoint websocket connection with context.
func (s *InteractiveChatServerStream) SendWithContext(ctx context.Context, v *websocketsvc.ChatResponse) error {
	return s.Send(v)
}

// Recv reads instances of "websocketsvc.ChatInput" from the "interactive_chat"
// endpoint websocket connection.
func (s *InteractiveChatServerStream) Recv() (*websocketsvc.ChatInput, error) {
	var (
		rv  *websocketsvc.ChatInput
		msg *InteractiveChatStreamingBody
		err error
	)
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Recv().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return rv, err
	}
	if err = s.conn.ReadJSON(&msg); err != nil {
		return rv, err
	}
	if msg == nil {
		return rv, io.EOF
	}
	body := *msg
	err = ValidateInteractiveChatStreamingBody(&body)
	if err != nil {
		return rv, err
	}
	return NewInteractiveChatStreamingBody(msg), nil
}

// RecvWithContext reads instances of "websocketsvc.ChatInput" from the
// "interactive_chat" endpoint websocket connection with context.
func (s *InteractiveChatServerStream) RecvWithContext(ctx context.Context) (*websocketsvc.ChatInput, error) {
	return s.Recv()
}

// Close closes the "interactive_chat" endpoint websocket connection.
func (s *InteractiveChatServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}
