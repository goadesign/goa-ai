// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant HTTP client CLI support package
//
// Command:
// $ goa gen example.com/assistant/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	streamingc "example.com/assistant/gen/http/streaming/client"
	websocketsvcc "example.com/assistant/gen/http/websocket/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"websocket (upload-chunks|upload-documents|chat|interactive-chat)",
		"streaming (stream-events|stream-logs|monitor-resource-changes|flexible-data)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` websocket upload-chunks` + "\n" +
		os.Args[0] + ` streaming stream-events --category "system" --filter "Quia provident officia."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	websocketConfigurer *websocketsvcc.ConnConfigurer,
	streamingConfigurer *streamingc.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		websocketFlags = flag.NewFlagSet("websocket", flag.ContinueOnError)

		websocketUploadChunksFlags = flag.NewFlagSet("upload-chunks", flag.ExitOnError)

		websocketUploadDocumentsFlags = flag.NewFlagSet("upload-documents", flag.ExitOnError)

		websocketChatFlags = flag.NewFlagSet("chat", flag.ExitOnError)

		websocketInteractiveChatFlags = flag.NewFlagSet("interactive-chat", flag.ExitOnError)

		streamingFlags = flag.NewFlagSet("streaming", flag.ContinueOnError)

		streamingStreamEventsFlags        = flag.NewFlagSet("stream-events", flag.ExitOnError)
		streamingStreamEventsCategoryFlag = streamingStreamEventsFlags.String("category", "REQUIRED", "Event category")
		streamingStreamEventsFilterFlag   = streamingStreamEventsFlags.String("filter", "", "")

		streamingStreamLogsFlags     = flag.NewFlagSet("stream-logs", flag.ExitOnError)
		streamingStreamLogsLevelFlag = streamingStreamLogsFlags.String("level", "info", "")

		streamingMonitorResourceChangesFlags            = flag.NewFlagSet("monitor-resource-changes", flag.ExitOnError)
		streamingMonitorResourceChangesResourceTypeFlag = streamingMonitorResourceChangesFlags.String("resource-type", "REQUIRED", "Type of resource to monitor")
		streamingMonitorResourceChangesFilterFlag       = streamingMonitorResourceChangesFlags.String("filter", "", "")

		streamingFlexibleDataFlags          = flag.NewFlagSet("flexible-data", flag.ExitOnError)
		streamingFlexibleDataDataTypeFlag   = streamingFlexibleDataFlags.String("data-type", "REQUIRED", "Type of data")
		streamingFlexibleDataStreaming2Flag = streamingFlexibleDataFlags.String("streaming2", "true", "")
	)
	websocketFlags.Usage = websocketUsage
	websocketUploadChunksFlags.Usage = websocketUploadChunksUsage
	websocketUploadDocumentsFlags.Usage = websocketUploadDocumentsUsage
	websocketChatFlags.Usage = websocketChatUsage
	websocketInteractiveChatFlags.Usage = websocketInteractiveChatUsage

	streamingFlags.Usage = streamingUsage
	streamingStreamEventsFlags.Usage = streamingStreamEventsUsage
	streamingStreamLogsFlags.Usage = streamingStreamLogsUsage
	streamingMonitorResourceChangesFlags.Usage = streamingMonitorResourceChangesUsage
	streamingFlexibleDataFlags.Usage = streamingFlexibleDataUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "websocket":
			svcf = websocketFlags
		case "streaming":
			svcf = streamingFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "websocket":
			switch epn {
			case "upload-chunks":
				epf = websocketUploadChunksFlags

			case "upload-documents":
				epf = websocketUploadDocumentsFlags

			case "chat":
				epf = websocketChatFlags

			case "interactive-chat":
				epf = websocketInteractiveChatFlags

			}

		case "streaming":
			switch epn {
			case "stream-events":
				epf = streamingStreamEventsFlags

			case "stream-logs":
				epf = streamingStreamLogsFlags

			case "monitor-resource-changes":
				epf = streamingMonitorResourceChangesFlags

			case "flexible-data":
				epf = streamingFlexibleDataFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "websocket":
			c := websocketsvcc.NewClient(scheme, host, doer, enc, dec, restore, dialer, websocketConfigurer)
			switch epn {
			case "upload-chunks":
				endpoint = c.UploadChunks()
			case "upload-documents":
				endpoint = c.UploadDocuments()
			case "chat":
				endpoint = c.Chat()
			case "interactive-chat":
				endpoint = c.InteractiveChat()
			}
		case "streaming":
			c := streamingc.NewClient(scheme, host, doer, enc, dec, restore, dialer, streamingConfigurer)
			switch epn {
			case "stream-events":
				endpoint = c.StreamEvents()
				data, err = streamingc.BuildStreamEventsPayload(*streamingStreamEventsCategoryFlag, *streamingStreamEventsFilterFlag)
			case "stream-logs":
				endpoint = c.StreamLogs()
				data, err = streamingc.BuildStreamLogsPayload(*streamingStreamLogsLevelFlag)
			case "monitor-resource-changes":
				endpoint = c.MonitorResourceChanges()
				data, err = streamingc.BuildMonitorResourceChangesPayload(*streamingMonitorResourceChangesResourceTypeFlag, *streamingMonitorResourceChangesFilterFlag)
			case "flexible-data":
				endpoint = c.FlexibleData()
				data, err = streamingc.BuildFlexibleDataPayload(*streamingFlexibleDataDataTypeFlag, *streamingFlexibleDataStreaming2Flag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// websocketUsage displays the usage of the websocket command and its
// subcommands.
func websocketUsage() {
	fmt.Fprintln(os.Stderr, `Service for testing WebSocket streaming`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] websocket COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    upload-chunks: Upload data chunks via client stream`)
	fmt.Fprintln(os.Stderr, `    upload-documents: Upload multiple documents via client stream`)
	fmt.Fprintln(os.Stderr, `    chat: Interactive chat with bidirectional streaming`)
	fmt.Fprintln(os.Stderr, `    interactive-chat: Extended interactive chat with bidirectional streaming`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s websocket COMMAND --help\n", os.Args[0])
}
func websocketUploadChunksUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] websocket upload-chunks", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Upload data chunks via client stream`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `websocket upload-chunks`)
}

func websocketUploadDocumentsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] websocket upload-documents", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Upload multiple documents via client stream`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `websocket upload-documents`)
}

func websocketChatUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] websocket chat", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Interactive chat with bidirectional streaming`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `websocket chat`)
}

func websocketInteractiveChatUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] websocket interactive-chat", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Extended interactive chat with bidirectional streaming`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `websocket interactive-chat`)
}

// streamingUsage displays the usage of the streaming command and its
// subcommands.
func streamingUsage() {
	fmt.Fprintln(os.Stderr, `Service for testing HTTP streaming features`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] streaming COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    stream-events: Stream events from server to client using SSE`)
	fmt.Fprintln(os.Stderr, `    stream-logs: Stream logs using SSE`)
	fmt.Fprintln(os.Stderr, `    monitor-resource-changes: Monitor resource changes with server streaming`)
	fmt.Fprintln(os.Stderr, `    flexible-data: Flexible data streaming`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s streaming COMMAND --help\n", os.Args[0])
}
func streamingStreamEventsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] streaming stream-events", os.Args[0])
	fmt.Fprint(os.Stderr, " -category STRING")
	fmt.Fprint(os.Stderr, " -filter STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Stream events from server to client using SSE`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -category STRING: Event category`)
	fmt.Fprintln(os.Stderr, `    -filter STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `streaming stream-events --category "system" --filter "Quia provident officia."`)
}

func streamingStreamLogsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] streaming stream-logs", os.Args[0])
	fmt.Fprint(os.Stderr, " -level STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Stream logs using SSE`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -level STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `streaming stream-logs --level "info"`)
}

func streamingMonitorResourceChangesUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] streaming monitor-resource-changes", os.Args[0])
	fmt.Fprint(os.Stderr, " -resource-type STRING")
	fmt.Fprint(os.Stderr, " -filter STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Monitor resource changes with server streaming`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -resource-type STRING: Type of resource to monitor`)
	fmt.Fprintln(os.Stderr, `    -filter STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `streaming monitor-resource-changes --resource-type "Et nisi numquam sit iusto." --filter "Vitae consectetur tenetur tempore nesciunt odit autem."`)
}

func streamingFlexibleDataUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] streaming flexible-data", os.Args[0])
	fmt.Fprint(os.Stderr, " -data-type STRING")
	fmt.Fprint(os.Stderr, " -streaming2 BOOL")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Flexible data streaming`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -data-type STRING: Type of data`)
	fmt.Fprintln(os.Stderr, `    -streaming2 BOOL: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `streaming flexible-data --data-type "Cupiditate aut qui quas qui vitae." --streaming2 true`)
}
