// Code generated with goa v3.22.2, DO NOT EDIT.
//
// grpcstream protocol buffer definition
//
// Command:
// $ goa gen example.com/assistant/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: goagen_assistant_grpcstream.proto

package grpcstreampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Grpcstream_ListItems_FullMethodName      = "/grpcstream.Grpcstream/ListItems"
	Grpcstream_CollectMetrics_FullMethodName = "/grpcstream.Grpcstream/CollectMetrics"
	Grpcstream_Echo_FullMethodName           = "/grpcstream.Grpcstream/Echo"
)

// GrpcstreamClient is the client API for Grpcstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for testing gRPC streaming
type GrpcstreamClient interface {
	// List items with server streaming
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListItemsResponse], error)
	// Collect metrics via client stream
	CollectMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CollectMetricsStreamingRequest, CollectMetricsResponse], error)
	// Echo service with bidirectional streaming
	Echo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoStreamingRequest, EchoResponse], error)
}

type grpcstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcstreamClient(cc grpc.ClientConnInterface) GrpcstreamClient {
	return &grpcstreamClient{cc}
}

func (c *grpcstreamClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListItemsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Grpcstream_ServiceDesc.Streams[0], Grpcstream_ListItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListItemsRequest, ListItemsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grpcstream_ListItemsClient = grpc.ServerStreamingClient[ListItemsResponse]

func (c *grpcstreamClient) CollectMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CollectMetricsStreamingRequest, CollectMetricsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Grpcstream_ServiceDesc.Streams[1], Grpcstream_CollectMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CollectMetricsStreamingRequest, CollectMetricsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grpcstream_CollectMetricsClient = grpc.ClientStreamingClient[CollectMetricsStreamingRequest, CollectMetricsResponse]

func (c *grpcstreamClient) Echo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoStreamingRequest, EchoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Grpcstream_ServiceDesc.Streams[2], Grpcstream_Echo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoStreamingRequest, EchoResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grpcstream_EchoClient = grpc.BidiStreamingClient[EchoStreamingRequest, EchoResponse]

// GrpcstreamServer is the server API for Grpcstream service.
// All implementations must embed UnimplementedGrpcstreamServer
// for forward compatibility.
//
// Service for testing gRPC streaming
type GrpcstreamServer interface {
	// List items with server streaming
	ListItems(*ListItemsRequest, grpc.ServerStreamingServer[ListItemsResponse]) error
	// Collect metrics via client stream
	CollectMetrics(grpc.ClientStreamingServer[CollectMetricsStreamingRequest, CollectMetricsResponse]) error
	// Echo service with bidirectional streaming
	Echo(grpc.BidiStreamingServer[EchoStreamingRequest, EchoResponse]) error
	mustEmbedUnimplementedGrpcstreamServer()
}

// UnimplementedGrpcstreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcstreamServer struct{}

func (UnimplementedGrpcstreamServer) ListItems(*ListItemsRequest, grpc.ServerStreamingServer[ListItemsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedGrpcstreamServer) CollectMetrics(grpc.ClientStreamingServer[CollectMetricsStreamingRequest, CollectMetricsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CollectMetrics not implemented")
}
func (UnimplementedGrpcstreamServer) Echo(grpc.BidiStreamingServer[EchoStreamingRequest, EchoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedGrpcstreamServer) mustEmbedUnimplementedGrpcstreamServer() {}
func (UnimplementedGrpcstreamServer) testEmbeddedByValue()                    {}

// UnsafeGrpcstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcstreamServer will
// result in compilation errors.
type UnsafeGrpcstreamServer interface {
	mustEmbedUnimplementedGrpcstreamServer()
}

func RegisterGrpcstreamServer(s grpc.ServiceRegistrar, srv GrpcstreamServer) {
	// If the following call pancis, it indicates UnimplementedGrpcstreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Grpcstream_ServiceDesc, srv)
}

func _Grpcstream_ListItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcstreamServer).ListItems(m, &grpc.GenericServerStream[ListItemsRequest, ListItemsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grpcstream_ListItemsServer = grpc.ServerStreamingServer[ListItemsResponse]

func _Grpcstream_CollectMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcstreamServer).CollectMetrics(&grpc.GenericServerStream[CollectMetricsStreamingRequest, CollectMetricsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grpcstream_CollectMetricsServer = grpc.ClientStreamingServer[CollectMetricsStreamingRequest, CollectMetricsResponse]

func _Grpcstream_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcstreamServer).Echo(&grpc.GenericServerStream[EchoStreamingRequest, EchoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grpcstream_EchoServer = grpc.BidiStreamingServer[EchoStreamingRequest, EchoResponse]

// Grpcstream_ServiceDesc is the grpc.ServiceDesc for Grpcstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpcstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcstream.Grpcstream",
	HandlerType: (*GrpcstreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListItems",
			Handler:       _Grpcstream_ListItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CollectMetrics",
			Handler:       _Grpcstream_CollectMetrics_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Echo",
			Handler:       _Grpcstream_Echo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "goagen_assistant_grpcstream.proto",
}
