// Code generated by goa v3.22.2, DO NOT EDIT.
//
// grpcstream gRPC client
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"

	grpcstreampb "example.com/assistant/gen/grpc/grpcstream/pb"
	grpcstream "example.com/assistant/gen/grpcstream"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli grpcstreampb.GrpcstreamClient
	opts    []grpc.CallOption
}

// ListItemsClientStream implements the grpcstream.ListItemsClientStream
// interface.
type ListItemsClientStream struct {
	stream grpcstreampb.Grpcstream_ListItemsClient
}

// CollectMetricsClientStream implements the
// grpcstream.CollectMetricsClientStream interface.
type CollectMetricsClientStream struct {
	stream grpcstreampb.Grpcstream_CollectMetricsClient
}

// EchoClientStream implements the grpcstream.EchoClientStream interface.
type EchoClientStream struct {
	stream grpcstreampb.Grpcstream_EchoClient
}

// NewClient instantiates gRPC client for all the grpcstream service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: grpcstreampb.NewGrpcstreamClient(cc),
		opts:    opts,
	}
}

// ListItems calls the "ListItems" function in grpcstreampb.GrpcstreamClient
// interface.
func (c *Client) ListItems() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildListItemsFunc(c.grpccli, c.opts...),
			EncodeListItemsRequest,
			DecodeListItemsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault("%s", err.Error())
		}
		return res, nil
	}
}

// CollectMetrics calls the "CollectMetrics" function in
// grpcstreampb.GrpcstreamClient interface.
func (c *Client) CollectMetrics() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildCollectMetricsFunc(c.grpccli, c.opts...),
			nil,
			DecodeCollectMetricsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault("%s", err.Error())
		}
		return res, nil
	}
}

// Echo calls the "Echo" function in grpcstreampb.GrpcstreamClient interface.
func (c *Client) Echo() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildEchoFunc(c.grpccli, c.opts...),
			nil,
			DecodeEchoResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault("%s", err.Error())
		}
		return res, nil
	}
}

// Recv reads instances of "grpcstreampb.ListItemsResponse" from the
// "list_items" endpoint gRPC stream.
func (s *ListItemsClientStream) Recv() (*grpcstream.ListItemsResult, error) {
	var res *grpcstream.ListItemsResult
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewListItemsResponseListItemsResult(v), nil
}

// RecvWithContext reads instances of "grpcstreampb.ListItemsResponse" from the
// "list_items" endpoint gRPC stream with context.
func (s *ListItemsClientStream) RecvWithContext(ctx context.Context) (*grpcstream.ListItemsResult, error) {
	return s.Recv()
}

// CloseAndRecv reads instances of "grpcstreampb.CollectMetricsResponse" from
// the "collect_metrics" endpoint gRPC stream.
func (s *CollectMetricsClientStream) CloseAndRecv() (*grpcstream.CollectMetricsResult, error) {
	var res *grpcstream.CollectMetricsResult
	v, err := s.stream.CloseAndRecv()
	if err != nil {
		return res, err
	}
	return NewCollectMetricsResponseCollectMetricsResult(v), nil
}

// CloseAndRecvWithContext reads instances of
// "grpcstreampb.CollectMetricsResponse" from the "collect_metrics" endpoint
// gRPC stream with context.
func (s *CollectMetricsClientStream) CloseAndRecvWithContext(ctx context.Context) (*grpcstream.CollectMetricsResult, error) {
	return s.CloseAndRecv()
}

// Send streams instances of "grpcstreampb.CollectMetricsStreamingRequest" to
// the "collect_metrics" endpoint gRPC stream.
func (s *CollectMetricsClientStream) Send(res *grpcstream.CollectMetricsStreamingPayload) error {
	v := NewProtoCollectMetricsStreamingPayloadCollectMetricsStreamingRequest(res)
	return s.stream.Send(v)
}

// SendWithContext streams instances of
// "grpcstreampb.CollectMetricsStreamingRequest" to the "collect_metrics"
// endpoint gRPC stream with context.
func (s *CollectMetricsClientStream) SendWithContext(ctx context.Context, res *grpcstream.CollectMetricsStreamingPayload) error {
	return s.Send(res)
}

// Recv reads instances of "grpcstreampb.EchoResponse" from the "echo" endpoint
// gRPC stream.
func (s *EchoClientStream) Recv() (*grpcstream.EchoResult, error) {
	var res *grpcstream.EchoResult
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewEchoResponseEchoResult(v), nil
}

// RecvWithContext reads instances of "grpcstreampb.EchoResponse" from the
// "echo" endpoint gRPC stream with context.
func (s *EchoClientStream) RecvWithContext(ctx context.Context) (*grpcstream.EchoResult, error) {
	return s.Recv()
}

// Send streams instances of "grpcstreampb.EchoStreamingRequest" to the "echo"
// endpoint gRPC stream.
func (s *EchoClientStream) Send(res *grpcstream.EchoStreamingPayload) error {
	v := NewProtoEchoStreamingPayloadEchoStreamingRequest(res)
	return s.stream.Send(v)
}

// SendWithContext streams instances of "grpcstreampb.EchoStreamingRequest" to
// the "echo" endpoint gRPC stream with context.
func (s *EchoClientStream) SendWithContext(ctx context.Context, res *grpcstream.EchoStreamingPayload) error {
	return s.Send(res)
}

func (s *EchoClientStream) Close() error {
	// Close the send direction of the stream
	return s.stream.CloseSend()
}
