// Code generated by goa v3.22.2, DO NOT EDIT.
//
// grpcstream gRPC client encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"context"

	grpcstreampb "example.com/assistant/gen/grpc/grpcstream/pb"
	grpcstream "example.com/assistant/gen/grpcstream"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListItemsFunc builds the remote method to invoke for "grpcstream"
// service "list_items" endpoint.
func BuildListItemsFunc(grpccli grpcstreampb.GrpcstreamClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ListItems(ctx, reqpb.(*grpcstreampb.ListItemsRequest), opts...)
		}
		return grpccli.ListItems(ctx, &grpcstreampb.ListItemsRequest{}, opts...)
	}
}

// EncodeListItemsRequest encodes requests sent to grpcstream list_items
// endpoint.
func EncodeListItemsRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*grpcstream.ListItemsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("grpcstream", "list_items", "*grpcstream.ListItemsPayload", v)
	}
	return NewProtoListItemsRequest(payload), nil
}

// DecodeListItemsResponse decodes responses from the grpcstream list_items
// endpoint.
func DecodeListItemsResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &ListItemsClientStream{
		stream: v.(grpcstreampb.Grpcstream_ListItemsClient),
	}, nil
}

// BuildCollectMetricsFunc builds the remote method to invoke for "grpcstream"
// service "collect_metrics" endpoint.
func BuildCollectMetricsFunc(grpccli grpcstreampb.GrpcstreamClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CollectMetrics(ctx, opts...)
		}
		return grpccli.CollectMetrics(ctx, opts...)
	}
}

// DecodeCollectMetricsResponse decodes responses from the grpcstream
// collect_metrics endpoint.
func DecodeCollectMetricsResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &CollectMetricsClientStream{
		stream: v.(grpcstreampb.Grpcstream_CollectMetricsClient),
	}, nil
}

// BuildEchoFunc builds the remote method to invoke for "grpcstream" service
// "echo" endpoint.
func BuildEchoFunc(grpccli grpcstreampb.GrpcstreamClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Echo(ctx, opts...)
		}
		return grpccli.Echo(ctx, opts...)
	}
}

// DecodeEchoResponse decodes responses from the grpcstream echo endpoint.
func DecodeEchoResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &EchoClientStream{
		stream: v.(grpcstreampb.Grpcstream_EchoClient),
	}, nil
}
