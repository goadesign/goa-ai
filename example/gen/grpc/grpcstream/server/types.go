// Code generated by goa v3.22.2, DO NOT EDIT.
//
// grpcstream gRPC server types
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	grpcstreampb "example.com/assistant/gen/grpc/grpcstream/pb"
	grpcstream "example.com/assistant/gen/grpcstream"
)

// NewListItemsPayload builds the payload of the "list_items" endpoint of the
// "grpcstream" service from the gRPC request type.
func NewListItemsPayload(message *grpcstreampb.ListItemsRequest) *grpcstream.ListItemsPayload {
	v := &grpcstream.ListItemsPayload{
		Filter: message.Filter,
	}
	return v
}

// NewProtoListItemsResponse builds the gRPC response type from the result of
// the "list_items" endpoint of the "grpcstream" service.
func NewProtoListItemsResponse(result *grpcstream.ListItemsResult) *grpcstreampb.ListItemsResponse {
	message := &grpcstreampb.ListItemsResponse{
		Id:   result.ID,
		Name: result.Name,
	}
	return message
}

func NewProtoListItemsResultListItemsResponse(result *grpcstream.ListItemsResult) *grpcstreampb.ListItemsResponse {
	v := &grpcstreampb.ListItemsResponse{
		Id:   result.ID,
		Name: result.Name,
	}
	return v
}

// NewProtoCollectMetricsResponse builds the gRPC response type from the result
// of the "collect_metrics" endpoint of the "grpcstream" service.
func NewProtoCollectMetricsResponse(result *grpcstream.CollectMetricsResult) *grpcstreampb.CollectMetricsResponse {
	message := &grpcstreampb.CollectMetricsResponse{
		Count:   int32(result.Count),
		Average: result.Average,
	}
	return message
}

func NewProtoCollectMetricsResultCollectMetricsResponse(result *grpcstream.CollectMetricsResult) *grpcstreampb.CollectMetricsResponse {
	v := &grpcstreampb.CollectMetricsResponse{
		Count:   int32(result.Count),
		Average: result.Average,
	}
	return v
}

func NewCollectMetricsStreamingRequestCollectMetricsStreamingPayload(v *grpcstreampb.CollectMetricsStreamingRequest) *grpcstream.CollectMetricsStreamingPayload {
	spayload := &grpcstream.CollectMetricsStreamingPayload{
		Metric: v.Metric,
		Value:  v.Value,
	}
	return spayload
}

// NewProtoEchoResponse builds the gRPC response type from the result of the
// "echo" endpoint of the "grpcstream" service.
func NewProtoEchoResponse(result *grpcstream.EchoResult) *grpcstreampb.EchoResponse {
	message := &grpcstreampb.EchoResponse{
		Echo:      result.Echo,
		Timestamp: result.Timestamp,
	}
	return message
}

func NewProtoEchoResultEchoResponse(result *grpcstream.EchoResult) *grpcstreampb.EchoResponse {
	v := &grpcstreampb.EchoResponse{
		Echo:      result.Echo,
		Timestamp: result.Timestamp,
	}
	return v
}

func NewEchoStreamingRequestEchoStreamingPayload(v *grpcstreampb.EchoStreamingRequest) *grpcstream.EchoStreamingPayload {
	spayload := &grpcstream.EchoStreamingPayload{
		Message: v.Message_,
	}
	return spayload
}
