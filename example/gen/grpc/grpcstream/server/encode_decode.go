// Code generated by goa v3.22.2, DO NOT EDIT.
//
// grpcstream gRPC server encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"

	grpcstreampb "example.com/assistant/gen/grpc/grpcstream/pb"
	grpcstream "example.com/assistant/gen/grpcstream"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeListItemsResponse encodes responses from the "grpcstream" service
// "list_items" endpoint.
func EncodeListItemsResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*grpcstream.ListItemsResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("grpcstream", "list_items", "*grpcstream.ListItemsResult", v)
	}
	resp := NewProtoListItemsResponse(result)
	return resp, nil
}

// DecodeListItemsRequest decodes requests sent to "grpcstream" service
// "list_items" endpoint.
func DecodeListItemsRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *grpcstreampb.ListItemsRequest
		ok      bool
	)
	{
		if message, ok = v.(*grpcstreampb.ListItemsRequest); !ok {
			return nil, goagrpc.ErrInvalidType("grpcstream", "list_items", "*grpcstreampb.ListItemsRequest", v)
		}
	}
	var payload *grpcstream.ListItemsPayload
	{
		payload = NewListItemsPayload(message)
	}
	return payload, nil
}

// EncodeCollectMetricsResponse encodes responses from the "grpcstream" service
// "collect_metrics" endpoint.
func EncodeCollectMetricsResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*grpcstream.CollectMetricsResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("grpcstream", "collect_metrics", "*grpcstream.CollectMetricsResult", v)
	}
	resp := NewProtoCollectMetricsResponse(result)
	return resp, nil
}

// EncodeEchoResponse encodes responses from the "grpcstream" service "echo"
// endpoint.
func EncodeEchoResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*grpcstream.EchoResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("grpcstream", "echo", "*grpcstream.EchoResult", v)
	}
	resp := NewProtoEchoResponse(result)
	return resp, nil
}
