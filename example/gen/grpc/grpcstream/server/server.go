// Code generated by goa v3.22.2, DO NOT EDIT.
//
// grpcstream gRPC server
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"context"

	grpcstreampb "example.com/assistant/gen/grpc/grpcstream/pb"
	grpcstream "example.com/assistant/gen/grpcstream"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the grpcstreampb.GrpcstreamServer interface.
type Server struct {
	ListItemsH      goagrpc.StreamHandler
	CollectMetricsH goagrpc.StreamHandler
	EchoH           goagrpc.StreamHandler
	grpcstreampb.UnimplementedGrpcstreamServer
}

// ListItemsServerStream implements the grpcstream.ListItemsServerStream
// interface.
type ListItemsServerStream struct {
	stream grpcstreampb.Grpcstream_ListItemsServer
}

// CollectMetricsServerStream implements the
// grpcstream.CollectMetricsServerStream interface.
type CollectMetricsServerStream struct {
	stream grpcstreampb.Grpcstream_CollectMetricsServer
}

// EchoServerStream implements the grpcstream.EchoServerStream interface.
type EchoServerStream struct {
	stream grpcstreampb.Grpcstream_EchoServer
}

// New instantiates the server struct with the grpcstream service endpoints.
func New(e *grpcstream.Endpoints, sh goagrpc.StreamHandler) *Server {
	return &Server{
		ListItemsH:      NewListItemsHandler(e.ListItems, sh),
		CollectMetricsH: NewCollectMetricsHandler(e.CollectMetrics, sh),
		EchoH:           NewEchoHandler(e.Echo, sh),
	}
}

// NewListItemsHandler creates a gRPC handler which serves the "grpcstream"
// service "list_items" endpoint.
func NewListItemsHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeListItemsRequest)
	}
	return h
}

// ListItems implements the "ListItems" method in grpcstreampb.GrpcstreamServer
// interface.
func (s *Server) ListItems(message *grpcstreampb.ListItemsRequest, stream grpcstreampb.Grpcstream_ListItemsServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "list_items")
	ctx = context.WithValue(ctx, goa.ServiceKey, "grpcstream")
	p, err := s.ListItemsH.Decode(ctx, message)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &grpcstream.ListItemsEndpointInput{
		Stream:  &ListItemsServerStream{stream: stream},
		Payload: p.(*grpcstream.ListItemsPayload),
	}
	err = s.ListItemsH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewCollectMetricsHandler creates a gRPC handler which serves the
// "grpcstream" service "collect_metrics" endpoint.
func NewCollectMetricsHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, nil)
	}
	return h
}

// CollectMetrics implements the "CollectMetrics" method in
// grpcstreampb.GrpcstreamServer interface.
func (s *Server) CollectMetrics(stream grpcstreampb.Grpcstream_CollectMetricsServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "collect_metrics")
	ctx = context.WithValue(ctx, goa.ServiceKey, "grpcstream")
	_, err := s.CollectMetricsH.Decode(ctx, nil)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &grpcstream.CollectMetricsEndpointInput{
		Stream: &CollectMetricsServerStream{stream: stream},
	}
	err = s.CollectMetricsH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewEchoHandler creates a gRPC handler which serves the "grpcstream" service
// "echo" endpoint.
func NewEchoHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, nil)
	}
	return h
}

// Echo implements the "Echo" method in grpcstreampb.GrpcstreamServer interface.
func (s *Server) Echo(stream grpcstreampb.Grpcstream_EchoServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "echo")
	ctx = context.WithValue(ctx, goa.ServiceKey, "grpcstream")
	_, err := s.EchoH.Decode(ctx, nil)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &grpcstream.EchoEndpointInput{
		Stream: &EchoServerStream{stream: stream},
	}
	err = s.EchoH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// Send streams instances of "grpcstreampb.ListItemsResponse" to the
// "list_items" endpoint gRPC stream.
func (s *ListItemsServerStream) Send(res *grpcstream.ListItemsResult) error {
	v := NewProtoListItemsResultListItemsResponse(res)
	return s.stream.Send(v)
}

// SendWithContext streams instances of "grpcstreampb.ListItemsResponse" to the
// "list_items" endpoint gRPC stream with context.
func (s *ListItemsServerStream) SendWithContext(ctx context.Context, res *grpcstream.ListItemsResult) error {
	return s.Send(res)
}

func (s *ListItemsServerStream) Close() error {
	// nothing to do here
	return nil
}

// SendAndClose streams instances of "grpcstreampb.CollectMetricsResponse" to
// the "collect_metrics" endpoint gRPC stream.
func (s *CollectMetricsServerStream) SendAndClose(res *grpcstream.CollectMetricsResult) error {
	v := NewProtoCollectMetricsResultCollectMetricsResponse(res)
	return s.stream.SendAndClose(v)
}

// SendAndCloseWithContext streams instances of
// "grpcstreampb.CollectMetricsResponse" to the "collect_metrics" endpoint gRPC
// stream with context.
func (s *CollectMetricsServerStream) SendAndCloseWithContext(ctx context.Context, res *grpcstream.CollectMetricsResult) error {
	return s.SendAndClose(res)
}

// Recv reads instances of "grpcstreampb.CollectMetricsStreamingRequest" from
// the "collect_metrics" endpoint gRPC stream.
func (s *CollectMetricsServerStream) Recv() (*grpcstream.CollectMetricsStreamingPayload, error) {
	var res *grpcstream.CollectMetricsStreamingPayload
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewCollectMetricsStreamingRequestCollectMetricsStreamingPayload(v), nil
}

// RecvWithContext reads instances of
// "grpcstreampb.CollectMetricsStreamingRequest" from the "collect_metrics"
// endpoint gRPC stream with context.
func (s *CollectMetricsServerStream) RecvWithContext(ctx context.Context) (*grpcstream.CollectMetricsStreamingPayload, error) {
	return s.Recv()
}

// Send streams instances of "grpcstreampb.EchoResponse" to the "echo" endpoint
// gRPC stream.
func (s *EchoServerStream) Send(res *grpcstream.EchoResult) error {
	v := NewProtoEchoResultEchoResponse(res)
	return s.stream.Send(v)
}

// SendWithContext streams instances of "grpcstreampb.EchoResponse" to the
// "echo" endpoint gRPC stream with context.
func (s *EchoServerStream) SendWithContext(ctx context.Context, res *grpcstream.EchoResult) error {
	return s.Send(res)
}

// Recv reads instances of "grpcstreampb.EchoStreamingRequest" from the "echo"
// endpoint gRPC stream.
func (s *EchoServerStream) Recv() (*grpcstream.EchoStreamingPayload, error) {
	var res *grpcstream.EchoStreamingPayload
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewEchoStreamingRequestEchoStreamingPayload(v), nil
}

// RecvWithContext reads instances of "grpcstreampb.EchoStreamingRequest" from
// the "echo" endpoint gRPC stream with context.
func (s *EchoServerStream) RecvWithContext(ctx context.Context) (*grpcstream.EchoStreamingPayload, error) {
	return s.Recv()
}

func (s *EchoServerStream) Close() error {
	// nothing to do here
	return nil
}
