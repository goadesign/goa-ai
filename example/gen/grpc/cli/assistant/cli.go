// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant gRPC client CLI support package
//
// Command:
// $ goa gen example.com/assistant/design

package cli

import (
	"flag"
	"fmt"
	"os"

	grpcstreamc "example.com/assistant/gen/grpc/grpcstream/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"grpcstream (list-items|collect-metrics|echo)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` grpcstream list-items --message '{
      "filter": "Voluptatem quia dolorem quo excepturi earum."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		grpcstreamFlags = flag.NewFlagSet("grpcstream", flag.ContinueOnError)

		grpcstreamListItemsFlags       = flag.NewFlagSet("list-items", flag.ExitOnError)
		grpcstreamListItemsMessageFlag = grpcstreamListItemsFlags.String("message", "", "")

		grpcstreamCollectMetricsFlags = flag.NewFlagSet("collect-metrics", flag.ExitOnError)

		grpcstreamEchoFlags = flag.NewFlagSet("echo", flag.ExitOnError)
	)
	grpcstreamFlags.Usage = grpcstreamUsage
	grpcstreamListItemsFlags.Usage = grpcstreamListItemsUsage
	grpcstreamCollectMetricsFlags.Usage = grpcstreamCollectMetricsUsage
	grpcstreamEchoFlags.Usage = grpcstreamEchoUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "grpcstream":
			svcf = grpcstreamFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "grpcstream":
			switch epn {
			case "list-items":
				epf = grpcstreamListItemsFlags

			case "collect-metrics":
				epf = grpcstreamCollectMetricsFlags

			case "echo":
				epf = grpcstreamEchoFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "grpcstream":
			c := grpcstreamc.NewClient(cc, opts...)
			switch epn {
			case "list-items":
				endpoint = c.ListItems()
				data, err = grpcstreamc.BuildListItemsPayload(*grpcstreamListItemsMessageFlag)
			case "collect-metrics":
				endpoint = c.CollectMetrics()
			case "echo":
				endpoint = c.Echo()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// grpcstreamUsage displays the usage of the grpcstream command and its
// subcommands.
func grpcstreamUsage() {
	fmt.Fprintln(os.Stderr, `Service for testing gRPC streaming`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] grpcstream COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    list-items: List items with server streaming`)
	fmt.Fprintln(os.Stderr, `    collect-metrics: Collect metrics via client stream`)
	fmt.Fprintln(os.Stderr, `    echo: Echo service with bidirectional streaming`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s grpcstream COMMAND --help\n", os.Args[0])
}
func grpcstreamListItemsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] grpcstream list-items", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List items with server streaming`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `grpcstream list-items --message '{
      "filter": "Voluptatem quia dolorem quo excepturi earum."
   }'`)
}

func grpcstreamCollectMetricsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] grpcstream collect-metrics", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Collect metrics via client stream`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `grpcstream collect-metrics`)
}

func grpcstreamEchoUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] grpcstream echo", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Echo service with bidirectional streaming`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `grpcstream echo`)
}
