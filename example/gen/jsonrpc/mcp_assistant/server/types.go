// Code generated by goa v3.22.2, DO NOT EDIT.
//
// mcp_assistant JSON-RPC server types
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"encoding/json"

	mcpassistant "example.com/assistant/gen/mcp_assistant"
	goa "goa.design/goa/v3/pkg"
)

// InitializeRequestBody is the type of the "mcp_assistant" service
// "initialize" endpoint HTTP request body.
type InitializeRequestBody struct {
	// MCP protocol version
	ProtocolVersion *string `form:"protocolVersion,omitempty" json:"protocolVersion,omitempty" xml:"protocolVersion,omitempty"`
	// Client information
	ClientInfo *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody `form:"clientInfo,omitempty" json:"clientInfo,omitempty" xml:"clientInfo,omitempty"`
}

// ToolsListRequestBody is the type of the "mcp_assistant" service "tools/list"
// endpoint HTTP request body.
type ToolsListRequestBody struct {
	// Pagination cursor
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty" xml:"cursor,omitempty"`
}

// ToolsCallRequestBody is the type of the "mcp_assistant" service "tools/call"
// endpoint HTTP request body.
type ToolsCallRequestBody struct {
	// Tool name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Tool arguments
	Arguments json.RawMessage `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
}

// ResourcesListRequestBody is the type of the "mcp_assistant" service
// "resources/list" endpoint HTTP request body.
type ResourcesListRequestBody struct {
	// Pagination cursor
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty" xml:"cursor,omitempty"`
}

// ResourcesReadRequestBody is the type of the "mcp_assistant" service
// "resources/read" endpoint HTTP request body.
type ResourcesReadRequestBody struct {
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// ResourcesSubscribeRequestBody is the type of the "mcp_assistant" service
// "resources/subscribe" endpoint HTTP request body.
type ResourcesSubscribeRequestBody struct {
	// Resource URI to subscribe to
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// ResourcesUnsubscribeRequestBody is the type of the "mcp_assistant" service
// "resources/unsubscribe" endpoint HTTP request body.
type ResourcesUnsubscribeRequestBody struct {
	// Resource URI to unsubscribe from
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// PromptsListRequestBody is the type of the "mcp_assistant" service
// "prompts/list" endpoint HTTP request body.
type PromptsListRequestBody struct {
	// Pagination cursor
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty" xml:"cursor,omitempty"`
}

// PromptsGetRequestBody is the type of the "mcp_assistant" service
// "prompts/get" endpoint HTTP request body.
type PromptsGetRequestBody struct {
	// Prompt name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Prompt arguments
	Arguments json.RawMessage `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
}

// NotifyStatusUpdateRequestBody is the type of the "mcp_assistant" service
// "notify_status_update" endpoint HTTP request body.
type NotifyStatusUpdateRequestBody struct {
	// Notification type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Notification message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// InitializeResponseBody is the type of the "mcp_assistant" service
// "initialize" endpoint HTTP response body.
type InitializeResponseBody InitializeResponseBodyResponseBody

// PingResponseBody is the type of the "mcp_assistant" service "ping" endpoint
// HTTP response body.
type PingResponseBody PingResponseBodyResponseBody

// ToolsListResponseBody is the type of the "mcp_assistant" service
// "tools/list" endpoint HTTP response body.
type ToolsListResponseBody ToolsListResponseBodyResponseBody

// ToolsCallResponseBody is the type of the "mcp_assistant" service
// "tools/call" endpoint HTTP response body.
type ToolsCallResponseBody ToolsCallResponseBodyResponseBody

// ResourcesListResponseBody is the type of the "mcp_assistant" service
// "resources/list" endpoint HTTP response body.
type ResourcesListResponseBody ResourcesListResponseBodyResponseBody

// ResourcesReadResponseBody is the type of the "mcp_assistant" service
// "resources/read" endpoint HTTP response body.
type ResourcesReadResponseBody ResourcesReadResponseBodyResponseBody

// PromptsListResponseBody is the type of the "mcp_assistant" service
// "prompts/list" endpoint HTTP response body.
type PromptsListResponseBody PromptsListResponseBodyResponseBody

// PromptsGetResponseBody is the type of the "mcp_assistant" service
// "prompts/get" endpoint HTTP response body.
type PromptsGetResponseBody PromptsGetResponseBodyResponseBody

// SubscribeResponseBody is the type of the "mcp_assistant" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody SubscribeResponseBodyResponseBody

// UnsubscribeResponseBody is the type of the "mcp_assistant" service
// "unsubscribe" endpoint HTTP response body.
type UnsubscribeResponseBody UnsubscribeResponseBodyResponseBody

// InitializeResponseBodyResponseBody is used to define fields on response body
// types.
type InitializeResponseBodyResponseBody struct {
	// MCP protocol version
	ProtocolVersion string `form:"protocolVersion" json:"protocolVersion" xml:"protocolVersion"`
	// Server capabilities
	Capabilities *ServerCapabilitiesResponseBodyResponseBody `form:"capabilities" json:"capabilities" xml:"capabilities"`
	// Server information
	ServerInfo *ServerInfoResponseBodyResponseBody `form:"serverInfo" json:"serverInfo" xml:"serverInfo"`
}

// ServerCapabilitiesResponseBodyResponseBody is used to define fields on
// response body types.
type ServerCapabilitiesResponseBodyResponseBody struct {
	// Tool capabilities
	Tools *ToolsCapabilityResponseBodyResponseBody `form:"tools,omitempty" json:"tools,omitempty" xml:"tools,omitempty"`
	// Resource capabilities
	Resources *ResourcesCapabilityResponseBodyResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	// Prompt capabilities
	Prompts *PromptsCapabilityResponseBodyResponseBody `form:"prompts,omitempty" json:"prompts,omitempty" xml:"prompts,omitempty"`
}

// ToolsCapabilityResponseBodyResponseBody is used to define fields on response
// body types.
type ToolsCapabilityResponseBodyResponseBody struct {
}

// ResourcesCapabilityResponseBodyResponseBody is used to define fields on
// response body types.
type ResourcesCapabilityResponseBodyResponseBody struct {
}

// PromptsCapabilityResponseBodyResponseBody is used to define fields on
// response body types.
type PromptsCapabilityResponseBodyResponseBody struct {
}

// ServerInfoResponseBodyResponseBody is used to define fields on response body
// types.
type ServerInfoResponseBodyResponseBody struct {
	// Server name
	Name string `form:"name" json:"name" xml:"name"`
	// Server version
	Version string `form:"version" json:"version" xml:"version"`
}

// PingResponseBodyResponseBody is used to define fields on response body types.
type PingResponseBodyResponseBody struct {
	// Response to ping
	Pong bool `form:"pong" json:"pong" xml:"pong"`
}

// ToolsListResponseBodyResponseBody is used to define fields on response body
// types.
type ToolsListResponseBodyResponseBody struct {
	// List of available tools
	Tools []*ToolInfoResponseBodyResponseBody `form:"tools" json:"tools" xml:"tools"`
}

// ToolInfoResponseBodyResponseBody is used to define fields on response body
// types.
type ToolInfoResponseBodyResponseBody struct {
	// Tool name
	Name string `form:"name" json:"name" xml:"name"`
	// Tool description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// JSON Schema for tool input
	InputSchema any `form:"inputSchema,omitempty" json:"inputSchema,omitempty" xml:"inputSchema,omitempty"`
}

// ToolsCallResponseBodyResponseBody is used to define fields on response body
// types.
type ToolsCallResponseBodyResponseBody struct {
	// Tool execution results
	Content []*ContentItemResponseBodyResponseBody `form:"content" json:"content" xml:"content"`
	// Whether the tool encountered an error
	IsError *bool `form:"isError,omitempty" json:"isError,omitempty" xml:"isError,omitempty"`
}

// ContentItemResponseBodyResponseBody is used to define fields on response
// body types.
type ContentItemResponseBodyResponseBody struct {
	// Content type
	Type string `form:"type" json:"type" xml:"type"`
	// Text content
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Base64 encoded data
	Data *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// ResourcesListResponseBodyResponseBody is used to define fields on response
// body types.
type ResourcesListResponseBodyResponseBody struct {
	// List of available resources
	Resources []*ResourceInfoResponseBodyResponseBody `form:"resources" json:"resources" xml:"resources"`
}

// ResourceInfoResponseBodyResponseBody is used to define fields on response
// body types.
type ResourceInfoResponseBodyResponseBody struct {
	// Resource URI
	URI string `form:"uri" json:"uri" xml:"uri"`
	// Resource name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Resource description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
}

// ResourcesReadResponseBodyResponseBody is used to define fields on response
// body types.
type ResourcesReadResponseBodyResponseBody struct {
	// Resource contents
	Contents []*ResourceContentResponseBodyResponseBody `form:"contents" json:"contents" xml:"contents"`
}

// ResourceContentResponseBodyResponseBody is used to define fields on response
// body types.
type ResourceContentResponseBodyResponseBody struct {
	// Resource URI
	URI string `form:"uri" json:"uri" xml:"uri"`
	// Content MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	// Text content
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Base64 encoded binary content
	Blob *string `form:"blob,omitempty" json:"blob,omitempty" xml:"blob,omitempty"`
}

// PromptsListResponseBodyResponseBody is used to define fields on response
// body types.
type PromptsListResponseBodyResponseBody struct {
	// List of available prompts
	Prompts []*PromptInfoResponseBodyResponseBody `form:"prompts" json:"prompts" xml:"prompts"`
}

// PromptInfoResponseBodyResponseBody is used to define fields on response body
// types.
type PromptInfoResponseBodyResponseBody struct {
	// Prompt name
	Name string `form:"name" json:"name" xml:"name"`
	// Prompt description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Prompt arguments
	Arguments []*PromptArgumentResponseBodyResponseBody `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
}

// PromptArgumentResponseBodyResponseBody is used to define fields on response
// body types.
type PromptArgumentResponseBodyResponseBody struct {
	// Argument name
	Name string `form:"name" json:"name" xml:"name"`
	// Argument description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether the argument is required
	Required bool `form:"required" json:"required" xml:"required"`
}

// PromptsGetResponseBodyResponseBody is used to define fields on response body
// types.
type PromptsGetResponseBodyResponseBody struct {
	// Prompt description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Prompt messages
	Messages []*PromptMessageResponseBodyResponseBody `form:"messages" json:"messages" xml:"messages"`
}

// PromptMessageResponseBodyResponseBody is used to define fields on response
// body types.
type PromptMessageResponseBodyResponseBody struct {
	// Message role
	Role string `form:"role" json:"role" xml:"role"`
	// Message content
	Content *MessageContentResponseBodyResponseBody `form:"content" json:"content" xml:"content"`
}

// MessageContentResponseBodyResponseBody is used to define fields on response
// body types.
type MessageContentResponseBodyResponseBody struct {
	// Content type
	Type string `form:"type" json:"type" xml:"type"`
	// Text content
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Base64 encoded data
	Data *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// SubscribeResponseBodyResponseBody is used to define fields on response body
// types.
type SubscribeResponseBodyResponseBody struct {
	// Whether subscription was successful
	Success bool `form:"success" json:"success" xml:"success"`
}

// UnsubscribeResponseBodyResponseBody is used to define fields on response
// body types.
type UnsubscribeResponseBodyResponseBody struct {
	// Whether unsubscription was successful
	Success bool `form:"success" json:"success" xml:"success"`
}

// ClientInfoRequestBodyRequestBodyRequestBodyRequestBody is used to define
// fields on request body types.
type ClientInfoRequestBodyRequestBodyRequestBodyRequestBody struct {
	// Client name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Client version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// NewInitializeResponseBody builds the HTTP response body from the result of
// the "initialize" endpoint of the "mcp_assistant" service.
func NewInitializeResponseBody(res *mcpassistant.InitializeResult) *InitializeResponseBody {
	body := &InitializeResponseBody{
		ProtocolVersion: res.ProtocolVersion,
	}
	if res.Capabilities != nil {
		body.Capabilities = marshalMcpassistantServerCapabilitiesToServerCapabilitiesResponseBodyResponseBody(res.Capabilities)
	}
	if res.ServerInfo != nil {
		body.ServerInfo = marshalMcpassistantServerInfoToServerInfoResponseBodyResponseBody(res.ServerInfo)
	}
	return body
}

// NewPingResponseBody builds the HTTP response body from the result of the
// "ping" endpoint of the "mcp_assistant" service.
func NewPingResponseBody(res *mcpassistant.PingResult) *PingResponseBody {
	body := &PingResponseBody{
		Pong: res.Pong,
	}
	return body
}

// NewToolsListResponseBody builds the HTTP response body from the result of
// the "tools/list" endpoint of the "mcp_assistant" service.
func NewToolsListResponseBody(res *mcpassistant.ToolsListResult) *ToolsListResponseBody {
	body := &ToolsListResponseBody{}
	if res.Tools != nil {
		body.Tools = make([]*ToolInfoResponseBodyResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalMcpassistantToolInfoToToolInfoResponseBodyResponseBody(val)
		}
	} else {
		body.Tools = []*ToolInfoResponseBodyResponseBody{}
	}
	return body
}

// NewToolsCallResponseBody builds the HTTP response body from the result of
// the "tools/call" endpoint of the "mcp_assistant" service.
func NewToolsCallResponseBody(res *mcpassistant.ToolsCallResult) *ToolsCallResponseBody {
	body := &ToolsCallResponseBody{
		IsError: res.IsError,
	}
	if res.Content != nil {
		body.Content = make([]*ContentItemResponseBodyResponseBody, len(res.Content))
		for i, val := range res.Content {
			body.Content[i] = marshalMcpassistantContentItemToContentItemResponseBodyResponseBody(val)
		}
	} else {
		body.Content = []*ContentItemResponseBodyResponseBody{}
	}
	return body
}

// NewResourcesListResponseBody builds the HTTP response body from the result
// of the "resources/list" endpoint of the "mcp_assistant" service.
func NewResourcesListResponseBody(res *mcpassistant.ResourcesListResult) *ResourcesListResponseBody {
	body := &ResourcesListResponseBody{}
	if res.Resources != nil {
		body.Resources = make([]*ResourceInfoResponseBodyResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalMcpassistantResourceInfoToResourceInfoResponseBodyResponseBody(val)
		}
	} else {
		body.Resources = []*ResourceInfoResponseBodyResponseBody{}
	}
	return body
}

// NewResourcesReadResponseBody builds the HTTP response body from the result
// of the "resources/read" endpoint of the "mcp_assistant" service.
func NewResourcesReadResponseBody(res *mcpassistant.ResourcesReadResult) *ResourcesReadResponseBody {
	body := &ResourcesReadResponseBody{}
	if res.Contents != nil {
		body.Contents = make([]*ResourceContentResponseBodyResponseBody, len(res.Contents))
		for i, val := range res.Contents {
			body.Contents[i] = marshalMcpassistantResourceContentToResourceContentResponseBodyResponseBody(val)
		}
	} else {
		body.Contents = []*ResourceContentResponseBodyResponseBody{}
	}
	return body
}

// NewPromptsListResponseBody builds the HTTP response body from the result of
// the "prompts/list" endpoint of the "mcp_assistant" service.
func NewPromptsListResponseBody(res *mcpassistant.PromptsListResult) *PromptsListResponseBody {
	body := &PromptsListResponseBody{}
	if res.Prompts != nil {
		body.Prompts = make([]*PromptInfoResponseBodyResponseBody, len(res.Prompts))
		for i, val := range res.Prompts {
			body.Prompts[i] = marshalMcpassistantPromptInfoToPromptInfoResponseBodyResponseBody(val)
		}
	} else {
		body.Prompts = []*PromptInfoResponseBodyResponseBody{}
	}
	return body
}

// NewPromptsGetResponseBody builds the HTTP response body from the result of
// the "prompts/get" endpoint of the "mcp_assistant" service.
func NewPromptsGetResponseBody(res *mcpassistant.PromptsGetResult) *PromptsGetResponseBody {
	body := &PromptsGetResponseBody{
		Description: res.Description,
	}
	if res.Messages != nil {
		body.Messages = make([]*PromptMessageResponseBodyResponseBody, len(res.Messages))
		for i, val := range res.Messages {
			body.Messages[i] = marshalMcpassistantPromptMessageToPromptMessageResponseBodyResponseBody(val)
		}
	} else {
		body.Messages = []*PromptMessageResponseBodyResponseBody{}
	}
	return body
}

// NewSubscribeResponseBody builds the HTTP response body from the result of
// the "subscribe" endpoint of the "mcp_assistant" service.
func NewSubscribeResponseBody(res *mcpassistant.SubscribeResult) *SubscribeResponseBody {
	body := &SubscribeResponseBody{
		Success: res.Success,
	}
	return body
}

// NewUnsubscribeResponseBody builds the HTTP response body from the result of
// the "unsubscribe" endpoint of the "mcp_assistant" service.
func NewUnsubscribeResponseBody(res *mcpassistant.UnsubscribeResult) *UnsubscribeResponseBody {
	body := &UnsubscribeResponseBody{
		Success: res.Success,
	}
	return body
}

// NewInitializePayload builds a mcp_assistant service initialize endpoint
// payload.
func NewInitializePayload(body *InitializeRequestBody) *mcpassistant.InitializePayload {
	v := &mcpassistant.InitializePayload{
		ProtocolVersion: *body.ProtocolVersion,
	}
	v.ClientInfo = unmarshalClientInfoRequestBodyRequestBodyRequestBodyRequestBodyToMcpassistantClientInfo(body.ClientInfo)

	return v
}

// NewToolsListPayload builds a mcp_assistant service tools/list endpoint
// payload.
func NewToolsListPayload(body *ToolsListRequestBody) *mcpassistant.ToolsListPayload {
	v := &mcpassistant.ToolsListPayload{
		Cursor: body.Cursor,
	}

	return v
}

// NewToolsCallPayload builds a mcp_assistant service tools/call endpoint
// payload.
func NewToolsCallPayload(body *ToolsCallRequestBody) *mcpassistant.ToolsCallPayload {
	v := &mcpassistant.ToolsCallPayload{
		Name:      *body.Name,
		Arguments: body.Arguments,
	}

	return v
}

// NewResourcesListPayload builds a mcp_assistant service resources/list
// endpoint payload.
func NewResourcesListPayload(body *ResourcesListRequestBody) *mcpassistant.ResourcesListPayload {
	v := &mcpassistant.ResourcesListPayload{
		Cursor: body.Cursor,
	}

	return v
}

// NewResourcesReadPayload builds a mcp_assistant service resources/read
// endpoint payload.
func NewResourcesReadPayload(body *ResourcesReadRequestBody) *mcpassistant.ResourcesReadPayload {
	v := &mcpassistant.ResourcesReadPayload{
		URI: *body.URI,
	}

	return v
}

// NewResourcesSubscribePayload builds a mcp_assistant service
// resources/subscribe endpoint payload.
func NewResourcesSubscribePayload(body *ResourcesSubscribeRequestBody) *mcpassistant.ResourcesSubscribePayload {
	v := &mcpassistant.ResourcesSubscribePayload{
		URI: *body.URI,
	}

	return v
}

// NewResourcesUnsubscribePayload builds a mcp_assistant service
// resources/unsubscribe endpoint payload.
func NewResourcesUnsubscribePayload(body *ResourcesUnsubscribeRequestBody) *mcpassistant.ResourcesUnsubscribePayload {
	v := &mcpassistant.ResourcesUnsubscribePayload{
		URI: *body.URI,
	}

	return v
}

// NewPromptsListPayload builds a mcp_assistant service prompts/list endpoint
// payload.
func NewPromptsListPayload(body *PromptsListRequestBody) *mcpassistant.PromptsListPayload {
	v := &mcpassistant.PromptsListPayload{
		Cursor: body.Cursor,
	}

	return v
}

// NewPromptsGetPayload builds a mcp_assistant service prompts/get endpoint
// payload.
func NewPromptsGetPayload(body *PromptsGetRequestBody) *mcpassistant.PromptsGetPayload {
	v := &mcpassistant.PromptsGetPayload{
		Name:      *body.Name,
		Arguments: body.Arguments,
	}

	return v
}

// NewNotifyStatusUpdateSendNotificationPayload builds a mcp_assistant service
// notify_status_update endpoint payload.
func NewNotifyStatusUpdateSendNotificationPayload(body *NotifyStatusUpdateRequestBody) *mcpassistant.SendNotificationPayload {
	v := &mcpassistant.SendNotificationPayload{
		Type:    *body.Type,
		Message: body.Message,
		Data:    body.Data,
	}

	return v
}

// NewSubscribePayload builds a mcp_assistant service subscribe endpoint
// payload.
func NewSubscribePayload(body struct {
	// Resource URI to subscribe to
	URI *string `form:"uri" json:"uri" xml:"uri"`
}) *mcpassistant.SubscribePayload {
	v := &mcpassistant.SubscribePayload{}
	if body.URI != nil {
		v.URI = *body.URI
	}

	return v
}

// NewUnsubscribePayload builds a mcp_assistant service unsubscribe endpoint
// payload.
func NewUnsubscribePayload(body struct {
	// Resource URI to unsubscribe from
	URI *string `form:"uri" json:"uri" xml:"uri"`
}) *mcpassistant.UnsubscribePayload {
	v := &mcpassistant.UnsubscribePayload{}
	if body.URI != nil {
		v.URI = *body.URI
	}

	return v
}

// ValidateInitializeRequestBody runs the validations defined on
// InitializeRequestBody
func ValidateInitializeRequestBody(body *InitializeRequestBody) (err error) {
	if body.ProtocolVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protocolVersion", "body"))
	}
	if body.ClientInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clientInfo", "body"))
	}
	if body.ClientInfo != nil {
		if err2 := ValidateClientInfoRequestBodyRequestBodyRequestBodyRequestBody(body.ClientInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateToolsCallRequestBody runs the validations defined on
// Tools/CallRequestBody
func ValidateToolsCallRequestBody(body *ToolsCallRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateResourcesReadRequestBody runs the validations defined on
// Resources/ReadRequestBody
func ValidateResourcesReadRequestBody(body *ResourcesReadRequestBody) (err error) {
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	if body.URI != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.uri", *body.URI, "^[a-zA-Z][a-zA-Z0-9+.-]*:.*"))
	}
	return
}

// ValidateResourcesSubscribeRequestBody runs the validations defined on
// Resources/SubscribeRequestBody
func ValidateResourcesSubscribeRequestBody(body *ResourcesSubscribeRequestBody) (err error) {
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	return
}

// ValidateResourcesUnsubscribeRequestBody runs the validations defined on
// Resources/UnsubscribeRequestBody
func ValidateResourcesUnsubscribeRequestBody(body *ResourcesUnsubscribeRequestBody) (err error) {
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	return
}

// ValidatePromptsGetRequestBody runs the validations defined on
// Prompts/GetRequestBody
func ValidatePromptsGetRequestBody(body *PromptsGetRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateNotifyStatusUpdateRequestBody runs the validations defined on
// notify_status_update_request_body
func ValidateNotifyStatusUpdateRequestBody(body *NotifyStatusUpdateRequestBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	return
}

// ValidateClientInfoRequestBodyRequestBodyRequestBodyRequestBody runs the
// validations defined on ClientInfoRequestBodyRequestBodyRequestBodyRequestBody
func ValidateClientInfoRequestBodyRequestBodyRequestBodyRequestBody(body *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}
