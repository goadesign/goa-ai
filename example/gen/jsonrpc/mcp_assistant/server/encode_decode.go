// Code generated by goa v3.22.2, DO NOT EDIT.
//
// mcp_assistant JSON-RPC server encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package server

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"io"
	"net/http"

	mcpassistant "example.com/assistant/gen/mcp_assistant"
	goahttp "goa.design/goa/v3/http"
	"goa.design/goa/v3/jsonrpc"
	goa "goa.design/goa/v3/pkg"
)

// EncodeInitializeResponse returns an encoder for responses returned by the
// mcp_assistant initialize endpoint.
func EncodeInitializeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.InitializeResult)
		enc := encoder(ctx, w)
		body := NewInitializeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeInitializeRequest returns a decoder for requests sent to the
// mcp_assistant initialize endpoint.
func DecodeInitializeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.InitializePayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.InitializePayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// MCP protocol version
				ProtocolVersion *string `form:"protocolVersion" json:"protocolVersion" xml:"protocolVersion"`
				// Client information
				ClientInfo *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody `form:"clientInfo" json:"clientInfo" xml:"clientInfo"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.InitializePayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.InitializePayload
				return zero, gerr
			}
			var zero *mcpassistant.InitializePayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.ProtocolVersion == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("protocolVersion", "body"))
		}
		if body.ClientInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("clientInfo", "body"))
		}
		if body.ClientInfo != nil {
			if err2 := ValidateClientInfoRequestBodyRequestBodyRequestBodyRequestBody(body.ClientInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			var zero *mcpassistant.InitializePayload
			return zero, err
		}
		payload := NewInitializePayload(body)

		return payload, nil
	}
}

// EncodePingResponse returns an encoder for responses returned by the
// mcp_assistant ping endpoint.
func EncodePingResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.PingResult)
		enc := encoder(ctx, w)
		body := NewPingResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeToolsListResponse returns an encoder for responses returned by the
// mcp_assistant tools/list endpoint.
func EncodeToolsListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.ToolsListResult)
		enc := encoder(ctx, w)
		body := NewToolsListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeToolsListRequest returns a decoder for requests sent to the
// mcp_assistant tools/list endpoint.
func DecodeToolsListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.ToolsListPayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.ToolsListPayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Pagination cursor
				Cursor *string `form:"cursor" json:"cursor" xml:"cursor"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.ToolsListPayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.ToolsListPayload
				return zero, gerr
			}
			var zero *mcpassistant.ToolsListPayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		payload := NewToolsListPayload(body)

		return payload, nil
	}
}

// EncodeToolsCallResponse returns an encoder for responses returned by the
// mcp_assistant tools/call endpoint.
func EncodeToolsCallResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.ToolsCallResult)
		enc := encoder(ctx, w)
		body := NewToolsCallResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeToolsCallRequest returns a decoder for requests sent to the
// mcp_assistant tools/call endpoint.
func DecodeToolsCallRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.ToolsCallPayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.ToolsCallPayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Tool name
				Name *string `form:"name" json:"name" xml:"name"`
				// Tool arguments
				Arguments json.RawMessage `form:"arguments" json:"arguments" xml:"arguments"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.ToolsCallPayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.ToolsCallPayload
				return zero, gerr
			}
			var zero *mcpassistant.ToolsCallPayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.Name == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
		}
		if err != nil {
			var zero *mcpassistant.ToolsCallPayload
			return zero, err
		}
		payload := NewToolsCallPayload(body)

		return payload, nil
	}
}

// EncodeResourcesListResponse returns an encoder for responses returned by the
// mcp_assistant resources/list endpoint.
func EncodeResourcesListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.ResourcesListResult)
		enc := encoder(ctx, w)
		body := NewResourcesListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeResourcesListRequest returns a decoder for requests sent to the
// mcp_assistant resources/list endpoint.
func DecodeResourcesListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.ResourcesListPayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.ResourcesListPayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Pagination cursor
				Cursor *string `form:"cursor" json:"cursor" xml:"cursor"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.ResourcesListPayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.ResourcesListPayload
				return zero, gerr
			}
			var zero *mcpassistant.ResourcesListPayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		payload := NewResourcesListPayload(body)

		return payload, nil
	}
}

// EncodeResourcesReadResponse returns an encoder for responses returned by the
// mcp_assistant resources/read endpoint.
func EncodeResourcesReadResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.ResourcesReadResult)
		enc := encoder(ctx, w)
		body := NewResourcesReadResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeResourcesReadRequest returns a decoder for requests sent to the
// mcp_assistant resources/read endpoint.
func DecodeResourcesReadRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.ResourcesReadPayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.ResourcesReadPayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Resource URI
				URI *string `form:"uri" json:"uri" xml:"uri"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.ResourcesReadPayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.ResourcesReadPayload
				return zero, gerr
			}
			var zero *mcpassistant.ResourcesReadPayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.URI == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
		}
		if body.URI != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.uri", *body.URI, "^[a-zA-Z][a-zA-Z0-9+.-]*:.*"))
		}
		if err != nil {
			var zero *mcpassistant.ResourcesReadPayload
			return zero, err
		}
		payload := NewResourcesReadPayload(body)

		return payload, nil
	}
}

// EncodeResourcesSubscribeResponse returns an encoder for responses returned
// by the mcp_assistant resources/subscribe endpoint.
func EncodeResourcesSubscribeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeResourcesSubscribeRequest returns a decoder for requests sent to the
// mcp_assistant resources/subscribe endpoint.
func DecodeResourcesSubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.ResourcesSubscribePayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.ResourcesSubscribePayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Resource URI to subscribe to
				URI *string `form:"uri" json:"uri" xml:"uri"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.ResourcesSubscribePayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.ResourcesSubscribePayload
				return zero, gerr
			}
			var zero *mcpassistant.ResourcesSubscribePayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.URI == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
		}
		if err != nil {
			var zero *mcpassistant.ResourcesSubscribePayload
			return zero, err
		}
		payload := NewResourcesSubscribePayload(body)

		return payload, nil
	}
}

// EncodeResourcesUnsubscribeResponse returns an encoder for responses returned
// by the mcp_assistant resources/unsubscribe endpoint.
func EncodeResourcesUnsubscribeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeResourcesUnsubscribeRequest returns a decoder for requests sent to the
// mcp_assistant resources/unsubscribe endpoint.
func DecodeResourcesUnsubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.ResourcesUnsubscribePayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.ResourcesUnsubscribePayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Resource URI to unsubscribe from
				URI *string `form:"uri" json:"uri" xml:"uri"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.ResourcesUnsubscribePayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.ResourcesUnsubscribePayload
				return zero, gerr
			}
			var zero *mcpassistant.ResourcesUnsubscribePayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.URI == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
		}
		if err != nil {
			var zero *mcpassistant.ResourcesUnsubscribePayload
			return zero, err
		}
		payload := NewResourcesUnsubscribePayload(body)

		return payload, nil
	}
}

// EncodePromptsListResponse returns an encoder for responses returned by the
// mcp_assistant prompts/list endpoint.
func EncodePromptsListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.PromptsListResult)
		enc := encoder(ctx, w)
		body := NewPromptsListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePromptsListRequest returns a decoder for requests sent to the
// mcp_assistant prompts/list endpoint.
func DecodePromptsListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.PromptsListPayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.PromptsListPayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Pagination cursor
				Cursor *string `form:"cursor" json:"cursor" xml:"cursor"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.PromptsListPayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.PromptsListPayload
				return zero, gerr
			}
			var zero *mcpassistant.PromptsListPayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		payload := NewPromptsListPayload(body)

		return payload, nil
	}
}

// EncodePromptsGetResponse returns an encoder for responses returned by the
// mcp_assistant prompts/get endpoint.
func EncodePromptsGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.PromptsGetResult)
		enc := encoder(ctx, w)
		body := NewPromptsGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePromptsGetRequest returns a decoder for requests sent to the
// mcp_assistant prompts/get endpoint.
func DecodePromptsGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.PromptsGetPayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.PromptsGetPayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Prompt name
				Name *string `form:"name" json:"name" xml:"name"`
				// Prompt arguments
				Arguments json.RawMessage `form:"arguments" json:"arguments" xml:"arguments"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.PromptsGetPayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.PromptsGetPayload
				return zero, gerr
			}
			var zero *mcpassistant.PromptsGetPayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.Name == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
		}
		if err != nil {
			var zero *mcpassistant.PromptsGetPayload
			return zero, err
		}
		payload := NewPromptsGetPayload(body)

		return payload, nil
	}
}

// EncodeNotifyStatusUpdateResponse returns an encoder for responses returned
// by the mcp_assistant notify_status_update endpoint.
func EncodeNotifyStatusUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeNotifyStatusUpdateRequest returns a decoder for requests sent to the
// mcp_assistant notify_status_update endpoint.
func DecodeNotifyStatusUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.NotifyStatusUpdatePayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.NotifyStatusUpdatePayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Notification type
				Type *string `form:"type" json:"type" xml:"type"`
				// Notification message
				Message *string `form:"message" json:"message" xml:"message"`
				// Additional data
				Data any `form:"data" json:"data" xml:"data"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.NotifyStatusUpdatePayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.NotifyStatusUpdatePayload
				return zero, gerr
			}
			var zero *mcpassistant.NotifyStatusUpdatePayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
		}
		if err != nil {
			var zero *mcpassistant.NotifyStatusUpdatePayload
			return zero, err
		}
		payload := NewNotifyStatusUpdatePayload(body)

		return payload, nil
	}
}

// EncodeSubscribeResponse returns an encoder for responses returned by the
// mcp_assistant subscribe endpoint.
func EncodeSubscribeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.SubscribeResult)
		enc := encoder(ctx, w)
		body := NewSubscribeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSubscribeRequest returns a decoder for requests sent to the
// mcp_assistant subscribe endpoint.
func DecodeSubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.SubscribePayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.SubscribePayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Resource URI to subscribe to
				URI *string `form:"uri" json:"uri" xml:"uri"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.SubscribePayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.SubscribePayload
				return zero, gerr
			}
			var zero *mcpassistant.SubscribePayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.URI == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
		}
		if err != nil {
			var zero *mcpassistant.SubscribePayload
			return zero, err
		}
		payload := NewSubscribePayload(body)

		return payload, nil
	}
}

// EncodeUnsubscribeResponse returns an encoder for responses returned by the
// mcp_assistant unsubscribe endpoint.
func EncodeUnsubscribeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mcpassistant.UnsubscribeResult)
		enc := encoder(ctx, w)
		body := NewUnsubscribeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUnsubscribeRequest returns a decoder for requests sent to the
// mcp_assistant unsubscribe endpoint.
func DecodeUnsubscribeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request, *jsonrpc.RawRequest) (*mcpassistant.UnsubscribePayload, error) {
	return func(r *http.Request, req *jsonrpc.RawRequest) (*mcpassistant.UnsubscribePayload, error) {
		r.Body = io.NopCloser(bytes.NewReader(req.Params))
		var (
			body struct {
				// Resource URI to unsubscribe from
				URI *string `form:"uri" json:"uri" xml:"uri"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				var zero *mcpassistant.UnsubscribePayload
				return zero, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				var zero *mcpassistant.UnsubscribePayload
				return zero, gerr
			}
			var zero *mcpassistant.UnsubscribePayload
			return zero, goa.DecodePayloadError(err.Error())
		}
		if body.URI == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
		}
		if err != nil {
			var zero *mcpassistant.UnsubscribePayload
			return zero, err
		}
		payload := NewUnsubscribePayload(body)

		return payload, nil
	}
}

// unmarshalClientInfoRequestBodyRequestBodyRequestBodyRequestBodyToMcpassistantClientInfo
// builds a value of type *mcpassistant.ClientInfo from a value of type
// *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody.
func unmarshalClientInfoRequestBodyRequestBodyRequestBodyRequestBodyToMcpassistantClientInfo(v *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody) *mcpassistant.ClientInfo {
	if v == nil {
		return nil
	}
	res := &mcpassistant.ClientInfo{
		Name:    *v.Name,
		Version: *v.Version,
	}

	return res
}

// marshalMcpassistantServerCapabilitiesToServerCapabilitiesResponseBodyResponseBody
// builds a value of type *ServerCapabilitiesResponseBodyResponseBody from a
// value of type *mcpassistant.ServerCapabilities.
func marshalMcpassistantServerCapabilitiesToServerCapabilitiesResponseBodyResponseBody(v *mcpassistant.ServerCapabilities) *ServerCapabilitiesResponseBodyResponseBody {
	res := &ServerCapabilitiesResponseBodyResponseBody{}
	if v.Tools != nil {
		res.Tools = marshalMcpassistantToolsCapabilityToToolsCapabilityResponseBodyResponseBody(v.Tools)
	}
	if v.Resources != nil {
		res.Resources = marshalMcpassistantResourcesCapabilityToResourcesCapabilityResponseBodyResponseBody(v.Resources)
	}
	if v.Prompts != nil {
		res.Prompts = marshalMcpassistantPromptsCapabilityToPromptsCapabilityResponseBodyResponseBody(v.Prompts)
	}

	return res
}

// marshalMcpassistantToolsCapabilityToToolsCapabilityResponseBodyResponseBody
// builds a value of type *ToolsCapabilityResponseBodyResponseBody from a value
// of type *mcpassistant.ToolsCapability.
func marshalMcpassistantToolsCapabilityToToolsCapabilityResponseBodyResponseBody(v *mcpassistant.ToolsCapability) *ToolsCapabilityResponseBodyResponseBody {
	if v == nil {
		return nil
	}
	res := &ToolsCapabilityResponseBodyResponseBody{}

	return res
}

// marshalMcpassistantResourcesCapabilityToResourcesCapabilityResponseBodyResponseBody
// builds a value of type *ResourcesCapabilityResponseBodyResponseBody from a
// value of type *mcpassistant.ResourcesCapability.
func marshalMcpassistantResourcesCapabilityToResourcesCapabilityResponseBodyResponseBody(v *mcpassistant.ResourcesCapability) *ResourcesCapabilityResponseBodyResponseBody {
	if v == nil {
		return nil
	}
	res := &ResourcesCapabilityResponseBodyResponseBody{}

	return res
}

// marshalMcpassistantPromptsCapabilityToPromptsCapabilityResponseBodyResponseBody
// builds a value of type *PromptsCapabilityResponseBodyResponseBody from a
// value of type *mcpassistant.PromptsCapability.
func marshalMcpassistantPromptsCapabilityToPromptsCapabilityResponseBodyResponseBody(v *mcpassistant.PromptsCapability) *PromptsCapabilityResponseBodyResponseBody {
	if v == nil {
		return nil
	}
	res := &PromptsCapabilityResponseBodyResponseBody{}

	return res
}

// marshalMcpassistantServerInfoToServerInfoResponseBodyResponseBody builds a
// value of type *ServerInfoResponseBodyResponseBody from a value of type
// *mcpassistant.ServerInfo.
func marshalMcpassistantServerInfoToServerInfoResponseBodyResponseBody(v *mcpassistant.ServerInfo) *ServerInfoResponseBodyResponseBody {
	res := &ServerInfoResponseBodyResponseBody{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalMcpassistantToolInfoToToolInfoResponseBodyResponseBody builds a value
// of type *ToolInfoResponseBodyResponseBody from a value of type
// *mcpassistant.ToolInfo.
func marshalMcpassistantToolInfoToToolInfoResponseBodyResponseBody(v *mcpassistant.ToolInfo) *ToolInfoResponseBodyResponseBody {
	res := &ToolInfoResponseBodyResponseBody{
		Name:        v.Name,
		Description: v.Description,
		InputSchema: v.InputSchema,
	}

	return res
}

// marshalMcpassistantContentItemToContentItemResponseBodyResponseBody builds a
// value of type *ContentItemResponseBodyResponseBody from a value of type
// *mcpassistant.ContentItem.
func marshalMcpassistantContentItemToContentItemResponseBodyResponseBody(v *mcpassistant.ContentItem) *ContentItemResponseBodyResponseBody {
	res := &ContentItemResponseBodyResponseBody{
		Type:     v.Type,
		Text:     v.Text,
		Data:     v.Data,
		MimeType: v.MimeType,
		URI:      v.URI,
	}

	return res
}

// marshalMcpassistantResourceInfoToResourceInfoResponseBodyResponseBody builds
// a value of type *ResourceInfoResponseBodyResponseBody from a value of type
// *mcpassistant.ResourceInfo.
func marshalMcpassistantResourceInfoToResourceInfoResponseBodyResponseBody(v *mcpassistant.ResourceInfo) *ResourceInfoResponseBodyResponseBody {
	res := &ResourceInfoResponseBodyResponseBody{
		URI:         v.URI,
		Name:        v.Name,
		Description: v.Description,
		MimeType:    v.MimeType,
	}

	return res
}

// marshalMcpassistantResourceContentToResourceContentResponseBodyResponseBody
// builds a value of type *ResourceContentResponseBodyResponseBody from a value
// of type *mcpassistant.ResourceContent.
func marshalMcpassistantResourceContentToResourceContentResponseBodyResponseBody(v *mcpassistant.ResourceContent) *ResourceContentResponseBodyResponseBody {
	res := &ResourceContentResponseBodyResponseBody{
		URI:      v.URI,
		MimeType: v.MimeType,
		Text:     v.Text,
		Blob:     v.Blob,
	}

	return res
}

// marshalMcpassistantPromptInfoToPromptInfoResponseBodyResponseBody builds a
// value of type *PromptInfoResponseBodyResponseBody from a value of type
// *mcpassistant.PromptInfo.
func marshalMcpassistantPromptInfoToPromptInfoResponseBodyResponseBody(v *mcpassistant.PromptInfo) *PromptInfoResponseBodyResponseBody {
	res := &PromptInfoResponseBodyResponseBody{
		Name:        v.Name,
		Description: v.Description,
	}
	if v.Arguments != nil {
		res.Arguments = make([]*PromptArgumentResponseBodyResponseBody, len(v.Arguments))
		for i, val := range v.Arguments {
			res.Arguments[i] = marshalMcpassistantPromptArgumentToPromptArgumentResponseBodyResponseBody(val)
		}
	}

	return res
}

// marshalMcpassistantPromptArgumentToPromptArgumentResponseBodyResponseBody
// builds a value of type *PromptArgumentResponseBodyResponseBody from a value
// of type *mcpassistant.PromptArgument.
func marshalMcpassistantPromptArgumentToPromptArgumentResponseBodyResponseBody(v *mcpassistant.PromptArgument) *PromptArgumentResponseBodyResponseBody {
	if v == nil {
		return nil
	}
	res := &PromptArgumentResponseBodyResponseBody{
		Name:        v.Name,
		Description: v.Description,
		Required:    v.Required,
	}

	return res
}

// marshalMcpassistantPromptMessageToPromptMessageResponseBodyResponseBody
// builds a value of type *PromptMessageResponseBodyResponseBody from a value
// of type *mcpassistant.PromptMessage.
func marshalMcpassistantPromptMessageToPromptMessageResponseBodyResponseBody(v *mcpassistant.PromptMessage) *PromptMessageResponseBodyResponseBody {
	res := &PromptMessageResponseBodyResponseBody{
		Role: v.Role,
	}
	if v.Content != nil {
		res.Content = marshalMcpassistantMessageContentToMessageContentResponseBodyResponseBody(v.Content)
	}

	return res
}

// marshalMcpassistantMessageContentToMessageContentResponseBodyResponseBody
// builds a value of type *MessageContentResponseBodyResponseBody from a value
// of type *mcpassistant.MessageContent.
func marshalMcpassistantMessageContentToMessageContentResponseBodyResponseBody(v *mcpassistant.MessageContent) *MessageContentResponseBodyResponseBody {
	res := &MessageContentResponseBodyResponseBody{
		Type:     v.Type,
		Text:     v.Text,
		Data:     v.Data,
		MimeType: v.MimeType,
		URI:      v.URI,
	}

	return res
}
