// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant JSON-RPC client CLI support package
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"encoding/json"
	"fmt"

	mcpassistant "example.com/assistant/gen/mcp_assistant"
	goa "goa.design/goa/v3/pkg"
)

// BuildInitializePayload builds the payload for the mcp_assistant initialize
// endpoint from CLI flags.
func BuildInitializePayload(mcpAssistantInitializeBody string) (*mcpassistant.InitializePayload, error) {
	var err error
	var body InitializeRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantInitializeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"clientInfo\": {\n         \"name\": \"Commodi sequi quas aliquam.\",\n         \"version\": \"Eos voluptas voluptas enim rerum at.\"\n      },\n      \"protocolVersion\": \"Ea nobis voluptas consequatur.\"\n   }'")
		}
		if body.ClientInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("clientInfo", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &mcpassistant.InitializePayload{
		ProtocolVersion: body.ProtocolVersion,
	}
	if body.ClientInfo != nil {
		v.ClientInfo = marshalClientInfoRequestBodyRequestBodyToMcpassistantClientInfo(body.ClientInfo)
	}

	return v, nil
}

// BuildToolsListPayload builds the payload for the mcp_assistant tools/list
// endpoint from CLI flags.
func BuildToolsListPayload(mcpAssistantToolsListBody string) (*mcpassistant.ToolsListPayload, error) {
	var err error
	var body ToolsListRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantToolsListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cursor\": \"Dolor quos occaecati et.\"\n   }'")
		}
	}
	v := &mcpassistant.ToolsListPayload{
		Cursor: body.Cursor,
	}

	return v, nil
}

// BuildToolsCallPayload builds the payload for the mcp_assistant tools/call
// endpoint from CLI flags.
func BuildToolsCallPayload(mcpAssistantToolsCallBody string) (*mcpassistant.ToolsCallPayload, error) {
	var err error
	var body ToolsCallRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantToolsCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": \"Voluptate voluptatem eos libero alias.\",\n      \"name\": \"analyze_text\"\n   }'")
		}
		if !(body.Name == "analyze_text" || body.Name == "search" || body.Name == "execute_code" || body.Name == "process_batch") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", body.Name, []any{"analyze_text", "search", "execute_code", "process_batch"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &mcpassistant.ToolsCallPayload{
		Name:      body.Name,
		Arguments: body.Arguments,
	}

	return v, nil
}

// BuildResourcesListPayload builds the payload for the mcp_assistant
// resources/list endpoint from CLI flags.
func BuildResourcesListPayload(mcpAssistantResourcesListBody string) (*mcpassistant.ResourcesListPayload, error) {
	var err error
	var body ResourcesListRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantResourcesListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cursor\": \"Ullam laboriosam itaque.\"\n   }'")
		}
	}
	v := &mcpassistant.ResourcesListPayload{
		Cursor: body.Cursor,
	}

	return v, nil
}

// BuildResourcesReadPayload builds the payload for the mcp_assistant
// resources/read endpoint from CLI flags.
func BuildResourcesReadPayload(mcpAssistantResourcesReadBody string) (*mcpassistant.ResourcesReadPayload, error) {
	var err error
	var body ResourcesReadRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantResourcesReadBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uri\": \"X:\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.uri", body.URI, "^[a-zA-Z][a-zA-Z0-9+.-]*:.*"))
		if err != nil {
			return nil, err
		}
	}
	v := &mcpassistant.ResourcesReadPayload{
		URI: body.URI,
	}

	return v, nil
}

// BuildResourcesSubscribePayload builds the payload for the mcp_assistant
// resources/subscribe endpoint from CLI flags.
func BuildResourcesSubscribePayload(mcpAssistantResourcesSubscribeBody string) (*mcpassistant.ResourcesSubscribePayload, error) {
	var err error
	var body ResourcesSubscribeRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantResourcesSubscribeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uri\": \"Sint ut expedita at repellat recusandae quidem.\"\n   }'")
		}
	}
	v := &mcpassistant.ResourcesSubscribePayload{
		URI: body.URI,
	}

	return v, nil
}

// BuildResourcesUnsubscribePayload builds the payload for the mcp_assistant
// resources/unsubscribe endpoint from CLI flags.
func BuildResourcesUnsubscribePayload(mcpAssistantResourcesUnsubscribeBody string) (*mcpassistant.ResourcesUnsubscribePayload, error) {
	var err error
	var body ResourcesUnsubscribeRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantResourcesUnsubscribeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uri\": \"Illum iusto.\"\n   }'")
		}
	}
	v := &mcpassistant.ResourcesUnsubscribePayload{
		URI: body.URI,
	}

	return v, nil
}

// BuildPromptsListPayload builds the payload for the mcp_assistant
// prompts/list endpoint from CLI flags.
func BuildPromptsListPayload(mcpAssistantPromptsListBody string) (*mcpassistant.PromptsListPayload, error) {
	var err error
	var body PromptsListRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantPromptsListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cursor\": \"Enim praesentium non incidunt perspiciatis fugit eveniet.\"\n   }'")
		}
	}
	v := &mcpassistant.PromptsListPayload{
		Cursor: body.Cursor,
	}

	return v, nil
}

// BuildPromptsGetPayload builds the payload for the mcp_assistant prompts/get
// endpoint from CLI flags.
func BuildPromptsGetPayload(mcpAssistantPromptsGetBody string) (*mcpassistant.PromptsGetPayload, error) {
	var err error
	var body PromptsGetRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantPromptsGetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": \"Earum sint quam.\",\n      \"name\": \"code_review\"\n   }'")
		}
		if !(body.Name == "code_review" || body.Name == "explain_concept" || body.Name == "contextual_prompts") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", body.Name, []any{"code_review", "explain_concept", "contextual_prompts"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &mcpassistant.PromptsGetPayload{
		Name:      body.Name,
		Arguments: body.Arguments,
	}

	return v, nil
}

// BuildNotifyStatusUpdatePayload builds the payload for the mcp_assistant
// notify_status_update endpoint from CLI flags.
func BuildNotifyStatusUpdatePayload(mcpAssistantNotifyStatusUpdateBody string) (*mcpassistant.NotifyStatusUpdatePayload, error) {
	var err error
	var body NotifyStatusUpdateRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantNotifyStatusUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"data\": \"Nesciunt voluptate quia.\",\n      \"message\": \"Est minima at provident illo.\",\n      \"type\": \"Consectetur nemo dolore in tempore est.\"\n   }'")
		}
	}
	v := &mcpassistant.NotifyStatusUpdatePayload{
		Type:    body.Type,
		Message: body.Message,
		Data:    body.Data,
	}

	return v, nil
}

// BuildSubscribePayload builds the payload for the mcp_assistant subscribe
// endpoint from CLI flags.
func BuildSubscribePayload(mcpAssistantSubscribeBody string) (*mcpassistant.SubscribePayload, error) {
	var err error
	var body SubscribeRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantSubscribeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uri\": \"Sed porro.\"\n   }'")
		}
	}
	v := &mcpassistant.SubscribePayload{
		URI: body.URI,
	}

	return v, nil
}

// BuildUnsubscribePayload builds the payload for the mcp_assistant unsubscribe
// endpoint from CLI flags.
func BuildUnsubscribePayload(mcpAssistantUnsubscribeBody string) (*mcpassistant.UnsubscribePayload, error) {
	var err error
	var body UnsubscribeRequestBody
	{
		err = json.Unmarshal([]byte(mcpAssistantUnsubscribeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uri\": \"Et suscipit qui totam provident distinctio nostrum.\"\n   }'")
		}
	}
	v := &mcpassistant.UnsubscribePayload{
		URI: body.URI,
	}

	return v, nil
}
