// Code generated by goa v3.22.2, DO NOT EDIT.
//
// mcp_assistant HTTP client types
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	mcpassistant "example.com/assistant/gen/mcp_assistant"
	goa "goa.design/goa/v3/pkg"
)

// InitializeResponseBody is the type of the "mcp_assistant" service
// "initialize" endpoint HTTP response body.
type InitializeResponseBody InitializeResponseBodyResponseBody

// PingResponseBody is the type of the "mcp_assistant" service "ping" endpoint
// HTTP response body.
type PingResponseBody PingResponseBodyResponseBody

// ToolsListResponseBody is the type of the "mcp_assistant" service
// "tools/list" endpoint HTTP response body.
type ToolsListResponseBody ToolsListResponseBodyResponseBody

// ToolsCallResponseBody is the type of the "mcp_assistant" service
// "tools/call" endpoint HTTP response body.
type ToolsCallResponseBody ToolsCallResponseBodyResponseBody

// ResourcesListResponseBody is the type of the "mcp_assistant" service
// "resources/list" endpoint HTTP response body.
type ResourcesListResponseBody ResourcesListResponseBodyResponseBody

// ResourcesReadResponseBody is the type of the "mcp_assistant" service
// "resources/read" endpoint HTTP response body.
type ResourcesReadResponseBody ResourcesReadResponseBodyResponseBody

// PromptsListResponseBody is the type of the "mcp_assistant" service
// "prompts/list" endpoint HTTP response body.
type PromptsListResponseBody PromptsListResponseBodyResponseBody

// PromptsGetResponseBody is the type of the "mcp_assistant" service
// "prompts/get" endpoint HTTP response body.
type PromptsGetResponseBody PromptsGetResponseBodyResponseBody

// SubscribeResponseBody is the type of the "mcp_assistant" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody SubscribeResponseBodyResponseBody

// UnsubscribeResponseBody is the type of the "mcp_assistant" service
// "unsubscribe" endpoint HTTP response body.
type UnsubscribeResponseBody UnsubscribeResponseBodyResponseBody

// ClientInfoRequestBodyRequestBodyRequestBodyRequestBody is used to define
// fields on request body types.
type ClientInfoRequestBodyRequestBodyRequestBodyRequestBody struct {
	// Client name
	Name string `form:"name" json:"name" xml:"name"`
	// Client version
	Version string `form:"version" json:"version" xml:"version"`
}

// InitializeResponseBodyResponseBody is used to define fields on response body
// types.
type InitializeResponseBodyResponseBody struct {
	// MCP protocol version
	ProtocolVersion *string `form:"protocolVersion,omitempty" json:"protocolVersion,omitempty" xml:"protocolVersion,omitempty"`
	// Server capabilities
	Capabilities *ServerCapabilitiesResponseBodyResponseBody `form:"capabilities,omitempty" json:"capabilities,omitempty" xml:"capabilities,omitempty"`
	// Server information
	ServerInfo *ServerInfoResponseBodyResponseBody `form:"serverInfo,omitempty" json:"serverInfo,omitempty" xml:"serverInfo,omitempty"`
}

// ServerCapabilitiesResponseBodyResponseBody is used to define fields on
// response body types.
type ServerCapabilitiesResponseBodyResponseBody struct {
	// Tool capabilities
	Tools *ToolsCapabilityResponseBodyResponseBody `form:"tools,omitempty" json:"tools,omitempty" xml:"tools,omitempty"`
	// Resource capabilities
	Resources *ResourcesCapabilityResponseBodyResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	// Prompt capabilities
	Prompts *PromptsCapabilityResponseBodyResponseBody `form:"prompts,omitempty" json:"prompts,omitempty" xml:"prompts,omitempty"`
}

// ToolsCapabilityResponseBodyResponseBody is used to define fields on response
// body types.
type ToolsCapabilityResponseBodyResponseBody struct {
}

// ResourcesCapabilityResponseBodyResponseBody is used to define fields on
// response body types.
type ResourcesCapabilityResponseBodyResponseBody struct {
}

// PromptsCapabilityResponseBodyResponseBody is used to define fields on
// response body types.
type PromptsCapabilityResponseBodyResponseBody struct {
}

// ServerInfoResponseBodyResponseBody is used to define fields on response body
// types.
type ServerInfoResponseBodyResponseBody struct {
	// Server name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Server version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// PingResponseBodyResponseBody is used to define fields on response body types.
type PingResponseBodyResponseBody struct {
	// Response to ping
	Pong *bool `form:"pong,omitempty" json:"pong,omitempty" xml:"pong,omitempty"`
}

// ToolsListResponseBodyResponseBody is used to define fields on response body
// types.
type ToolsListResponseBodyResponseBody struct {
	// List of available tools
	Tools []*ToolInfoResponseBodyResponseBody `form:"tools,omitempty" json:"tools,omitempty" xml:"tools,omitempty"`
}

// ToolInfoResponseBodyResponseBody is used to define fields on response body
// types.
type ToolInfoResponseBodyResponseBody struct {
	// Tool name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Tool description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// JSON Schema for tool input
	InputSchema any `form:"inputSchema,omitempty" json:"inputSchema,omitempty" xml:"inputSchema,omitempty"`
}

// ToolsCallResponseBodyResponseBody is used to define fields on response body
// types.
type ToolsCallResponseBodyResponseBody struct {
	// Tool execution results
	Content []*ContentItemResponseBodyResponseBody `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Whether the tool encountered an error
	IsError *bool `form:"isError,omitempty" json:"isError,omitempty" xml:"isError,omitempty"`
}

// ContentItemResponseBodyResponseBody is used to define fields on response
// body types.
type ContentItemResponseBodyResponseBody struct {
	// Content type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Text content
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Base64 encoded data
	Data *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// ResourcesListResponseBodyResponseBody is used to define fields on response
// body types.
type ResourcesListResponseBodyResponseBody struct {
	// List of available resources
	Resources []*ResourceInfoResponseBodyResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// ResourceInfoResponseBodyResponseBody is used to define fields on response
// body types.
type ResourceInfoResponseBodyResponseBody struct {
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
	// Resource name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Resource description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
}

// ResourcesReadResponseBodyResponseBody is used to define fields on response
// body types.
type ResourcesReadResponseBodyResponseBody struct {
	// Resource contents
	Contents []*ResourceContentResponseBodyResponseBody `form:"contents,omitempty" json:"contents,omitempty" xml:"contents,omitempty"`
}

// ResourceContentResponseBodyResponseBody is used to define fields on response
// body types.
type ResourceContentResponseBodyResponseBody struct {
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
	// Content MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	// Text content
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Base64 encoded binary content
	Blob *string `form:"blob,omitempty" json:"blob,omitempty" xml:"blob,omitempty"`
}

// PromptsListResponseBodyResponseBody is used to define fields on response
// body types.
type PromptsListResponseBodyResponseBody struct {
	// List of available prompts
	Prompts []*PromptInfoResponseBodyResponseBody `form:"prompts,omitempty" json:"prompts,omitempty" xml:"prompts,omitempty"`
}

// PromptInfoResponseBodyResponseBody is used to define fields on response body
// types.
type PromptInfoResponseBodyResponseBody struct {
	// Prompt name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Prompt description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Prompt arguments
	Arguments []*PromptArgumentResponseBodyResponseBody `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
}

// PromptArgumentResponseBodyResponseBody is used to define fields on response
// body types.
type PromptArgumentResponseBodyResponseBody struct {
	// Argument name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Argument description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether the argument is required
	Required *bool `form:"required,omitempty" json:"required,omitempty" xml:"required,omitempty"`
}

// PromptsGetResponseBodyResponseBody is used to define fields on response body
// types.
type PromptsGetResponseBodyResponseBody struct {
	// Prompt description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Prompt messages
	Messages []*PromptMessageResponseBodyResponseBody `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
}

// PromptMessageResponseBodyResponseBody is used to define fields on response
// body types.
type PromptMessageResponseBodyResponseBody struct {
	// Message role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Message content
	Content *MessageContentResponseBodyResponseBody `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// MessageContentResponseBodyResponseBody is used to define fields on response
// body types.
type MessageContentResponseBodyResponseBody struct {
	// Content type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Text content
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Base64 encoded data
	Data *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// MIME type
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	// Resource URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
}

// SubscribeResponseBodyResponseBody is used to define fields on response body
// types.
type SubscribeResponseBodyResponseBody struct {
	// Whether subscription was successful
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UnsubscribeResponseBodyResponseBody is used to define fields on response
// body types.
type UnsubscribeResponseBodyResponseBody struct {
	// Whether unsubscription was successful
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// NewStructMCPprotocolVersionProtocolVersionStringForm builds the HTTP request
// body from the payload of the "initialize" endpoint of the "mcp_assistant"
// service.
func NewStructMCPprotocolVersionProtocolVersionStringForm(p *mcpassistant.InitializePayload) struct {
	// MCP protocol version
	ProtocolVersion *string `form:"protocolVersion" json:"protocolVersion" xml:"protocolVersion"`
	// Client information
	ClientInfo *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody `form:"clientInfo" json:"clientInfo" xml:"clientInfo"`
} {
	body := &struct {
		// MCP protocol version
		ProtocolVersion *string `form:"protocolVersion" json:"protocolVersion" xml:"protocolVersion"`
		// Client information
		ClientInfo *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody `form:"clientInfo" json:"clientInfo" xml:"clientInfo"`
	}{
		ProtocolVersion: &p.ProtocolVersion,
	}
	if p.ClientInfo != nil {
		body.ClientInfo = marshalMcpassistantClientInfoToClientInfoRequestBodyRequestBodyRequestBodyRequestBody(p.ClientInfo)
	}
	return body
}

// NewInitializeResultOK builds a "mcp_assistant" service "initialize" endpoint
// result from a HTTP "OK" response.
func NewInitializeResultOK(body *InitializeResponseBody) *mcpassistant.InitializeResult {
	v := &mcpassistant.InitializeResult{
		ProtocolVersion: *body.ProtocolVersion,
	}
	v.Capabilities = unmarshalServerCapabilitiesResponseBodyResponseBodyToMcpassistantServerCapabilities(body.Capabilities)
	v.ServerInfo = unmarshalServerInfoResponseBodyResponseBodyToMcpassistantServerInfo(body.ServerInfo)

	return v
}

// NewPingResultOK builds a "mcp_assistant" service "ping" endpoint result from
// a HTTP "OK" response.
func NewPingResultOK(body *PingResponseBody) *mcpassistant.PingResult {
	v := &mcpassistant.PingResult{
		Pong: *body.Pong,
	}

	return v
}

// NewToolsListResultOK builds a "mcp_assistant" service "tools/list" endpoint
// result from a HTTP "OK" response.
func NewToolsListResultOK(body *ToolsListResponseBody) *mcpassistant.ToolsListResult {
	v := &mcpassistant.ToolsListResult{}
	v.Tools = make([]*mcpassistant.ToolInfo, len(body.Tools))
	for i, val := range body.Tools {
		v.Tools[i] = unmarshalToolInfoResponseBodyResponseBodyToMcpassistantToolInfo(val)
	}

	return v
}

// NewToolsCallResultOK builds a "mcp_assistant" service "tools/call" endpoint
// result from a HTTP "OK" response.
func NewToolsCallResultOK(body *ToolsCallResponseBody) *mcpassistant.ToolsCallResult {
	v := &mcpassistant.ToolsCallResult{
		IsError: body.IsError,
	}
	v.Content = make([]*mcpassistant.ContentItem, len(body.Content))
	for i, val := range body.Content {
		v.Content[i] = unmarshalContentItemResponseBodyResponseBodyToMcpassistantContentItem(val)
	}

	return v
}

// NewResourcesListResultOK builds a "mcp_assistant" service "resources/list"
// endpoint result from a HTTP "OK" response.
func NewResourcesListResultOK(body *ResourcesListResponseBody) *mcpassistant.ResourcesListResult {
	v := &mcpassistant.ResourcesListResult{}
	v.Resources = make([]*mcpassistant.ResourceInfo, len(body.Resources))
	for i, val := range body.Resources {
		v.Resources[i] = unmarshalResourceInfoResponseBodyResponseBodyToMcpassistantResourceInfo(val)
	}

	return v
}

// NewResourcesReadResultOK builds a "mcp_assistant" service "resources/read"
// endpoint result from a HTTP "OK" response.
func NewResourcesReadResultOK(body *ResourcesReadResponseBody) *mcpassistant.ResourcesReadResult {
	v := &mcpassistant.ResourcesReadResult{}
	v.Contents = make([]*mcpassistant.ResourceContent, len(body.Contents))
	for i, val := range body.Contents {
		v.Contents[i] = unmarshalResourceContentResponseBodyResponseBodyToMcpassistantResourceContent(val)
	}

	return v
}

// NewPromptsListResultOK builds a "mcp_assistant" service "prompts/list"
// endpoint result from a HTTP "OK" response.
func NewPromptsListResultOK(body *PromptsListResponseBody) *mcpassistant.PromptsListResult {
	v := &mcpassistant.PromptsListResult{}
	v.Prompts = make([]*mcpassistant.PromptInfo, len(body.Prompts))
	for i, val := range body.Prompts {
		v.Prompts[i] = unmarshalPromptInfoResponseBodyResponseBodyToMcpassistantPromptInfo(val)
	}

	return v
}

// NewPromptsGetResultOK builds a "mcp_assistant" service "prompts/get"
// endpoint result from a HTTP "OK" response.
func NewPromptsGetResultOK(body *PromptsGetResponseBody) *mcpassistant.PromptsGetResult {
	v := &mcpassistant.PromptsGetResult{
		Description: body.Description,
	}
	v.Messages = make([]*mcpassistant.PromptMessage, len(body.Messages))
	for i, val := range body.Messages {
		v.Messages[i] = unmarshalPromptMessageResponseBodyResponseBodyToMcpassistantPromptMessage(val)
	}

	return v
}

// NewSubscribeResultOK builds a "mcp_assistant" service "subscribe" endpoint
// result from a HTTP "OK" response.
func NewSubscribeResultOK(body *SubscribeResponseBody) *mcpassistant.SubscribeResult {
	v := &mcpassistant.SubscribeResult{
		Success: *body.Success,
	}

	return v
}

// NewUnsubscribeResultOK builds a "mcp_assistant" service "unsubscribe"
// endpoint result from a HTTP "OK" response.
func NewUnsubscribeResultOK(body *UnsubscribeResponseBody) *mcpassistant.UnsubscribeResult {
	v := &mcpassistant.UnsubscribeResult{
		Success: *body.Success,
	}

	return v
}

// ValidateInitializeResponseBody runs the validations defined on
// InitializeResponseBody
func ValidateInitializeResponseBody(body *InitializeResponseBody) (err error) {
	if body.ProtocolVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protocolVersion", "body"))
	}
	if body.Capabilities == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("capabilities", "body"))
	}
	if body.ServerInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("serverInfo", "body"))
	}
	if body.ServerInfo != nil {
		if err2 := ValidateServerInfoResponseBodyResponseBody(body.ServerInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePingResponseBody runs the validations defined on PingResponseBody
func ValidatePingResponseBody(body *PingResponseBody) (err error) {
	if body.Pong == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pong", "body"))
	}
	return
}

// ValidateToolsListResponseBody runs the validations defined on
// Tools/ListResponseBody
func ValidateToolsListResponseBody(body *ToolsListResponseBody) (err error) {
	if body.Tools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tools", "body"))
	}
	for _, e := range body.Tools {
		if e != nil {
			if err2 := ValidateToolInfoResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateToolsCallResponseBody runs the validations defined on
// Tools/CallResponseBody
func ValidateToolsCallResponseBody(body *ToolsCallResponseBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	for _, e := range body.Content {
		if e != nil {
			if err2 := ValidateContentItemResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResourcesListResponseBody runs the validations defined on
// Resources/ListResponseBody
func ValidateResourcesListResponseBody(body *ResourcesListResponseBody) (err error) {
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	for _, e := range body.Resources {
		if e != nil {
			if err2 := ValidateResourceInfoResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResourcesReadResponseBody runs the validations defined on
// Resources/ReadResponseBody
func ValidateResourcesReadResponseBody(body *ResourcesReadResponseBody) (err error) {
	if body.Contents == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("contents", "body"))
	}
	for _, e := range body.Contents {
		if e != nil {
			if err2 := ValidateResourceContentResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePromptsListResponseBody runs the validations defined on
// Prompts/ListResponseBody
func ValidatePromptsListResponseBody(body *PromptsListResponseBody) (err error) {
	if body.Prompts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prompts", "body"))
	}
	for _, e := range body.Prompts {
		if e != nil {
			if err2 := ValidatePromptInfoResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePromptsGetResponseBody runs the validations defined on
// Prompts/GetResponseBody
func ValidatePromptsGetResponseBody(body *PromptsGetResponseBody) (err error) {
	if body.Messages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("messages", "body"))
	}
	for _, e := range body.Messages {
		if e != nil {
			if err2 := ValidatePromptMessageResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubscribeResponseBody runs the validations defined on
// SubscribeResponseBody
func ValidateSubscribeResponseBody(body *SubscribeResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateUnsubscribeResponseBody runs the validations defined on
// UnsubscribeResponseBody
func ValidateUnsubscribeResponseBody(body *UnsubscribeResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateInitializeResponseBodyResponseBody runs the validations defined on
// InitializeResponseBodyResponseBody
func ValidateInitializeResponseBodyResponseBody(body *InitializeResponseBodyResponseBody) (err error) {
	if body.ProtocolVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protocolVersion", "body"))
	}
	if body.Capabilities == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("capabilities", "body"))
	}
	if body.ServerInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("serverInfo", "body"))
	}
	if body.ServerInfo != nil {
		if err2 := ValidateServerInfoResponseBodyResponseBody(body.ServerInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateServerInfoResponseBodyResponseBody runs the validations defined on
// ServerInfoResponseBodyResponseBody
func ValidateServerInfoResponseBodyResponseBody(body *ServerInfoResponseBodyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}

// ValidatePingResponseBodyResponseBody runs the validations defined on
// PingResponseBodyResponseBody
func ValidatePingResponseBodyResponseBody(body *PingResponseBodyResponseBody) (err error) {
	if body.Pong == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pong", "body"))
	}
	return
}

// ValidateToolsListResponseBodyResponseBody runs the validations defined on
// Tools/ListResponseBodyResponseBody
func ValidateToolsListResponseBodyResponseBody(body *ToolsListResponseBodyResponseBody) (err error) {
	if body.Tools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tools", "body"))
	}
	for _, e := range body.Tools {
		if e != nil {
			if err2 := ValidateToolInfoResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateToolInfoResponseBodyResponseBody runs the validations defined on
// ToolInfoResponseBodyResponseBody
func ValidateToolInfoResponseBodyResponseBody(body *ToolInfoResponseBodyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateToolsCallResponseBodyResponseBody runs the validations defined on
// Tools/CallResponseBodyResponseBody
func ValidateToolsCallResponseBodyResponseBody(body *ToolsCallResponseBodyResponseBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	for _, e := range body.Content {
		if e != nil {
			if err2 := ValidateContentItemResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateContentItemResponseBodyResponseBody runs the validations defined on
// ContentItemResponseBodyResponseBody
func ValidateContentItemResponseBodyResponseBody(body *ContentItemResponseBodyResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "text" || *body.Type == "image" || *body.Type == "resource") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"text", "image", "resource"}))
		}
	}
	return
}

// ValidateResourcesListResponseBodyResponseBody runs the validations defined
// on Resources/ListResponseBodyResponseBody
func ValidateResourcesListResponseBodyResponseBody(body *ResourcesListResponseBodyResponseBody) (err error) {
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	for _, e := range body.Resources {
		if e != nil {
			if err2 := ValidateResourceInfoResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResourceInfoResponseBodyResponseBody runs the validations defined on
// ResourceInfoResponseBodyResponseBody
func ValidateResourceInfoResponseBodyResponseBody(body *ResourceInfoResponseBodyResponseBody) (err error) {
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	return
}

// ValidateResourcesReadResponseBodyResponseBody runs the validations defined
// on Resources/ReadResponseBodyResponseBody
func ValidateResourcesReadResponseBodyResponseBody(body *ResourcesReadResponseBodyResponseBody) (err error) {
	if body.Contents == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("contents", "body"))
	}
	for _, e := range body.Contents {
		if e != nil {
			if err2 := ValidateResourceContentResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResourceContentResponseBodyResponseBody runs the validations defined
// on ResourceContentResponseBodyResponseBody
func ValidateResourceContentResponseBodyResponseBody(body *ResourceContentResponseBodyResponseBody) (err error) {
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	return
}

// ValidatePromptsListResponseBodyResponseBody runs the validations defined on
// Prompts/ListResponseBodyResponseBody
func ValidatePromptsListResponseBodyResponseBody(body *PromptsListResponseBodyResponseBody) (err error) {
	if body.Prompts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prompts", "body"))
	}
	for _, e := range body.Prompts {
		if e != nil {
			if err2 := ValidatePromptInfoResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePromptInfoResponseBodyResponseBody runs the validations defined on
// PromptInfoResponseBodyResponseBody
func ValidatePromptInfoResponseBodyResponseBody(body *PromptInfoResponseBodyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	for _, e := range body.Arguments {
		if e != nil {
			if err2 := ValidatePromptArgumentResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePromptArgumentResponseBodyResponseBody runs the validations defined
// on PromptArgumentResponseBodyResponseBody
func ValidatePromptArgumentResponseBodyResponseBody(body *PromptArgumentResponseBodyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Required == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("required", "body"))
	}
	return
}

// ValidatePromptsGetResponseBodyResponseBody runs the validations defined on
// Prompts/GetResponseBodyResponseBody
func ValidatePromptsGetResponseBodyResponseBody(body *PromptsGetResponseBodyResponseBody) (err error) {
	if body.Messages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("messages", "body"))
	}
	for _, e := range body.Messages {
		if e != nil {
			if err2 := ValidatePromptMessageResponseBodyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePromptMessageResponseBodyResponseBody runs the validations defined
// on PromptMessageResponseBodyResponseBody
func ValidatePromptMessageResponseBodyResponseBody(body *PromptMessageResponseBodyResponseBody) (err error) {
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Role != nil {
		if !(*body.Role == "user" || *body.Role == "assistant" || *body.Role == "system") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", *body.Role, []any{"user", "assistant", "system"}))
		}
	}
	if body.Content != nil {
		if err2 := ValidateMessageContentResponseBodyResponseBody(body.Content); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMessageContentResponseBodyResponseBody runs the validations defined
// on MessageContentResponseBodyResponseBody
func ValidateMessageContentResponseBodyResponseBody(body *MessageContentResponseBodyResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "text" || *body.Type == "image" || *body.Type == "resource") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"text", "image", "resource"}))
		}
	}
	return
}

// ValidateSubscribeResponseBodyResponseBody runs the validations defined on
// SubscribeResponseBodyResponseBody
func ValidateSubscribeResponseBodyResponseBody(body *SubscribeResponseBodyResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateUnsubscribeResponseBodyResponseBody runs the validations defined on
// UnsubscribeResponseBodyResponseBody
func ValidateUnsubscribeResponseBodyResponseBody(body *UnsubscribeResponseBodyResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}
