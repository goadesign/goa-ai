// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mcp_assistant client JSON-RPC transport
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"bytes"
	"context"
	"net/http"
	"sync"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the mcp_assistant service endpoint HTTP clients.
type Client struct {
	// Doer is the HTTP client used to make requests to the mcp_assistant service.
	Doer goahttp.Doer
	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// bufferPool is a pool of bytes.Buffers for encoding requests.
var bufferPool = sync.Pool{
	New: func() any { return new(bytes.Buffer) },
}

// NewClient instantiates HTTP clients for all the mcp_assistant service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {

	return &Client{
		Doer:                doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Initialize returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service initialize method.
func (c *Client) Initialize() goa.Endpoint {
	var (
		encodeRequest  = EncodeInitializeRequest(c.encoder)
		decodeResponse = DecodeInitializeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildInitializeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "initialize", err)
		}
		return decodeResponse(resp)
	}
}

// Ping returns an endpoint that makes JSON-RPC requests to the mcp_assistant
// service ping method.
func (c *Client) Ping() goa.Endpoint {
	var (
		encodeRequest  = EncodePingRequest(c.encoder)
		decodeResponse = DecodePingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildPingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "ping", err)
		}
		return decodeResponse(resp)
	}
}

// ToolsList returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service tools/list method.
func (c *Client) ToolsList() goa.Endpoint {
	var (
		encodeRequest  = EncodeToolsListRequest(c.encoder)
		decodeResponse = DecodeToolsListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildToolsListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "tools/list", err)
		}
		return decodeResponse(resp)
	}
}

// ToolsCall returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service tools/call method.
func (c *Client) ToolsCall() goa.Endpoint {
	var (
		encodeRequest  = EncodeToolsCallRequest(c.encoder)
		decodeResponse = DecodeToolsCallResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildToolsCallRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "tools/call", err)
		}
		return decodeResponse(resp)
	}
}

// ResourcesList returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service resources/list method.
func (c *Client) ResourcesList() goa.Endpoint {
	var (
		encodeRequest  = EncodeResourcesListRequest(c.encoder)
		decodeResponse = DecodeResourcesListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildResourcesListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "resources/list", err)
		}
		return decodeResponse(resp)
	}
}

// ResourcesRead returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service resources/read method.
func (c *Client) ResourcesRead() goa.Endpoint {
	var (
		encodeRequest  = EncodeResourcesReadRequest(c.encoder)
		decodeResponse = DecodeResourcesReadResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildResourcesReadRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "resources/read", err)
		}
		return decodeResponse(resp)
	}
}

// ResourcesSubscribe returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service resources/subscribe method.
func (c *Client) ResourcesSubscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeResourcesSubscribeRequest(c.encoder)
		decodeResponse = DecodeResourcesSubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildResourcesSubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "resources/subscribe", err)
		}
		return decodeResponse(resp)
	}
}

// ResourcesUnsubscribe returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service resources/unsubscribe method.
func (c *Client) ResourcesUnsubscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeResourcesUnsubscribeRequest(c.encoder)
		decodeResponse = DecodeResourcesUnsubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildResourcesUnsubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "resources/unsubscribe", err)
		}
		return decodeResponse(resp)
	}
}

// PromptsList returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service prompts/list method.
func (c *Client) PromptsList() goa.Endpoint {
	var (
		encodeRequest  = EncodePromptsListRequest(c.encoder)
		decodeResponse = DecodePromptsListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildPromptsListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "prompts/list", err)
		}
		return decodeResponse(resp)
	}
}

// PromptsGet returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service prompts/get method.
func (c *Client) PromptsGet() goa.Endpoint {
	var (
		encodeRequest  = EncodePromptsGetRequest(c.encoder)
		decodeResponse = DecodePromptsGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildPromptsGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "prompts/get", err)
		}
		return decodeResponse(resp)
	}
}

// NotifyStatusUpdate returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service notify_status_update method.
func (c *Client) NotifyStatusUpdate() goa.Endpoint {
	var (
		encodeRequest  = EncodeNotifyStatusUpdateRequest(c.encoder)
		decodeResponse = DecodeNotifyStatusUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildNotifyStatusUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "notify_status_update", err)
		}
		return decodeResponse(resp)
	}
}

// Subscribe returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service subscribe method.
func (c *Client) Subscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubscribeRequest(c.encoder)
		decodeResponse = DecodeSubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "subscribe", err)
		}
		return decodeResponse(resp)
	}
}

// Unsubscribe returns an endpoint that makes JSON-RPC requests to the
// mcp_assistant service unsubscribe method.
func (c *Client) Unsubscribe() goa.Endpoint {
	var (
		encodeRequest  = EncodeUnsubscribeRequest(c.encoder)
		decodeResponse = DecodeUnsubscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUnsubscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp_assistant", "unsubscribe", err)
		}
		return decodeResponse(resp)
	}
}
