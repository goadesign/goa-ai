// Code generated by goa v3.22.2, DO NOT EDIT.
//
// mcp_assistant JSON-RPC client encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	mcpassistant "example.com/assistant/gen/mcp_assistant"
	"github.com/google/uuid"
	goahttp "goa.design/goa/v3/http"
	"goa.design/goa/v3/jsonrpc"
)

// BuildInitializeRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "initialize" endpoint
func (c *Client) BuildInitializeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InitializeMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "initialize", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInitializeRequest returns an encoder for requests sent to the
// mcp_assistant initialize server.
func EncodeInitializeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.InitializePayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "initialize", "*mcpassistant.InitializePayload", v)
		}
		b := NewStructMCPprotocolVersionProtocolVersionStringForm(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "initialize",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "initialize", err)
		}
		return nil
	}
}

// DecodeInitializeResponse returns a decoder for responses returned by the
// mcp_assistant service initialize JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeInitializeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "initialize", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "initialize", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "initialize", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body InitializeResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "initialize", err)
		}
		err = ValidateInitializeResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "initialize", err)
		}
		res := NewInitializeResultOK(&body)
		return res, nil
	}
}

// BuildPingRequest instantiates a HTTP request object with method and path set
// to call the "mcp_assistant" service "ping" endpoint
func (c *Client) BuildPingRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PingMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "ping", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePingResponse returns a decoder for responses returned by the
// mcp_assistant service ping JSON-RPC method. restoreBody controls whether the
// response body should be restored after having been read.
func DecodePingResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "ping", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "ping", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "ping", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body PingResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "ping", err)
		}
		err = ValidatePingResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "ping", err)
		}
		res := NewPingResultOK(&body)
		return res, nil
	}
}

// BuildToolsListRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "tools/list" endpoint
func (c *Client) BuildToolsListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ToolsListMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "tools/list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeToolsListRequest returns an encoder for requests sent to the
// mcp_assistant tools/list server.
func EncodeToolsListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.ToolsListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "tools/list", "*mcpassistant.ToolsListPayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "tools/list",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "tools/list", err)
		}
		return nil
	}
}

// DecodeToolsListResponse returns a decoder for responses returned by the
// mcp_assistant service tools/list JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeToolsListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "tools/list", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "tools/list", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "tools/list", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ToolsListResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "tools/list", err)
		}
		err = ValidateToolsListResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "tools/list", err)
		}
		res := NewToolsListResultOK(&body)
		return res, nil
	}
}

// BuildToolsCallRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "tools/call" endpoint
func (c *Client) BuildToolsCallRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ToolsCallMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "tools/call", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeToolsCallRequest returns an encoder for requests sent to the
// mcp_assistant tools/call server.
func EncodeToolsCallRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.ToolsCallPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "tools/call", "*mcpassistant.ToolsCallPayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "tools/call",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "tools/call", err)
		}
		return nil
	}
}

// DecodeToolsCallResponse returns a decoder for responses returned by the
// mcp_assistant service tools/call JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeToolsCallResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "tools/call", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "tools/call", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "tools/call", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ToolsCallResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "tools/call", err)
		}
		err = ValidateToolsCallResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "tools/call", err)
		}
		res := NewToolsCallResultOK(&body)
		return res, nil
	}
}

// BuildResourcesListRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "resources/list" endpoint
func (c *Client) BuildResourcesListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResourcesListMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "resources/list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResourcesListRequest returns an encoder for requests sent to the
// mcp_assistant resources/list server.
func EncodeResourcesListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.ResourcesListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "resources/list", "*mcpassistant.ResourcesListPayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "resources/list",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "resources/list", err)
		}
		return nil
	}
}

// DecodeResourcesListResponse returns a decoder for responses returned by the
// mcp_assistant service resources/list JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeResourcesListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/list", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "resources/list", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/list", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ResourcesListResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "resources/list", err)
		}
		err = ValidateResourcesListResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "resources/list", err)
		}
		res := NewResourcesListResultOK(&body)
		return res, nil
	}
}

// BuildResourcesReadRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "resources/read" endpoint
func (c *Client) BuildResourcesReadRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResourcesReadMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "resources/read", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResourcesReadRequest returns an encoder for requests sent to the
// mcp_assistant resources/read server.
func EncodeResourcesReadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.ResourcesReadPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "resources/read", "*mcpassistant.ResourcesReadPayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "resources/read",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "resources/read", err)
		}
		return nil
	}
}

// DecodeResourcesReadResponse returns a decoder for responses returned by the
// mcp_assistant service resources/read JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeResourcesReadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/read", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "resources/read", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/read", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ResourcesReadResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "resources/read", err)
		}
		err = ValidateResourcesReadResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "resources/read", err)
		}
		res := NewResourcesReadResultOK(&body)
		return res, nil
	}
}

// BuildResourcesSubscribeRequest instantiates a HTTP request object with
// method and path set to call the "mcp_assistant" service
// "resources/subscribe" endpoint
func (c *Client) BuildResourcesSubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResourcesSubscribeMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "resources/subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResourcesSubscribeRequest returns an encoder for requests sent to the
// mcp_assistant resources/subscribe server.
func EncodeResourcesSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.ResourcesSubscribePayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "resources/subscribe", "*mcpassistant.ResourcesSubscribePayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "resources/subscribe",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "resources/subscribe", err)
		}
		return nil
	}
}

// DecodeResourcesSubscribeResponse returns a decoder for responses returned by
// the mcp_assistant service resources/subscribe JSON-RPC method. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeResourcesSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/subscribe", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "resources/subscribe", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/subscribe", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		return nil, nil
	}
}

// BuildResourcesUnsubscribeRequest instantiates a HTTP request object with
// method and path set to call the "mcp_assistant" service
// "resources/unsubscribe" endpoint
func (c *Client) BuildResourcesUnsubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResourcesUnsubscribeMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "resources/unsubscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResourcesUnsubscribeRequest returns an encoder for requests sent to
// the mcp_assistant resources/unsubscribe server.
func EncodeResourcesUnsubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.ResourcesUnsubscribePayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "resources/unsubscribe", "*mcpassistant.ResourcesUnsubscribePayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "resources/unsubscribe",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "resources/unsubscribe", err)
		}
		return nil
	}
}

// DecodeResourcesUnsubscribeResponse returns a decoder for responses returned
// by the mcp_assistant service resources/unsubscribe JSON-RPC method.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeResourcesUnsubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/unsubscribe", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "resources/unsubscribe", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "resources/unsubscribe", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		return nil, nil
	}
}

// BuildPromptsListRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "prompts/list" endpoint
func (c *Client) BuildPromptsListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PromptsListMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "prompts/list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePromptsListRequest returns an encoder for requests sent to the
// mcp_assistant prompts/list server.
func EncodePromptsListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.PromptsListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "prompts/list", "*mcpassistant.PromptsListPayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "prompts/list",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "prompts/list", err)
		}
		return nil
	}
}

// DecodePromptsListResponse returns a decoder for responses returned by the
// mcp_assistant service prompts/list JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodePromptsListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "prompts/list", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "prompts/list", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "prompts/list", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body PromptsListResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "prompts/list", err)
		}
		err = ValidatePromptsListResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "prompts/list", err)
		}
		res := NewPromptsListResultOK(&body)
		return res, nil
	}
}

// BuildPromptsGetRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "prompts/get" endpoint
func (c *Client) BuildPromptsGetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PromptsGetMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "prompts/get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePromptsGetRequest returns an encoder for requests sent to the
// mcp_assistant prompts/get server.
func EncodePromptsGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.PromptsGetPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "prompts/get", "*mcpassistant.PromptsGetPayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "prompts/get",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "prompts/get", err)
		}
		return nil
	}
}

// DecodePromptsGetResponse returns a decoder for responses returned by the
// mcp_assistant service prompts/get JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodePromptsGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "prompts/get", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "prompts/get", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "prompts/get", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body PromptsGetResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "prompts/get", err)
		}
		err = ValidatePromptsGetResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "prompts/get", err)
		}
		res := NewPromptsGetResultOK(&body)
		return res, nil
	}
}

// BuildNotifyStatusUpdateRequest instantiates a HTTP request object with
// method and path set to call the "mcp_assistant" service
// "notify_status_update" endpoint
func (c *Client) BuildNotifyStatusUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: NotifyStatusUpdateMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "notify_status_update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeNotifyStatusUpdateRequest returns an encoder for requests sent to the
// mcp_assistant notify_status_update server.
func EncodeNotifyStatusUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.NotifyStatusUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "notify_status_update", "*mcpassistant.NotifyStatusUpdatePayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "notify_status_update",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "notify_status_update", err)
		}
		return nil
	}
}

// DecodeNotifyStatusUpdateResponse returns a decoder for responses returned by
// the mcp_assistant service notify_status_update JSON-RPC method. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeNotifyStatusUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "notify_status_update", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "notify_status_update", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "notify_status_update", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		return nil, nil
	}
}

// BuildSubscribeRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "subscribe" endpoint
func (c *Client) BuildSubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubscribeMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeRequest returns an encoder for requests sent to the
// mcp_assistant subscribe server.
func EncodeSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.SubscribePayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "subscribe", "*mcpassistant.SubscribePayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "subscribe",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "subscribe", err)
		}
		return nil
	}
}

// DecodeSubscribeResponse returns a decoder for responses returned by the
// mcp_assistant service subscribe JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "subscribe", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "subscribe", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "subscribe", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body SubscribeResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "subscribe", err)
		}
		err = ValidateSubscribeResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "subscribe", err)
		}
		res := NewSubscribeResultOK(&body)
		return res, nil
	}
}

// BuildUnsubscribeRequest instantiates a HTTP request object with method and
// path set to call the "mcp_assistant" service "unsubscribe" endpoint
func (c *Client) BuildUnsubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnsubscribeMcpAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp_assistant", "unsubscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnsubscribeRequest returns an encoder for requests sent to the
// mcp_assistant unsubscribe server.
func EncodeUnsubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpassistant.UnsubscribePayload)
		if !ok {
			return goahttp.ErrInvalidType("mcp_assistant", "unsubscribe", "*mcpassistant.UnsubscribePayload", v)
		}
		b := p
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "unsubscribe",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "unsubscribe", err)
		}
		return nil
	}
}

// DecodeUnsubscribeResponse returns a decoder for responses returned by the
// mcp_assistant service unsubscribe JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeUnsubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp_assistant", "unsubscribe", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "unsubscribe", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp_assistant", "unsubscribe", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body UnsubscribeResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("mcp_assistant", "unsubscribe", err)
		}
		err = ValidateUnsubscribeResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("mcp_assistant", "unsubscribe", err)
		}
		res := NewUnsubscribeResultOK(&body)
		return res, nil
	}
}

// marshalMcpassistantClientInfoToClientInfoRequestBodyRequestBodyRequestBodyRequestBody
// builds a value of type
// *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody from a value of type
// *mcpassistant.ClientInfo.
func marshalMcpassistantClientInfoToClientInfoRequestBodyRequestBodyRequestBodyRequestBody(v *mcpassistant.ClientInfo) *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody {
	res := &ClientInfoRequestBodyRequestBodyRequestBodyRequestBody{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalClientInfoRequestBodyRequestBodyRequestBodyRequestBodyToMcpassistantClientInfo
// builds a value of type *mcpassistant.ClientInfo from a value of type
// *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody.
func marshalClientInfoRequestBodyRequestBodyRequestBodyRequestBodyToMcpassistantClientInfo(v *ClientInfoRequestBodyRequestBodyRequestBodyRequestBody) *mcpassistant.ClientInfo {
	if v == nil {
		return nil
	}
	res := &mcpassistant.ClientInfo{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// unmarshalServerCapabilitiesResponseBodyResponseBodyToMcpassistantServerCapabilities
// builds a value of type *mcpassistant.ServerCapabilities from a value of type
// *ServerCapabilitiesResponseBodyResponseBody.
func unmarshalServerCapabilitiesResponseBodyResponseBodyToMcpassistantServerCapabilities(v *ServerCapabilitiesResponseBodyResponseBody) *mcpassistant.ServerCapabilities {
	res := &mcpassistant.ServerCapabilities{}
	if v.Tools != nil {
		res.Tools = unmarshalToolsCapabilityResponseBodyResponseBodyToMcpassistantToolsCapability(v.Tools)
	}
	if v.Resources != nil {
		res.Resources = unmarshalResourcesCapabilityResponseBodyResponseBodyToMcpassistantResourcesCapability(v.Resources)
	}
	if v.Prompts != nil {
		res.Prompts = unmarshalPromptsCapabilityResponseBodyResponseBodyToMcpassistantPromptsCapability(v.Prompts)
	}

	return res
}

// unmarshalToolsCapabilityResponseBodyResponseBodyToMcpassistantToolsCapability
// builds a value of type *mcpassistant.ToolsCapability from a value of type
// *ToolsCapabilityResponseBodyResponseBody.
func unmarshalToolsCapabilityResponseBodyResponseBodyToMcpassistantToolsCapability(v *ToolsCapabilityResponseBodyResponseBody) *mcpassistant.ToolsCapability {
	if v == nil {
		return nil
	}
	res := &mcpassistant.ToolsCapability{}

	return res
}

// unmarshalResourcesCapabilityResponseBodyResponseBodyToMcpassistantResourcesCapability
// builds a value of type *mcpassistant.ResourcesCapability from a value of
// type *ResourcesCapabilityResponseBodyResponseBody.
func unmarshalResourcesCapabilityResponseBodyResponseBodyToMcpassistantResourcesCapability(v *ResourcesCapabilityResponseBodyResponseBody) *mcpassistant.ResourcesCapability {
	if v == nil {
		return nil
	}
	res := &mcpassistant.ResourcesCapability{}

	return res
}

// unmarshalPromptsCapabilityResponseBodyResponseBodyToMcpassistantPromptsCapability
// builds a value of type *mcpassistant.PromptsCapability from a value of type
// *PromptsCapabilityResponseBodyResponseBody.
func unmarshalPromptsCapabilityResponseBodyResponseBodyToMcpassistantPromptsCapability(v *PromptsCapabilityResponseBodyResponseBody) *mcpassistant.PromptsCapability {
	if v == nil {
		return nil
	}
	res := &mcpassistant.PromptsCapability{}

	return res
}

// unmarshalServerInfoResponseBodyResponseBodyToMcpassistantServerInfo builds a
// value of type *mcpassistant.ServerInfo from a value of type
// *ServerInfoResponseBodyResponseBody.
func unmarshalServerInfoResponseBodyResponseBodyToMcpassistantServerInfo(v *ServerInfoResponseBodyResponseBody) *mcpassistant.ServerInfo {
	res := &mcpassistant.ServerInfo{
		Name:    *v.Name,
		Version: *v.Version,
	}

	return res
}

// unmarshalToolInfoResponseBodyResponseBodyToMcpassistantToolInfo builds a
// value of type *mcpassistant.ToolInfo from a value of type
// *ToolInfoResponseBodyResponseBody.
func unmarshalToolInfoResponseBodyResponseBodyToMcpassistantToolInfo(v *ToolInfoResponseBodyResponseBody) *mcpassistant.ToolInfo {
	res := &mcpassistant.ToolInfo{
		Name:        *v.Name,
		Description: v.Description,
		InputSchema: v.InputSchema,
	}

	return res
}

// unmarshalContentItemResponseBodyResponseBodyToMcpassistantContentItem builds
// a value of type *mcpassistant.ContentItem from a value of type
// *ContentItemResponseBodyResponseBody.
func unmarshalContentItemResponseBodyResponseBodyToMcpassistantContentItem(v *ContentItemResponseBodyResponseBody) *mcpassistant.ContentItem {
	res := &mcpassistant.ContentItem{
		Type:     *v.Type,
		Text:     v.Text,
		Data:     v.Data,
		MimeType: v.MimeType,
		URI:      v.URI,
	}

	return res
}

// unmarshalResourceInfoResponseBodyResponseBodyToMcpassistantResourceInfo
// builds a value of type *mcpassistant.ResourceInfo from a value of type
// *ResourceInfoResponseBodyResponseBody.
func unmarshalResourceInfoResponseBodyResponseBodyToMcpassistantResourceInfo(v *ResourceInfoResponseBodyResponseBody) *mcpassistant.ResourceInfo {
	res := &mcpassistant.ResourceInfo{
		URI:         *v.URI,
		Name:        v.Name,
		Description: v.Description,
		MimeType:    v.MimeType,
	}

	return res
}

// unmarshalResourceContentResponseBodyResponseBodyToMcpassistantResourceContent
// builds a value of type *mcpassistant.ResourceContent from a value of type
// *ResourceContentResponseBodyResponseBody.
func unmarshalResourceContentResponseBodyResponseBodyToMcpassistantResourceContent(v *ResourceContentResponseBodyResponseBody) *mcpassistant.ResourceContent {
	res := &mcpassistant.ResourceContent{
		URI:      *v.URI,
		MimeType: v.MimeType,
		Text:     v.Text,
		Blob:     v.Blob,
	}

	return res
}

// unmarshalPromptInfoResponseBodyResponseBodyToMcpassistantPromptInfo builds a
// value of type *mcpassistant.PromptInfo from a value of type
// *PromptInfoResponseBodyResponseBody.
func unmarshalPromptInfoResponseBodyResponseBodyToMcpassistantPromptInfo(v *PromptInfoResponseBodyResponseBody) *mcpassistant.PromptInfo {
	res := &mcpassistant.PromptInfo{
		Name:        *v.Name,
		Description: v.Description,
	}
	if v.Arguments != nil {
		res.Arguments = make([]*mcpassistant.PromptArgument, len(v.Arguments))
		for i, val := range v.Arguments {
			res.Arguments[i] = unmarshalPromptArgumentResponseBodyResponseBodyToMcpassistantPromptArgument(val)
		}
	}

	return res
}

// unmarshalPromptArgumentResponseBodyResponseBodyToMcpassistantPromptArgument
// builds a value of type *mcpassistant.PromptArgument from a value of type
// *PromptArgumentResponseBodyResponseBody.
func unmarshalPromptArgumentResponseBodyResponseBodyToMcpassistantPromptArgument(v *PromptArgumentResponseBodyResponseBody) *mcpassistant.PromptArgument {
	if v == nil {
		return nil
	}
	res := &mcpassistant.PromptArgument{
		Name:        *v.Name,
		Description: v.Description,
		Required:    *v.Required,
	}

	return res
}

// unmarshalPromptMessageResponseBodyResponseBodyToMcpassistantPromptMessage
// builds a value of type *mcpassistant.PromptMessage from a value of type
// *PromptMessageResponseBodyResponseBody.
func unmarshalPromptMessageResponseBodyResponseBodyToMcpassistantPromptMessage(v *PromptMessageResponseBodyResponseBody) *mcpassistant.PromptMessage {
	res := &mcpassistant.PromptMessage{
		Role: *v.Role,
	}
	res.Content = unmarshalMessageContentResponseBodyResponseBodyToMcpassistantMessageContent(v.Content)

	return res
}

// unmarshalMessageContentResponseBodyResponseBodyToMcpassistantMessageContent
// builds a value of type *mcpassistant.MessageContent from a value of type
// *MessageContentResponseBodyResponseBody.
func unmarshalMessageContentResponseBodyResponseBodyToMcpassistantMessageContent(v *MessageContentResponseBodyResponseBody) *mcpassistant.MessageContent {
	res := &mcpassistant.MessageContent{
		Type:     *v.Type,
		Text:     v.Text,
		Data:     v.Data,
		MimeType: v.MimeType,
		URI:      v.URI,
	}

	return res
}

// EncodePingRequest returns an encoder for requests sent to the mcp_assistant
// service ping JSON-RPC method.
func EncodePingRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		// For JSON-RPC methods without payloads, we still need to send the method envelope
		// Generate a unique ID for the request
		id := uuid.New().String()
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "ping",
			ID:      id,
		}
		if err := encoder(req).Encode(body); err != nil {
			return goahttp.ErrEncodingError("mcp_assistant", "ping", err)
		}
		return nil
	}
}
