// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant HTTP client types
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	assistant "example.com/assistant/gen/assistant"
	goa "goa.design/goa/v3/pkg"
)

// AnalyzeTextRequestBody is the type of the "assistant" service "analyze_text"
// endpoint HTTP request body.
type AnalyzeTextRequestBody struct {
	// Text to analyze
	Text string `form:"text" json:"text" xml:"text"`
	// Analysis mode
	Mode string `form:"mode" json:"mode" xml:"mode"`
}

// SearchKnowledgeRequestBody is the type of the "assistant" service
// "search_knowledge" endpoint HTTP request body.
type SearchKnowledgeRequestBody struct {
	// Search query
	Query string `form:"query" json:"query" xml:"query"`
	// Maximum results
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// ExecuteCodeRequestBody is the type of the "assistant" service "execute_code"
// endpoint HTTP request body.
type ExecuteCodeRequestBody struct {
	// Programming language
	Language string `form:"language" json:"language" xml:"language"`
	// Code to execute
	Code string `form:"code" json:"code" xml:"code"`
}

// GetConversationHistoryRequestBody is the type of the "assistant" service
// "get_conversation_history" endpoint HTTP request body.
type GetConversationHistoryRequestBody struct {
	// Number of messages
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// GeneratePromptsRequestBody is the type of the "assistant" service
// "generate_prompts" endpoint HTTP request body.
type GeneratePromptsRequestBody struct {
	// Current context
	Context string `form:"context" json:"context" xml:"context"`
	// Task type
	Task string `form:"task" json:"task" xml:"task"`
}

// SendNotificationRequestBody is the type of the "assistant" service
// "send_notification" endpoint HTTP request body.
type SendNotificationRequestBody struct {
	// Notification type
	Type string `form:"type" json:"type" xml:"type"`
	// Notification message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional data
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// SubscribeToUpdatesRequestBody is the type of the "assistant" service
// "subscribe_to_updates" endpoint HTTP request body.
type SubscribeToUpdatesRequestBody struct {
	// Resource to monitor
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Optional filter
	Filter *string `form:"filter,omitempty" json:"filter,omitempty" xml:"filter,omitempty"`
}

// ProcessBatchRequestBody is the type of the "assistant" service
// "process_batch" endpoint HTTP request body.
type ProcessBatchRequestBody struct {
	// Items to process
	Items []string `form:"items" json:"items" xml:"items"`
	// Output format
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Blob data when format=blob
	Blob []byte `form:"blob,omitempty" json:"blob,omitempty" xml:"blob,omitempty"`
	// URI to include when format=uri
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
	// Mime type for blob/uri
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
}

// AnalyzeTextResponseBody is the type of the "assistant" service
// "analyze_text" endpoint HTTP response body.
type AnalyzeTextResponseBody struct {
	// Analysis mode used
	Mode *string `form:"mode,omitempty" json:"mode,omitempty" xml:"mode,omitempty"`
	// Analysis result (varies by mode)
	Result any `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	// Confidence score
	Confidence *float64 `form:"confidence,omitempty" json:"confidence,omitempty" xml:"confidence,omitempty"`
	// Additional metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// SearchKnowledgeResponseBody is the type of the "assistant" service
// "search_knowledge" endpoint HTTP response body.
type SearchKnowledgeResponseBody []*SearchResultResponse

// ExecuteCodeResponseBody is the type of the "assistant" service
// "execute_code" endpoint HTTP response body.
type ExecuteCodeResponseBody struct {
	// Execution output
	Output *string `form:"output,omitempty" json:"output,omitempty" xml:"output,omitempty"`
	// Error message if any
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Execution time in seconds
	ExecutionTime *float64 `form:"execution_time,omitempty" json:"execution_time,omitempty" xml:"execution_time,omitempty"`
}

// ListDocumentsResponseBody is the type of the "assistant" service
// "list_documents" endpoint HTTP response body.
type ListDocumentsResponseBody []*DocumentResponse

// GetSystemInfoResponseBody is the type of the "assistant" service
// "get_system_info" endpoint HTTP response body.
type GetSystemInfoResponseBody struct {
	// System version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Uptime in seconds
	Uptime *int64 `form:"uptime,omitempty" json:"uptime,omitempty" xml:"uptime,omitempty"`
	// Memory usage percentage
	MemoryUsage *float64 `form:"memory_usage,omitempty" json:"memory_usage,omitempty" xml:"memory_usage,omitempty"`
	// CPU usage percentage
	CPUUsage *float64 `form:"cpu_usage,omitempty" json:"cpu_usage,omitempty" xml:"cpu_usage,omitempty"`
	// Number of active connections
	ActiveConnections *int `form:"active_connections,omitempty" json:"active_connections,omitempty" xml:"active_connections,omitempty"`
}

// GetConversationHistoryResponseBody is the type of the "assistant" service
// "get_conversation_history" endpoint HTTP response body.
type GetConversationHistoryResponseBody []*ChatMessageResponse

// GeneratePromptsResponseBody is the type of the "assistant" service
// "generate_prompts" endpoint HTTP response body.
type GeneratePromptsResponseBody []*PromptTemplateResponse

// GetWorkspaceInfoResponseBody is the type of the "assistant" service
// "get_workspace_info" endpoint HTTP response body.
type GetWorkspaceInfoResponseBody struct {
	Roots []*RootInfoResponseBody `form:"roots,omitempty" json:"roots,omitempty" xml:"roots,omitempty"`
}

// SubscribeToUpdatesResponseBody is the type of the "assistant" service
// "subscribe_to_updates" endpoint HTTP response body.
type SubscribeToUpdatesResponseBody struct {
	// Subscription ID
	SubscriptionID *string `form:"subscription_id,omitempty" json:"subscription_id,omitempty" xml:"subscription_id,omitempty"`
	// Subscribed resource
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Subscription created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ProcessBatchResponseBody is the type of the "assistant" service
// "process_batch" endpoint HTTP response body.
type ProcessBatchResponseBody struct {
	// Number of items processed
	Processed *int `form:"processed,omitempty" json:"processed,omitempty" xml:"processed,omitempty"`
	// Number of items failed
	Failed *int `form:"failed,omitempty" json:"failed,omitempty" xml:"failed,omitempty"`
	// Processing results
	Results []any `form:"results,omitempty" json:"results,omitempty" xml:"results,omitempty"`
}

// SearchResultResponse is used to define fields on response body types.
type SearchResultResponse struct {
	// Result ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Result title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Result content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Relevance score
	Score *float64 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
}

// DocumentResponse is used to define fields on response body types.
type DocumentResponse struct {
	// Document ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Document name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Document type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Size in bytes
	Size *int64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Last modified
	Modified *string `form:"modified,omitempty" json:"modified,omitempty" xml:"modified,omitempty"`
}

// ChatMessageResponse is used to define fields on response body types.
type ChatMessageResponse struct {
	// Message ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Message content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Message timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// PromptTemplateResponse is used to define fields on response body types.
type PromptTemplateResponse struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Template description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Required variables
	Variables []string `form:"variables,omitempty" json:"variables,omitempty" xml:"variables,omitempty"`
	// Template content
	Template *string `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// RootInfoResponseBody is used to define fields on response body types.
type RootInfoResponseBody struct {
	// Root URI
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
	// Root name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewAnalyzeTextRequestBody builds the HTTP request body from the payload of
// the "analyze_text" endpoint of the "assistant" service.
func NewAnalyzeTextRequestBody(p *assistant.AnalyzeTextPayload) *AnalyzeTextRequestBody {
	body := &AnalyzeTextRequestBody{
		Text: p.Text,
		Mode: p.Mode,
	}
	return body
}

// NewSearchKnowledgeRequestBody builds the HTTP request body from the payload
// of the "search_knowledge" endpoint of the "assistant" service.
func NewSearchKnowledgeRequestBody(p *assistant.SearchKnowledgePayload) *SearchKnowledgeRequestBody {
	body := &SearchKnowledgeRequestBody{
		Query: p.Query,
		Limit: p.Limit,
	}
	{
		var zero int
		if body.Limit == zero {
			body.Limit = 10
		}
	}
	return body
}

// NewExecuteCodeRequestBody builds the HTTP request body from the payload of
// the "execute_code" endpoint of the "assistant" service.
func NewExecuteCodeRequestBody(p *assistant.ExecuteCodePayload) *ExecuteCodeRequestBody {
	body := &ExecuteCodeRequestBody{
		Language: p.Language,
		Code:     p.Code,
	}
	return body
}

// NewGetConversationHistoryRequestBody builds the HTTP request body from the
// payload of the "get_conversation_history" endpoint of the "assistant"
// service.
func NewGetConversationHistoryRequestBody(p *assistant.GetConversationHistoryPayload) *GetConversationHistoryRequestBody {
	body := &GetConversationHistoryRequestBody{
		Limit: p.Limit,
	}
	{
		var zero int
		if body.Limit == zero {
			body.Limit = 50
		}
	}
	return body
}

// NewGeneratePromptsRequestBody builds the HTTP request body from the payload
// of the "generate_prompts" endpoint of the "assistant" service.
func NewGeneratePromptsRequestBody(p *assistant.GeneratePromptsPayload) *GeneratePromptsRequestBody {
	body := &GeneratePromptsRequestBody{
		Context: p.Context,
		Task:    p.Task,
	}
	return body
}

// NewSendNotificationRequestBody builds the HTTP request body from the payload
// of the "send_notification" endpoint of the "assistant" service.
func NewSendNotificationRequestBody(p *assistant.SendNotificationPayload) *SendNotificationRequestBody {
	body := &SendNotificationRequestBody{
		Type:    p.Type,
		Message: p.Message,
		Data:    p.Data,
	}
	return body
}

// NewSubscribeToUpdatesRequestBody builds the HTTP request body from the
// payload of the "subscribe_to_updates" endpoint of the "assistant" service.
func NewSubscribeToUpdatesRequestBody(p *assistant.SubscribeToUpdatesPayload) *SubscribeToUpdatesRequestBody {
	body := &SubscribeToUpdatesRequestBody{
		Resource: p.Resource,
		Filter:   p.Filter,
	}
	return body
}

// NewProcessBatchRequestBody builds the HTTP request body from the payload of
// the "process_batch" endpoint of the "assistant" service.
func NewProcessBatchRequestBody(p *assistant.ProcessBatchPayload) *ProcessBatchRequestBody {
	body := &ProcessBatchRequestBody{
		Format:   p.Format,
		Blob:     p.Blob,
		URI:      p.URI,
		MimeType: p.MimeType,
	}
	if p.Items != nil {
		body.Items = make([]string, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = val
		}
	} else {
		body.Items = []string{}
	}
	return body
}

// NewAnalyzeTextAnalysisResultOK builds a "assistant" service "analyze_text"
// endpoint result from a HTTP "OK" response.
func NewAnalyzeTextAnalysisResultOK(body *AnalyzeTextResponseBody) *assistant.AnalysisResult {
	v := &assistant.AnalysisResult{
		Mode:       *body.Mode,
		Result:     body.Result,
		Confidence: body.Confidence,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewSearchKnowledgeSearchResultsOK builds a "assistant" service
// "search_knowledge" endpoint result from a HTTP "OK" response.
func NewSearchKnowledgeSearchResultsOK(body []*SearchResultResponse) assistant.SearchResults {
	v := make([]*assistant.SearchResult, len(body))
	for i, val := range body {
		v[i] = unmarshalSearchResultResponseToAssistantSearchResult(val)
	}

	return v
}

// NewExecuteCodeExecutionResultOK builds a "assistant" service "execute_code"
// endpoint result from a HTTP "OK" response.
func NewExecuteCodeExecutionResultOK(body *ExecuteCodeResponseBody) *assistant.ExecutionResult {
	v := &assistant.ExecutionResult{
		Output:        *body.Output,
		Error:         body.Error,
		ExecutionTime: *body.ExecutionTime,
	}

	return v
}

// NewListDocumentsDocumentsOK builds a "assistant" service "list_documents"
// endpoint result from a HTTP "OK" response.
func NewListDocumentsDocumentsOK(body []*DocumentResponse) assistant.Documents {
	v := make([]*assistant.Document, len(body))
	for i, val := range body {
		v[i] = unmarshalDocumentResponseToAssistantDocument(val)
	}

	return v
}

// NewGetSystemInfoSystemInfoOK builds a "assistant" service "get_system_info"
// endpoint result from a HTTP "OK" response.
func NewGetSystemInfoSystemInfoOK(body *GetSystemInfoResponseBody) *assistant.SystemInfo {
	v := &assistant.SystemInfo{
		Version:           *body.Version,
		Uptime:            *body.Uptime,
		MemoryUsage:       *body.MemoryUsage,
		CPUUsage:          *body.CPUUsage,
		ActiveConnections: *body.ActiveConnections,
	}

	return v
}

// NewGetConversationHistoryChatMessagesOK builds a "assistant" service
// "get_conversation_history" endpoint result from a HTTP "OK" response.
func NewGetConversationHistoryChatMessagesOK(body []*ChatMessageResponse) assistant.ChatMessages {
	v := make([]*assistant.ChatMessage, len(body))
	for i, val := range body {
		v[i] = unmarshalChatMessageResponseToAssistantChatMessage(val)
	}

	return v
}

// NewGeneratePromptsPromptTemplatesOK builds a "assistant" service
// "generate_prompts" endpoint result from a HTTP "OK" response.
func NewGeneratePromptsPromptTemplatesOK(body []*PromptTemplateResponse) assistant.PromptTemplates {
	v := make([]*assistant.PromptTemplate, len(body))
	for i, val := range body {
		v[i] = unmarshalPromptTemplateResponseToAssistantPromptTemplate(val)
	}

	return v
}

// NewGetWorkspaceInfoResultOK builds a "assistant" service
// "get_workspace_info" endpoint result from a HTTP "OK" response.
func NewGetWorkspaceInfoResultOK(body *GetWorkspaceInfoResponseBody) *assistant.GetWorkspaceInfoResult {
	v := &assistant.GetWorkspaceInfoResult{}
	v.Roots = make([]*assistant.RootInfo, len(body.Roots))
	for i, val := range body.Roots {
		v.Roots[i] = unmarshalRootInfoResponseBodyToAssistantRootInfo(val)
	}

	return v
}

// NewSubscribeToUpdatesSubscriptionInfoOK builds a "assistant" service
// "subscribe_to_updates" endpoint result from a HTTP "OK" response.
func NewSubscribeToUpdatesSubscriptionInfoOK(body *SubscribeToUpdatesResponseBody) *assistant.SubscriptionInfo {
	v := &assistant.SubscriptionInfo{
		SubscriptionID: *body.SubscriptionID,
		Resource:       *body.Resource,
		CreatedAt:      *body.CreatedAt,
	}

	return v
}

// NewProcessBatchBatchResultOK builds a "assistant" service "process_batch"
// endpoint result from a HTTP "OK" response.
func NewProcessBatchBatchResultOK(body *ProcessBatchResponseBody) *assistant.BatchResult {
	v := &assistant.BatchResult{
		Processed: *body.Processed,
		Failed:    *body.Failed,
	}
	v.Results = make([]any, len(body.Results))
	for i, val := range body.Results {
		v.Results[i] = val
	}

	return v
}

// ValidateAnalyzeTextResponseBody runs the validations defined on
// analyze_text_response_body
func ValidateAnalyzeTextResponseBody(body *AnalyzeTextResponseBody) (err error) {
	if body.Mode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mode", "body"))
	}
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}

// ValidateExecuteCodeResponseBody runs the validations defined on
// execute_code_response_body
func ValidateExecuteCodeResponseBody(body *ExecuteCodeResponseBody) (err error) {
	if body.Output == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("output", "body"))
	}
	if body.ExecutionTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("execution_time", "body"))
	}
	return
}

// ValidateGetSystemInfoResponseBody runs the validations defined on
// get_system_info_response_body
func ValidateGetSystemInfoResponseBody(body *GetSystemInfoResponseBody) (err error) {
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Uptime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uptime", "body"))
	}
	if body.MemoryUsage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("memory_usage", "body"))
	}
	if body.CPUUsage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cpu_usage", "body"))
	}
	if body.ActiveConnections == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active_connections", "body"))
	}
	return
}

// ValidateGetWorkspaceInfoResponseBody runs the validations defined on
// get_workspace_info_response_body
func ValidateGetWorkspaceInfoResponseBody(body *GetWorkspaceInfoResponseBody) (err error) {
	if body.Roots == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roots", "body"))
	}
	for _, e := range body.Roots {
		if e != nil {
			if err2 := ValidateRootInfoResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubscribeToUpdatesResponseBody runs the validations defined on
// subscribe_to_updates_response_body
func ValidateSubscribeToUpdatesResponseBody(body *SubscribeToUpdatesResponseBody) (err error) {
	if body.SubscriptionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subscription_id", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateProcessBatchResponseBody runs the validations defined on
// process_batch_response_body
func ValidateProcessBatchResponseBody(body *ProcessBatchResponseBody) (err error) {
	if body.Processed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("processed", "body"))
	}
	if body.Failed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("failed", "body"))
	}
	if body.Results == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("results", "body"))
	}
	return
}

// ValidateSearchResultResponse runs the validations defined on
// SearchResultResponse
func ValidateSearchResultResponse(body *SearchResultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	return
}

// ValidateDocumentResponse runs the validations defined on DocumentResponse
func ValidateDocumentResponse(body *DocumentResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.Modified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("modified", "body"))
	}
	if body.Modified != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.modified", *body.Modified, goa.FormatDateTime))
	}
	return
}

// ValidateChatMessageResponse runs the validations defined on
// ChatMessageResponse
func ValidateChatMessageResponse(body *ChatMessageResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Role != nil {
		if !(*body.Role == "user" || *body.Role == "assistant" || *body.Role == "system") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", *body.Role, []any{"user", "assistant", "system"}))
		}
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	return
}

// ValidatePromptTemplateResponse runs the validations defined on
// PromptTemplateResponse
func ValidatePromptTemplateResponse(body *PromptTemplateResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("template", "body"))
	}
	return
}

// ValidateRootInfoResponseBody runs the validations defined on
// RootInfoResponseBody
func ValidateRootInfoResponseBody(body *RootInfoResponseBody) (err error) {
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	return
}
