// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assistant JSON-RPC client encoders and decoders
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	assistant "example.com/assistant/gen/assistant"
	"github.com/google/uuid"
	goahttp "goa.design/goa/v3/http"
	"goa.design/goa/v3/jsonrpc"
	goa "goa.design/goa/v3/pkg"
)

// BuildAnalyzeTextRequest instantiates a HTTP request object with method and
// path set to call the "assistant" service "analyze_text" endpoint
func (c *Client) BuildAnalyzeTextRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AnalyzeTextAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "analyze_text", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAnalyzeTextRequest returns an encoder for requests sent to the
// assistant analyze_text server.
func EncodeAnalyzeTextRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.AnalyzeTextPayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "analyze_text", "*assistant.AnalyzeTextPayload", v)
		}
		b := NewAnalyzeTextRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "analyze_text",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "analyze_text", err)
		}
		return nil
	}
}

// DecodeAnalyzeTextResponse returns a decoder for responses returned by the
// assistant service analyze_text JSON-RPC method. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeAnalyzeTextResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "analyze_text", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "analyze_text", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "analyze_text", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body AnalyzeTextResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "analyze_text", err)
		}
		err = ValidateAnalyzeTextResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "analyze_text", err)
		}
		res := NewAnalyzeTextAnalysisResultOK(&body)
		return res, nil
	}
}

// BuildSearchKnowledgeRequest instantiates a HTTP request object with method
// and path set to call the "assistant" service "search_knowledge" endpoint
func (c *Client) BuildSearchKnowledgeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SearchKnowledgeAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "search_knowledge", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSearchKnowledgeRequest returns an encoder for requests sent to the
// assistant search_knowledge server.
func EncodeSearchKnowledgeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.SearchKnowledgePayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "search_knowledge", "*assistant.SearchKnowledgePayload", v)
		}
		b := NewSearchKnowledgeRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "search_knowledge",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "search_knowledge", err)
		}
		return nil
	}
}

// DecodeSearchKnowledgeResponse returns a decoder for responses returned by
// the assistant service search_knowledge JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeSearchKnowledgeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "search_knowledge", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "search_knowledge", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "search_knowledge", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body SearchKnowledgeResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "search_knowledge", err)
		}
		for _, e := range body {
			if e != nil {
				if err2 := ValidateSearchResultResponse(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "search_knowledge", err)
		}
		res := NewSearchKnowledgeSearchResultsOK(body)
		return res, nil
	}
}

// BuildExecuteCodeRequest instantiates a HTTP request object with method and
// path set to call the "assistant" service "execute_code" endpoint
func (c *Client) BuildExecuteCodeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ExecuteCodeAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "execute_code", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeExecuteCodeRequest returns an encoder for requests sent to the
// assistant execute_code server.
func EncodeExecuteCodeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.ExecuteCodePayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "execute_code", "*assistant.ExecuteCodePayload", v)
		}
		b := NewExecuteCodeRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "execute_code",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "execute_code", err)
		}
		return nil
	}
}

// DecodeExecuteCodeResponse returns a decoder for responses returned by the
// assistant service execute_code JSON-RPC method. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeExecuteCodeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "execute_code", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "execute_code", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "execute_code", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ExecuteCodeResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "execute_code", err)
		}
		err = ValidateExecuteCodeResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "execute_code", err)
		}
		res := NewExecuteCodeExecutionResultOK(&body)
		return res, nil
	}
}

// BuildListDocumentsRequest instantiates a HTTP request object with method and
// path set to call the "assistant" service "list_documents" endpoint
func (c *Client) BuildListDocumentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDocumentsAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "list_documents", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListDocumentsResponse returns a decoder for responses returned by the
// assistant service list_documents JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeListDocumentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "list_documents", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "list_documents", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "list_documents", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ListDocumentsResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "list_documents", err)
		}
		for _, e := range body {
			if e != nil {
				if err2 := ValidateDocumentResponse(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "list_documents", err)
		}
		res := NewListDocumentsDocumentsOK(body)
		return res, nil
	}
}

// BuildGetSystemInfoRequest instantiates a HTTP request object with method and
// path set to call the "assistant" service "get_system_info" endpoint
func (c *Client) BuildGetSystemInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSystemInfoAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "get_system_info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSystemInfoResponse returns a decoder for responses returned by the
// assistant service get_system_info JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeGetSystemInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "get_system_info", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "get_system_info", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "get_system_info", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body GetSystemInfoResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "get_system_info", err)
		}
		err = ValidateGetSystemInfoResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "get_system_info", err)
		}
		res := NewGetSystemInfoSystemInfoOK(&body)
		return res, nil
	}
}

// BuildGetConversationHistoryRequest instantiates a HTTP request object with
// method and path set to call the "assistant" service
// "get_conversation_history" endpoint
func (c *Client) BuildGetConversationHistoryRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetConversationHistoryAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "get_conversation_history", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetConversationHistoryRequest returns an encoder for requests sent to
// the assistant get_conversation_history server.
func EncodeGetConversationHistoryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.GetConversationHistoryPayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "get_conversation_history", "*assistant.GetConversationHistoryPayload", v)
		}
		b := NewGetConversationHistoryRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "get_conversation_history",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "get_conversation_history", err)
		}
		return nil
	}
}

// DecodeGetConversationHistoryResponse returns a decoder for responses
// returned by the assistant service get_conversation_history JSON-RPC method.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeGetConversationHistoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "get_conversation_history", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "get_conversation_history", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "get_conversation_history", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body GetConversationHistoryResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "get_conversation_history", err)
		}
		for _, e := range body {
			if e != nil {
				if err2 := ValidateChatMessageResponse(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "get_conversation_history", err)
		}
		res := NewGetConversationHistoryChatMessagesOK(body)
		return res, nil
	}
}

// BuildGeneratePromptsRequest instantiates a HTTP request object with method
// and path set to call the "assistant" service "generate_prompts" endpoint
func (c *Client) BuildGeneratePromptsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GeneratePromptsAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "generate_prompts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGeneratePromptsRequest returns an encoder for requests sent to the
// assistant generate_prompts server.
func EncodeGeneratePromptsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.GeneratePromptsPayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "generate_prompts", "*assistant.GeneratePromptsPayload", v)
		}
		b := NewGeneratePromptsRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "generate_prompts",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "generate_prompts", err)
		}
		return nil
	}
}

// DecodeGeneratePromptsResponse returns a decoder for responses returned by
// the assistant service generate_prompts JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeGeneratePromptsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "generate_prompts", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "generate_prompts", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "generate_prompts", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body GeneratePromptsResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "generate_prompts", err)
		}
		for _, e := range body {
			if e != nil {
				if err2 := ValidatePromptTemplateResponse(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "generate_prompts", err)
		}
		res := NewGeneratePromptsPromptTemplatesOK(body)
		return res, nil
	}
}

// BuildGetWorkspaceInfoRequest instantiates a HTTP request object with method
// and path set to call the "assistant" service "get_workspace_info" endpoint
func (c *Client) BuildGetWorkspaceInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetWorkspaceInfoAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "get_workspace_info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetWorkspaceInfoResponse returns a decoder for responses returned by
// the assistant service get_workspace_info JSON-RPC method. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeGetWorkspaceInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "get_workspace_info", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "get_workspace_info", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "get_workspace_info", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body GetWorkspaceInfoResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "get_workspace_info", err)
		}
		err = ValidateGetWorkspaceInfoResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "get_workspace_info", err)
		}
		res := NewGetWorkspaceInfoResultOK(&body)
		return res, nil
	}
}

// BuildSendNotificationRequest instantiates a HTTP request object with method
// and path set to call the "assistant" service "send_notification" endpoint
func (c *Client) BuildSendNotificationRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendNotificationAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "send_notification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendNotificationRequest returns an encoder for requests sent to the
// assistant send_notification server.
func EncodeSendNotificationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.SendNotificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "send_notification", "*assistant.SendNotificationPayload", v)
		}
		b := NewSendNotificationRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "send_notification",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "send_notification", err)
		}
		return nil
	}
}

// DecodeSendNotificationResponse returns a decoder for responses returned by
// the assistant service send_notification JSON-RPC method. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeSendNotificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "send_notification", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "send_notification", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "send_notification", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		return nil, nil
	}
}

// BuildSubscribeToUpdatesRequest instantiates a HTTP request object with
// method and path set to call the "assistant" service "subscribe_to_updates"
// endpoint
func (c *Client) BuildSubscribeToUpdatesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubscribeToUpdatesAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "subscribe_to_updates", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeToUpdatesRequest returns an encoder for requests sent to the
// assistant subscribe_to_updates server.
func EncodeSubscribeToUpdatesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.SubscribeToUpdatesPayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "subscribe_to_updates", "*assistant.SubscribeToUpdatesPayload", v)
		}
		b := NewSubscribeToUpdatesRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "subscribe_to_updates",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "subscribe_to_updates", err)
		}
		return nil
	}
}

// DecodeSubscribeToUpdatesResponse returns a decoder for responses returned by
// the assistant service subscribe_to_updates JSON-RPC method. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeSubscribeToUpdatesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "subscribe_to_updates", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "subscribe_to_updates", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "subscribe_to_updates", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body SubscribeToUpdatesResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "subscribe_to_updates", err)
		}
		err = ValidateSubscribeToUpdatesResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "subscribe_to_updates", err)
		}
		res := NewSubscribeToUpdatesSubscriptionInfoOK(&body)
		return res, nil
	}
}

// BuildProcessBatchRequest instantiates a HTTP request object with method and
// path set to call the "assistant" service "process_batch" endpoint
func (c *Client) BuildProcessBatchRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProcessBatchAssistantPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assistant", "process_batch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProcessBatchRequest returns an encoder for requests sent to the
// assistant process_batch server.
func EncodeProcessBatchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assistant.ProcessBatchPayload)
		if !ok {
			return goahttp.ErrInvalidType("assistant", "process_batch", "*assistant.ProcessBatchPayload", v)
		}
		b := NewProcessBatchRequestBody(p)
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "process_batch",
			Params:  b,
		}
		// No ID field in payload - always send as a request with generated ID
		id := uuid.New().String()
		body.ID = id
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("assistant", "process_batch", err)
		}
		return nil
	}
}

// DecodeProcessBatchResponse returns a decoder for responses returned by the
// assistant service process_batch JSON-RPC method. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeProcessBatchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assistant", "process_batch", resp.StatusCode, string(body))
		}

		var jresp jsonrpc.RawResponse
		if err := decoder(resp).Decode(&jresp); err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "process_batch", err)
		}

		if jresp.Error != nil {
			switch jresp.Error.Code {
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assistant", "process_batch", resp.StatusCode, string(body))
			}
		}
		resp.Body = io.NopCloser(bytes.NewBuffer(jresp.Result))
		var (
			body ProcessBatchResponseBody
			err  error
		)
		err = decoder(resp).Decode(&body)
		if err != nil {
			return nil, goahttp.ErrDecodingError("assistant", "process_batch", err)
		}
		err = ValidateProcessBatchResponseBody(&body)
		if err != nil {
			return nil, goahttp.ErrValidationError("assistant", "process_batch", err)
		}
		res := NewProcessBatchBatchResultOK(&body)
		return res, nil
	}
}

// unmarshalSearchResultResponseToAssistantSearchResult builds a value of type
// *assistant.SearchResult from a value of type *SearchResultResponse.
func unmarshalSearchResultResponseToAssistantSearchResult(v *SearchResultResponse) *assistant.SearchResult {
	res := &assistant.SearchResult{
		ID:      *v.ID,
		Title:   *v.Title,
		Content: *v.Content,
		Score:   *v.Score,
	}

	return res
}

// unmarshalDocumentResponseToAssistantDocument builds a value of type
// *assistant.Document from a value of type *DocumentResponse.
func unmarshalDocumentResponseToAssistantDocument(v *DocumentResponse) *assistant.Document {
	res := &assistant.Document{
		ID:       *v.ID,
		Name:     *v.Name,
		Type:     *v.Type,
		Size:     *v.Size,
		Modified: *v.Modified,
	}

	return res
}

// unmarshalChatMessageResponseToAssistantChatMessage builds a value of type
// *assistant.ChatMessage from a value of type *ChatMessageResponse.
func unmarshalChatMessageResponseToAssistantChatMessage(v *ChatMessageResponse) *assistant.ChatMessage {
	res := &assistant.ChatMessage{
		ID:        *v.ID,
		Role:      *v.Role,
		Content:   *v.Content,
		Timestamp: *v.Timestamp,
	}

	return res
}

// unmarshalPromptTemplateResponseToAssistantPromptTemplate builds a value of
// type *assistant.PromptTemplate from a value of type *PromptTemplateResponse.
func unmarshalPromptTemplateResponseToAssistantPromptTemplate(v *PromptTemplateResponse) *assistant.PromptTemplate {
	res := &assistant.PromptTemplate{
		Name:        *v.Name,
		Description: *v.Description,
		Template:    *v.Template,
	}
	if v.Variables != nil {
		res.Variables = make([]string, len(v.Variables))
		for i, val := range v.Variables {
			res.Variables[i] = val
		}
	}

	return res
}

// unmarshalRootInfoResponseBodyToAssistantRootInfo builds a value of type
// *assistant.RootInfo from a value of type *RootInfoResponseBody.
func unmarshalRootInfoResponseBodyToAssistantRootInfo(v *RootInfoResponseBody) *assistant.RootInfo {
	res := &assistant.RootInfo{
		URI:  *v.URI,
		Name: v.Name,
	}

	return res
}

// EncodeListDocumentsRequest returns an encoder for requests sent to the
// assistant service list_documents JSON-RPC method.
func EncodeListDocumentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		// For JSON-RPC methods without payloads, we still need to send the method envelope
		// Generate a unique ID for the request
		id := uuid.New().String()
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "list_documents",
			ID:      id,
		}
		if err := encoder(req).Encode(body); err != nil {
			return goahttp.ErrEncodingError("assistant", "list_documents", err)
		}
		return nil
	}
} // EncodeGetSystemInfoRequest returns an encoder for requests sent to the
// assistant service get_system_info JSON-RPC method.
func EncodeGetSystemInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		// For JSON-RPC methods without payloads, we still need to send the method envelope
		// Generate a unique ID for the request
		id := uuid.New().String()
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "get_system_info",
			ID:      id,
		}
		if err := encoder(req).Encode(body); err != nil {
			return goahttp.ErrEncodingError("assistant", "get_system_info", err)
		}
		return nil
	}
} // EncodeGetWorkspaceInfoRequest returns an encoder for requests sent to the
// assistant service get_workspace_info JSON-RPC method.
func EncodeGetWorkspaceInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		// For JSON-RPC methods without payloads, we still need to send the method envelope
		// Generate a unique ID for the request
		id := uuid.New().String()
		body := &jsonrpc.Request{
			JSONRPC: "2.0",
			Method:  "get_workspace_info",
			ID:      id,
		}
		if err := encoder(req).Encode(body); err != nil {
			return goahttp.ErrEncodingError("assistant", "get_workspace_info", err)
		}
		return nil
	}
}
