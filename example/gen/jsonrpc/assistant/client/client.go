// Code generated by goa v3.21.5, DO NOT EDIT.
//
// assistant client JSON-RPC transport
//
// Command:
// $ goa gen example.com/assistant/design

package client

import (
	"bytes"
	"context"
	"net/http"
	"sync"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the assistant service endpoint HTTP clients.
type Client struct {
	// Doer is the HTTP client used to make requests to the assistant service.
	Doer goahttp.Doer
	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// bufferPool is a pool of bytes.Buffers for encoding requests.
var bufferPool = sync.Pool{
	New: func() any { return new(bytes.Buffer) },
}

// NewClient instantiates HTTP clients for all the assistant service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {

	return &Client{
		Doer:                doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// AnalyzeText returns an endpoint that makes JSON-RPC requests to the
// assistant service analyze_text method.
func (c *Client) AnalyzeText() goa.Endpoint {
	var (
		encodeRequest  = EncodeAnalyzeTextRequest(c.encoder)
		decodeResponse = DecodeAnalyzeTextResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAnalyzeTextRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "analyze_text", err)
		}
		return decodeResponse(resp)
	}
}

// SearchKnowledge returns an endpoint that makes JSON-RPC requests to the
// assistant service search_knowledge method.
func (c *Client) SearchKnowledge() goa.Endpoint {
	var (
		encodeRequest  = EncodeSearchKnowledgeRequest(c.encoder)
		decodeResponse = DecodeSearchKnowledgeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSearchKnowledgeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "search_knowledge", err)
		}
		return decodeResponse(resp)
	}
}

// ExecuteCode returns an endpoint that makes JSON-RPC requests to the
// assistant service execute_code method.
func (c *Client) ExecuteCode() goa.Endpoint {
	var (
		encodeRequest  = EncodeExecuteCodeRequest(c.encoder)
		decodeResponse = DecodeExecuteCodeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildExecuteCodeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "execute_code", err)
		}
		return decodeResponse(resp)
	}
}

// ListDocuments returns an endpoint that makes JSON-RPC requests to the
// assistant service list_documents method.
func (c *Client) ListDocuments() goa.Endpoint {
	var (
		encodeRequest  = EncodeListDocumentsRequest(c.encoder)
		decodeResponse = DecodeListDocumentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListDocumentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "list_documents", err)
		}
		return decodeResponse(resp)
	}
}

// GetSystemInfo returns an endpoint that makes JSON-RPC requests to the
// assistant service get_system_info method.
func (c *Client) GetSystemInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSystemInfoRequest(c.encoder)
		decodeResponse = DecodeGetSystemInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSystemInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "get_system_info", err)
		}
		return decodeResponse(resp)
	}
}

// GetConversationHistory returns an endpoint that makes JSON-RPC requests to
// the assistant service get_conversation_history method.
func (c *Client) GetConversationHistory() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetConversationHistoryRequest(c.encoder)
		decodeResponse = DecodeGetConversationHistoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetConversationHistoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "get_conversation_history", err)
		}
		return decodeResponse(resp)
	}
}

// GeneratePrompts returns an endpoint that makes JSON-RPC requests to the
// assistant service generate_prompts method.
func (c *Client) GeneratePrompts() goa.Endpoint {
	var (
		encodeRequest  = EncodeGeneratePromptsRequest(c.encoder)
		decodeResponse = DecodeGeneratePromptsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGeneratePromptsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "generate_prompts", err)
		}
		return decodeResponse(resp)
	}
}

// RequestCompletion returns an endpoint that makes JSON-RPC requests to the
// assistant service request_completion method.
func (c *Client) RequestCompletion() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestCompletionRequest(c.encoder)
		decodeResponse = DecodeRequestCompletionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRequestCompletionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "request_completion", err)
		}
		return decodeResponse(resp)
	}
}

// GetWorkspaceInfo returns an endpoint that makes JSON-RPC requests to the
// assistant service get_workspace_info method.
func (c *Client) GetWorkspaceInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetWorkspaceInfoRequest(c.encoder)
		decodeResponse = DecodeGetWorkspaceInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetWorkspaceInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "get_workspace_info", err)
		}
		return decodeResponse(resp)
	}
}

// SendNotification returns an endpoint that makes JSON-RPC requests to the
// assistant service send_notification method.
func (c *Client) SendNotification() goa.Endpoint {
	var (
		encodeRequest  = EncodeSendNotificationRequest(c.encoder)
		decodeResponse = DecodeSendNotificationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSendNotificationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "send_notification", err)
		}
		return decodeResponse(resp)
	}
}

// SubscribeToUpdates returns an endpoint that makes JSON-RPC requests to the
// assistant service subscribe_to_updates method.
func (c *Client) SubscribeToUpdates() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubscribeToUpdatesRequest(c.encoder)
		decodeResponse = DecodeSubscribeToUpdatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubscribeToUpdatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "subscribe_to_updates", err)
		}
		return decodeResponse(resp)
	}
}

// ProcessBatch returns an endpoint that makes JSON-RPC requests to the
// assistant service process_batch method.
func (c *Client) ProcessBatch() goa.Endpoint {
	var (
		encodeRequest  = EncodeProcessBatchRequest(c.encoder)
		decodeResponse = DecodeProcessBatchResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildProcessBatchRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "process_batch", err)
		}
		return decodeResponse(resp)
	}
}

// MonitorResourceChanges returns an endpoint that makes JSON-RPC requests to
// the assistant service monitor_resource_changes method.
func (c *Client) MonitorResourceChanges() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorResourceChangesRequest(c.encoder)
		decodeResponse = DecodeMonitorResourceChangesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorResourceChangesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "monitor_resource_changes", err)
		}
		return decodeResponse(resp)
	}
}

// StreamLogs returns an endpoint that makes JSON-RPC requests to the assistant
// service stream_logs method.
func (c *Client) StreamLogs() goa.Endpoint {
	var (
		encodeRequest  = EncodeStreamLogsRequest(c.encoder)
		decodeResponse = DecodeStreamLogsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildStreamLogsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		if err := encodeRequest(req, v); err != nil {
			return nil, err
		}
		resp, err := c.Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("assistant", "stream_logs", err)
		}
		return decodeResponse(resp)
	}
}
