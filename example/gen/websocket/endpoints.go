// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket endpoints
//
// Command:
// $ goa gen example.com/assistant/design

package websocketsvc

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "websocket" service endpoints.
type Endpoints struct {
	UploadChunks    goa.Endpoint
	UploadDocuments goa.Endpoint
	Chat            goa.Endpoint
	InteractiveChat goa.Endpoint
}

// UploadChunksEndpointInput holds both the payload and the server stream of
// the "upload_chunks" method.
type UploadChunksEndpointInput struct {
	// Stream is the server stream used by the "upload_chunks" method to send data.
	Stream UploadChunksServerStream
}

// UploadDocumentsEndpointInput holds both the payload and the server stream of
// the "upload_documents" method.
type UploadDocumentsEndpointInput struct {
	// Stream is the server stream used by the "upload_documents" method to send
	// data.
	Stream UploadDocumentsServerStream
}

// ChatEndpointInput holds both the payload and the server stream of the "chat"
// method.
type ChatEndpointInput struct {
	// Stream is the server stream used by the "chat" method to send data.
	Stream ChatServerStream
}

// InteractiveChatEndpointInput holds both the payload and the server stream of
// the "interactive_chat" method.
type InteractiveChatEndpointInput struct {
	// Stream is the server stream used by the "interactive_chat" method to send
	// data.
	Stream InteractiveChatServerStream
}

// NewEndpoints wraps the methods of the "websocket" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		UploadChunks:    NewUploadChunksEndpoint(s),
		UploadDocuments: NewUploadDocumentsEndpoint(s),
		Chat:            NewChatEndpoint(s),
		InteractiveChat: NewInteractiveChatEndpoint(s),
	}
}

// Use applies the given middleware to all the "websocket" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UploadChunks = m(e.UploadChunks)
	e.UploadDocuments = m(e.UploadDocuments)
	e.Chat = m(e.Chat)
	e.InteractiveChat = m(e.InteractiveChat)
}

// NewUploadChunksEndpoint returns an endpoint function that calls the method
// "upload_chunks" of service "websocket".
func NewUploadChunksEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*UploadChunksEndpointInput)
		return nil, s.UploadChunks(ctx, ep.Stream)
	}
}

// NewUploadDocumentsEndpoint returns an endpoint function that calls the
// method "upload_documents" of service "websocket".
func NewUploadDocumentsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*UploadDocumentsEndpointInput)
		return nil, s.UploadDocuments(ctx, ep.Stream)
	}
}

// NewChatEndpoint returns an endpoint function that calls the method "chat" of
// service "websocket".
func NewChatEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*ChatEndpointInput)
		return nil, s.Chat(ctx, ep.Stream)
	}
}

// NewInteractiveChatEndpoint returns an endpoint function that calls the
// method "interactive_chat" of service "websocket".
func NewInteractiveChatEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*InteractiveChatEndpointInput)
		return nil, s.InteractiveChat(ctx, ep.Stream)
	}
}
