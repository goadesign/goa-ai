// Code generated by goa v3.22.2, DO NOT EDIT.
//
// websocket service
//
// Command:
// $ goa gen example.com/assistant/design

package websocketsvc

import (
	"context"
)

// Service for testing WebSocket streaming
type Service interface {
	// Upload data chunks via client stream
	UploadChunks(context.Context, UploadChunksServerStream) (err error)
	// Upload multiple documents via client stream
	UploadDocuments(context.Context, UploadDocumentsServerStream) (err error)
	// Interactive chat with bidirectional streaming
	Chat(context.Context, ChatServerStream) (err error)
	// Extended interactive chat with bidirectional streaming
	InteractiveChat(context.Context, InteractiveChatServerStream) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "assistant"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "websocket"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"upload_chunks", "upload_documents", "chat", "interactive_chat"}

// UploadChunksServerStream allows streaming instances of *UploadChunksResult
// to the client.
type UploadChunksServerStream interface {
	// SendAndClose streams instances of "UploadChunksResult" and closes the stream.
	SendAndClose(*UploadChunksResult) error
	SendAndCloseWithContext(context.Context, *UploadChunksResult) error
	Recv() (*DocumentChunk, error)
	RecvWithContext(context.Context) (*DocumentChunk, error)
}

// UploadChunksClientStream allows streaming instances of *DocumentChunk to the
// client.
type UploadChunksClientStream interface {
	// Send streams instances of "DocumentChunk".
	Send(*DocumentChunk) error
	SendWithContext(context.Context, *DocumentChunk) error
	CloseAndRecv() (*UploadChunksResult, error)
	CloseAndRecvWithContext(context.Context) (*UploadChunksResult, error)
}

// UploadDocumentsServerStream allows streaming instances of
// *UploadDocumentsResult to the client.
type UploadDocumentsServerStream interface {
	// SendAndClose streams instances of "UploadDocumentsResult" and closes the
	// stream.
	SendAndClose(*UploadDocumentsResult) error
	SendAndCloseWithContext(context.Context, *UploadDocumentsResult) error
	Recv() (*DocumentChunk, error)
	RecvWithContext(context.Context) (*DocumentChunk, error)
}

// UploadDocumentsClientStream allows streaming instances of *DocumentChunk to
// the client.
type UploadDocumentsClientStream interface {
	// Send streams instances of "DocumentChunk".
	Send(*DocumentChunk) error
	SendWithContext(context.Context, *DocumentChunk) error
	CloseAndRecv() (*UploadDocumentsResult, error)
	CloseAndRecvWithContext(context.Context) (*UploadDocumentsResult, error)
}

// ChatServerStream allows streaming instances of *ChatResponse to the client.
type ChatServerStream interface {
	// Send streams instances of "ChatResponse".
	Send(*ChatResponse) error
	SendWithContext(context.Context, *ChatResponse) error
	Recv() (*ChatInput, error)
	RecvWithContext(context.Context) (*ChatInput, error)
	// Close closes the stream.
	Close() error
}

// ChatClientStream allows streaming instances of *ChatInput to the client.
type ChatClientStream interface {
	// Send streams instances of "ChatInput".
	Send(*ChatInput) error
	SendWithContext(context.Context, *ChatInput) error
	Recv() (*ChatResponse, error)
	RecvWithContext(context.Context) (*ChatResponse, error)
	// Close closes the stream.
	Close() error
}

// InteractiveChatServerStream allows streaming instances of *ChatResponse to
// the client.
type InteractiveChatServerStream interface {
	// Send streams instances of "ChatResponse".
	Send(*ChatResponse) error
	SendWithContext(context.Context, *ChatResponse) error
	Recv() (*ChatInput, error)
	RecvWithContext(context.Context) (*ChatInput, error)
	// Close closes the stream.
	Close() error
}

// InteractiveChatClientStream allows streaming instances of *ChatInput to the
// client.
type InteractiveChatClientStream interface {
	// Send streams instances of "ChatInput".
	Send(*ChatInput) error
	SendWithContext(context.Context, *ChatInput) error
	Recv() (*ChatResponse, error)
	RecvWithContext(context.Context) (*ChatResponse, error)
	// Close closes the stream.
	Close() error
}

// ChatInput is the streaming payload type of the websocket service chat method.
type ChatInput struct {
	// User message
	Message string
	// Additional context
	Context map[string]any
	// Stream control command
	StreamControl *string
}

// ChatResponse is the result type of the websocket service chat method.
type ChatResponse struct {
	// Assistant response
	Response string
	// Whether assistant is still thinking
	Thinking bool
	// Response metadata
	Metadata map[string]any
}

// DocumentChunk is the streaming payload type of the websocket service
// upload_chunks method.
type DocumentChunk struct {
	// Document ID
	DocumentID string
	// Chunk index
	ChunkIndex int
	// Total number of chunks
	TotalChunks *int
	// Chunk data
	Data []byte
	// Document metadata
	Metadata map[string]any
}

// UploadChunksResult is the result type of the websocket service upload_chunks
// method.
type UploadChunksResult struct {
	// Total size
	TotalSize int
	// Number of chunks
	ChunkCount int
}

// UploadDocumentsResult is the result type of the websocket service
// upload_documents method.
type UploadDocumentsResult struct {
	// Total size
	TotalSize int
	// Number of documents
	DocumentCount int
}
